{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport Home from '../views/Home.vue';\nimport Cart from '../views/Cart.vue';\nimport Admin from '../views/Admin.vue';\nimport Login from '../views/Login.vue';\nimport Register from '../views/Register.vue';\nimport RealTime from '../views/realtime.vue';\nimport firebase from 'firebase/compat/app';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/',\n  name: 'home',\n  component: Home,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/cart',\n  name: 'cart',\n  component: Cart,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/login',\n  name: 'login',\n  component: Login,\n  meta: {\n    requiresGuest: true\n  }\n}, {\n  path: '/register',\n  name: 'register',\n  component: Register,\n  meta: {\n    requiresGuest: true\n  }\n}, {\n  path: '/admin',\n  name: 'admin',\n  component: Admin,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/realTime',\n  name: 'realTime',\n  component: RealTime,\n  meta: {\n    requiresAuth: true\n  }\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  // Check for requiresAuth guard\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // Check if NO logged user\n    if (!firebase.auth().currentUser) {\n      // Go to login\n      next({\n        path: '/login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    } else {\n      // Proceed to route\n      next();\n    }\n  } else if (to.matched.some(record => record.meta.requiresGuest)) {\n    // Check if NO logged user\n    if (firebase.auth().currentUser) {\n      // Go to login\n      next({\n        path: '/',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    } else {\n      // Proceed to route\n      next();\n    }\n  } else {\n    // Proceed to route\n    next();\n  }\n});\nexport default router;","map":{"version":3,"sources":["D:/UEK/project-99/src/router/index.js"],"names":["Vue","VueRouter","Home","Cart","Admin","Login","Register","RealTime","firebase","use","routes","path","name","component","meta","requiresAuth","requiresGuest","router","mode","base","process","env","BASE_URL","beforeEach","to","from","next","matched","some","record","auth","currentUser","query","redirect","fullPath"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport Home from '../views/Home.vue'\nimport Cart from '../views/Cart.vue'\nimport Admin from '../views/Admin.vue'\nimport Login from '../views/Login.vue';\nimport Register from '../views/Register.vue';\nimport RealTime from '../views/realtime.vue';\nimport firebase from 'firebase/compat/app';\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    component: Home,\n    meta: {\n        requiresAuth: true\n      }\n  },\n  {\n    path: '/cart',\n    name: 'cart',\n    component: Cart,\n    meta: {\n        requiresAuth: true\n      }\n  },\n {\n    path: '/login',\n    name: 'login',\n    component: Login,\n    meta: {\n        requiresGuest: true\n      }\n  },\n {\n    path: '/register',\n    name: 'register',\n    component: Register,\n    meta: {\n        requiresGuest: true\n      }\n  },\n  {\n    path: '/admin',\n    name: 'admin',\n    component: Admin,\n    meta: {\n        requiresAuth: true\n      }\n  },\n  {\n    path: '/realTime',\n    name: 'realTime',\n    component: RealTime,\n    meta: {\n        requiresAuth: true\n      }\n  }\n]\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n})\n\n\nrouter.beforeEach((to, from, next) => {\n  // Check for requiresAuth guard\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // Check if NO logged user\n    if (!firebase.auth().currentUser) {\n      // Go to login\n      next({\n        path: '/login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    } else {\n      // Proceed to route\n      next();\n    }\n  } else if (to.matched.some(record => record.meta.requiresGuest)) {\n    // Check if NO logged user\n    if (firebase.auth().currentUser) {\n      // Go to login\n      next({\n        path: '/',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    } else {\n      // Proceed to route\n      next();\n    }\n  } else {\n    // Proceed to route\n    next();\n  }\n});\n\n\n\nexport default router\n"]},"metadata":{},"sourceType":"module"}