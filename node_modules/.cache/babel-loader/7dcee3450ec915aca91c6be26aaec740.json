{"ast":null,"code":"import Vue from '../../utils/vue';\nimport { PortalTarget, Wormhole } from 'portal-vue';\nimport warn from '../../utils/warn';\nimport { getComponentConfig } from '../../utils/config';\nimport { removeClass, requestAF } from '../../utils/dom'; // --- Constants ---\n\nvar NAME = 'BToaster';\nexport var props = {\n  name: {\n    type: String,\n    required: true\n  },\n  ariaLive: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(NAME, 'ariaLive');\n    }\n  },\n  ariaAtomic: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(NAME, 'ariaAtomic');\n    } // Allowed: 'true' or 'false' or null\n\n  },\n  role: {\n    // Aria role\n    type: String,\n    default: function _default() {\n      return getComponentConfig(NAME, 'role');\n    }\n    /*\n    transition: {\n      type: [Boolean, String, Object],\n      default: false\n    }\n    */\n\n  } // @vue/component\n\n};\nexport var DefaultTransition = /*#__PURE__*/Vue.extend({\n  data: function data() {\n    return {\n      // Transition classes base name\n      name: 'b-toaster'\n    };\n  },\n  methods: {\n    onAfterEnter: function onAfterEnter(el) {\n      var _this = this; // Handle bug where enter-to class is not removed.\n      // Bug is related to portal-vue and transition-groups.\n\n\n      requestAF(function () {\n        removeClass(el, \"\".concat(_this.name, \"-enter-to\")); // The *-move class is also stuck on elements that moved,\n        // but there are no javascript hooks to handle after move.\n      });\n    }\n  },\n  render: function render(h) {\n    return h('transition-group', {\n      props: {\n        tag: 'div',\n        name: this.name\n      },\n      on: {\n        afterEnter: this.onAfterEnter\n      }\n    }, this.$slots.default);\n  }\n}); // @vue/component\n\nexport var BToaster = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  props: props,\n  data: function data() {\n    return {\n      // We don't render on SSR or if a an existing target found\n      doRender: false,\n      dead: false,\n      // Toaster names cannot change once created\n      staticName: this.name\n    };\n  },\n  beforeMount: function beforeMount() {\n    var _this2 = this;\n\n    this.staticName = this.name;\n    /* istanbul ignore if */\n\n    if (Wormhole.hasTarget(this.staticName)) {\n      warn(\"b-toaster: A <portal-target> with name '\".concat(this.name, \"' already exists in the document.\"));\n      this.dead = true;\n    } else {\n      this.doRender = true;\n      this.$once('hook:beforeDestroy', function () {\n        // Let toasts made with `this.$bvToast.toast()` know that this toaster\n        // is being destroyed and should should also destroy/hide themselves\n        _this2.$root.$emit('bv::toaster::destroyed', _this2.staticName);\n      });\n    }\n  },\n  destroyed: function destroyed() {\n    // Remove from DOM if needed\n\n    /* istanbul ignore next: difficult to test */\n    if (this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  },\n  render: function render(h) {\n    var $toaster = h('div', {\n      class: ['d-none', {\n        'b-dead-toaster': this.dead\n      }]\n    });\n\n    if (this.doRender) {\n      var $target = h(PortalTarget, {\n        staticClass: 'b-toaster-slot',\n        props: {\n          name: this.staticName,\n          multiple: true,\n          tag: 'div',\n          slim: false,\n          // transition: this.transition || DefaultTransition\n          transition: DefaultTransition\n        }\n      });\n      $toaster = h('div', {\n        staticClass: 'b-toaster',\n        class: [this.staticName],\n        attrs: {\n          id: this.staticName,\n          role: this.role || null,\n          // Fallback to null to make sure attribute doesn't exist\n          'aria-live': this.ariaLive,\n          'aria-atomic': this.ariaAtomic\n        }\n      }, [$target]);\n    }\n\n    return $toaster;\n  }\n});\nexport default BToaster;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/components/toast/toaster.js"],"names":["Vue","PortalTarget","Wormhole","warn","getComponentConfig","removeClass","requestAF","NAME","props","name","type","String","required","ariaLive","default","_default","ariaAtomic","role","DefaultTransition","extend","data","methods","onAfterEnter","el","_this","concat","render","h","tag","on","afterEnter","$slots","BToaster","doRender","dead","staticName","beforeMount","_this2","hasTarget","$once","$root","$emit","destroyed","$el","parentNode","removeChild","$toaster","class","$target","staticClass","multiple","slim","transition","attrs","id"],"mappings":"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","sourcesContent":["import Vue from '../../utils/vue';\nimport { PortalTarget, Wormhole } from 'portal-vue';\nimport warn from '../../utils/warn';\nimport { getComponentConfig } from '../../utils/config';\nimport { removeClass, requestAF } from '../../utils/dom'; // --- Constants ---\n\nvar NAME = 'BToaster';\nexport var props = {\n  name: {\n    type: String,\n    required: true\n  },\n  ariaLive: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(NAME, 'ariaLive');\n    }\n  },\n  ariaAtomic: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(NAME, 'ariaAtomic');\n    } // Allowed: 'true' or 'false' or null\n\n  },\n  role: {\n    // Aria role\n    type: String,\n    default: function _default() {\n      return getComponentConfig(NAME, 'role');\n    }\n    /*\n    transition: {\n      type: [Boolean, String, Object],\n      default: false\n    }\n    */\n\n  } // @vue/component\n\n};\nexport var DefaultTransition =\n/*#__PURE__*/\nVue.extend({\n  data: function data() {\n    return {\n      // Transition classes base name\n      name: 'b-toaster'\n    };\n  },\n  methods: {\n    onAfterEnter: function onAfterEnter(el) {\n      var _this = this;\n\n      // Handle bug where enter-to class is not removed.\n      // Bug is related to portal-vue and transition-groups.\n      requestAF(function () {\n        removeClass(el, \"\".concat(_this.name, \"-enter-to\")); // The *-move class is also stuck on elements that moved,\n        // but there are no javascript hooks to handle after move.\n      });\n    }\n  },\n  render: function render(h) {\n    return h('transition-group', {\n      props: {\n        tag: 'div',\n        name: this.name\n      },\n      on: {\n        afterEnter: this.onAfterEnter\n      }\n    }, this.$slots.default);\n  }\n}); // @vue/component\n\nexport var BToaster =\n/*#__PURE__*/\nVue.extend({\n  name: NAME,\n  props: props,\n  data: function data() {\n    return {\n      // We don't render on SSR or if a an existing target found\n      doRender: false,\n      dead: false,\n      // Toaster names cannot change once created\n      staticName: this.name\n    };\n  },\n  beforeMount: function beforeMount() {\n    var _this2 = this;\n\n    this.staticName = this.name;\n    /* istanbul ignore if */\n\n    if (Wormhole.hasTarget(this.staticName)) {\n      warn(\"b-toaster: A <portal-target> with name '\".concat(this.name, \"' already exists in the document.\"));\n      this.dead = true;\n    } else {\n      this.doRender = true;\n      this.$once('hook:beforeDestroy', function () {\n        // Let toasts made with `this.$bvToast.toast()` know that this toaster\n        // is being destroyed and should should also destroy/hide themselves\n        _this2.$root.$emit('bv::toaster::destroyed', _this2.staticName);\n      });\n    }\n  },\n  destroyed: function destroyed() {\n    // Remove from DOM if needed\n\n    /* istanbul ignore next: difficult to test */\n    if (this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  },\n  render: function render(h) {\n    var $toaster = h('div', {\n      class: ['d-none', {\n        'b-dead-toaster': this.dead\n      }]\n    });\n\n    if (this.doRender) {\n      var $target = h(PortalTarget, {\n        staticClass: 'b-toaster-slot',\n        props: {\n          name: this.staticName,\n          multiple: true,\n          tag: 'div',\n          slim: false,\n          // transition: this.transition || DefaultTransition\n          transition: DefaultTransition\n        }\n      });\n      $toaster = h('div', {\n        staticClass: 'b-toaster',\n        class: [this.staticName],\n        attrs: {\n          id: this.staticName,\n          role: this.role || null,\n          // Fallback to null to make sure attribute doesn't exist\n          'aria-live': this.ariaLive,\n          'aria-atomic': this.ariaAtomic\n        }\n      }, [$target]);\n    }\n\n    return $toaster;\n  }\n});\nexport default BToaster;"]},"metadata":{},"sourceType":"module"}