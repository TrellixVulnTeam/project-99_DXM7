{"ast":null,"code":"import { isBrowser, hasPromiseSupport, hasMutationObserverSupport, getNoWarn } from './env';\n/**\n * Log a warning message to the console with BootstrapVue formatting\n * @param {string} message\n */\n\nexport var warn = function warn(message)\n/* istanbul ignore next */\n{\n  if (!getNoWarn()) {\n    console.warn(\"[BootstrapVue warn]: \".concat(message));\n  }\n};\n/**\n * Warn when no Promise support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nexport var warnNotClient = function warnNotClient(source) {\n  /* istanbul ignore else */\n  if (isBrowser) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Can not be called during SSR.\"));\n    return true;\n  }\n};\n/**\n * Warn when no Promise support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nexport var warnNoPromiseSupport = function warnNoPromiseSupport(source) {\n  /* istanbul ignore else */\n  if (hasPromiseSupport) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Requires Promise support.\"));\n    return true;\n  }\n};\n/**\n * Warn when no MutationObserver support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nexport var warnNoMutationObserverSupport = function warnNoMutationObserverSupport(source) {\n  /* istanbul ignore else */\n  if (hasMutationObserverSupport) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Requires MutationObserver support.\"));\n    return true;\n  }\n}; // Default export\n\nexport default warn;","map":{"version":3,"sources":["C:/Users/Krystian/Desktop/ecommercevuefirestore/ecommercevuefirestore/node_modules/bootstrap-vue/esm/utils/warn.js"],"names":["isBrowser","hasPromiseSupport","hasMutationObserverSupport","getNoWarn","warn","message","console","concat","warnNotClient","source","warnNoPromiseSupport","warnNoMutationObserverSupport"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,iBAApB,EAAuCC,0BAAvC,EAAmEC,SAAnE,QAAoF,OAApF;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,IAAI,GAAG,SAASA,IAAT,CAAcC,OAAd;AAClB;AACA;AACE,MAAI,CAACF,SAAS,EAAd,EAAkB;AAChBG,IAAAA,OAAO,CAACF,IAAR,CAAa,wBAAwBG,MAAxB,CAA+BF,OAA/B,CAAb;AACD;AACF,CANM;AAOP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIG,aAAa,GAAG,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AACxD;AACA,MAAIT,SAAJ,EAAe;AACb,WAAO,KAAP;AACD,GAFD,MAEO;AACLI,IAAAA,IAAI,CAAC,GAAGG,MAAH,CAAUE,MAAV,EAAkB,iCAAlB,CAAD,CAAJ;AACA,WAAO,IAAP;AACD;AACF,CARM;AASP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,oBAAoB,GAAG,SAASA,oBAAT,CAA8BD,MAA9B,EAAsC;AACtE;AACA,MAAIR,iBAAJ,EAAuB;AACrB,WAAO,KAAP;AACD,GAFD,MAEO;AACLG,IAAAA,IAAI,CAAC,GAAGG,MAAH,CAAUE,MAAV,EAAkB,6BAAlB,CAAD,CAAJ;AACA,WAAO,IAAP;AACD;AACF,CARM;AASP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIE,6BAA6B,GAAG,SAASA,6BAAT,CAAuCF,MAAvC,EAA+C;AACxF;AACA,MAAIP,0BAAJ,EAAgC;AAC9B,WAAO,KAAP;AACD,GAFD,MAEO;AACLE,IAAAA,IAAI,CAAC,GAAGG,MAAH,CAAUE,MAAV,EAAkB,sCAAlB,CAAD,CAAJ;AACA,WAAO,IAAP;AACD;AACF,CARM,C,CAQJ;;AAEH,eAAeL,IAAf","sourcesContent":["import { isBrowser, hasPromiseSupport, hasMutationObserverSupport, getNoWarn } from './env';\n/**\n * Log a warning message to the console with BootstrapVue formatting\n * @param {string} message\n */\n\nexport var warn = function warn(message)\n/* istanbul ignore next */\n{\n  if (!getNoWarn()) {\n    console.warn(\"[BootstrapVue warn]: \".concat(message));\n  }\n};\n/**\n * Warn when no Promise support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nexport var warnNotClient = function warnNotClient(source) {\n  /* istanbul ignore else */\n  if (isBrowser) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Can not be called during SSR.\"));\n    return true;\n  }\n};\n/**\n * Warn when no Promise support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nexport var warnNoPromiseSupport = function warnNoPromiseSupport(source) {\n  /* istanbul ignore else */\n  if (hasPromiseSupport) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Requires Promise support.\"));\n    return true;\n  }\n};\n/**\n * Warn when no MutationObserver support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nexport var warnNoMutationObserverSupport = function warnNoMutationObserverSupport(source) {\n  /* istanbul ignore else */\n  if (hasMutationObserverSupport) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Requires MutationObserver support.\"));\n    return true;\n  }\n}; // Default export\n\nexport default warn;"]},"metadata":{},"sourceType":"module"}