{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { keys } from '../../../utils/object';\nimport { isDate, isObject, isUndefinedOrNull } from '../../../utils/inspect'; // Recursively stringifies the values of an object, space separated, in an\n// SSR safe deterministic way (keys are sorted before stringification)\n//\n//   ex:\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n//   becomes\n//     'one 3 2 zzz 10 12 11'\n//\n// Primitives (numbers/strings) are returned as-is\n// Null and undefined values are filtered out\n// Dates are converted to their native string format\n\nvar stringifyObjectValues = function stringifyObjectValues(val) {\n  if (isUndefinedOrNull(val)) {\n    /* istanbul ignore next */\n    return '';\n  } // Arrays are also object, and keys just returns the array indexes\n  // Date objects we convert to strings\n\n\n  if (isObject(val) && !isDate(val)) {\n    return keys(val).sort() // Sort to prevent SSR issues on pre-rendered sorted tables\n    .filter(function (v) {\n      return !isUndefinedOrNull(v);\n    }) // Ignore undefined/null values\n    .map(function (k) {\n      return stringifyObjectValues(val[k]);\n    }).join(' ');\n  }\n\n  return String(val);\n};\n\nexport default stringifyObjectValues;","map":{"version":3,"sources":["D:/UEK/ecommercevuefirestore2304/node_modules/bootstrap-vue/esm/components/table/helpers/stringify-object-values.js"],"names":["keys","isDate","isObject","isUndefinedOrNull","stringifyObjectValues","val","sort","filter","v","map","k","join","String"],"mappings":";;;;;AAAA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,iBAA3B,QAAoD,wBAApD,C,CAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,GAA/B,EAAoC;AAC9D,MAAIF,iBAAiB,CAACE,GAAD,CAArB,EAA4B;AAC1B;AACA,WAAO,EAAP;AACD,GAJ6D,CAI5D;AACF;;;AAGA,MAAIH,QAAQ,CAACG,GAAD,CAAR,IAAiB,CAACJ,MAAM,CAACI,GAAD,CAA5B,EAAmC;AACjC,WAAOL,IAAI,CAACK,GAAD,CAAJ,CAAUC,IAAV,GAAiB;AAAjB,KACNC,MADM,CACC,UAAUC,CAAV,EAAa;AACnB,aAAO,CAACL,iBAAiB,CAACK,CAAD,CAAzB;AACD,KAHM,EAGJ;AAHI,KAINC,GAJM,CAIF,UAAUC,CAAV,EAAa;AAChB,aAAON,qBAAqB,CAACC,GAAG,CAACK,CAAD,CAAJ,CAA5B;AACD,KANM,EAMJC,IANI,CAMC,GAND,CAAP;AAOD;;AAED,SAAOC,MAAM,CAACP,GAAD,CAAb;AACD,CAnBD;;AAqBA,eAAeD,qBAAf","sourcesContent":["import { keys } from '../../../utils/object';\nimport { isDate, isObject, isUndefinedOrNull } from '../../../utils/inspect'; // Recursively stringifies the values of an object, space separated, in an\n// SSR safe deterministic way (keys are sorted before stringification)\n//\n//   ex:\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n//   becomes\n//     'one 3 2 zzz 10 12 11'\n//\n// Primitives (numbers/strings) are returned as-is\n// Null and undefined values are filtered out\n// Dates are converted to their native string format\n\nvar stringifyObjectValues = function stringifyObjectValues(val) {\n  if (isUndefinedOrNull(val)) {\n    /* istanbul ignore next */\n    return '';\n  } // Arrays are also object, and keys just returns the array indexes\n  // Date objects we convert to strings\n\n\n  if (isObject(val) && !isDate(val)) {\n    return keys(val).sort() // Sort to prevent SSR issues on pre-rendered sorted tables\n    .filter(function (v) {\n      return !isUndefinedOrNull(v);\n    }) // Ignore undefined/null values\n    .map(function (k) {\n      return stringifyObjectValues(val[k]);\n    }).join(' ');\n  }\n\n  return String(val);\n};\n\nexport default stringifyObjectValues;"]},"metadata":{},"sourceType":"module"}