{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n\n/*\n * SSR Safe Client Side ID attribute generation\n * id's can only be generated client side, after mount.\n * this._uid is not synched between server and client.\n */\n// @vue/component\nexport default {\n  props: {\n    id: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      localId_: null\n    };\n  },\n  computed: {\n    safeId: function safeId() {\n      // Computed property that returns a dynamic function for creating the ID.\n      // Reacts to changes in both .id and .localId_ And regens a new function\n      var id = this.id || this.localId_; // We return a function that accepts an optional suffix string\n      // So this computed prop looks and works like a method!!!\n      // But benefits from Vue's Computed prop caching\n\n      var fn = function fn(suffix) {\n        if (!id) {\n          return null;\n        }\n\n        suffix = String(suffix || '').replace(/\\s+/g, '_');\n        return suffix ? id + '_' + suffix : id;\n      };\n\n      return fn;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this; // mounted only occurs client side\n\n\n    this.$nextTick(function () {\n      // Update dom with auto ID after dom loaded to prevent\n      // SSR hydration errors.\n      _this.localId_ = \"__BVID__\".concat(_this._uid);\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Krystian/Desktop/TO3/ecommercevuefirestore/node_modules/bootstrap-vue/esm/mixins/id.js"],"names":["props","id","type","String","default","data","localId_","computed","safeId","fn","suffix","replace","mounted","_this","$nextTick","concat","_uid"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACbA,EAAAA,KAAK,EAAE;AACLC,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAEC,MADJ;AAEFC,MAAAA,OAAO,EAAE;AAFP;AADC,GADM;AAObC,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,WAAO;AACLC,MAAAA,QAAQ,EAAE;AADL,KAAP;AAGD,GAXY;AAYbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB;AACA;AACA,UAAIP,EAAE,GAAG,KAAKA,EAAL,IAAW,KAAKK,QAAzB,CAHwB,CAGW;AACnC;AACA;;AAEA,UAAIG,EAAE,GAAG,SAASA,EAAT,CAAYC,MAAZ,EAAoB;AAC3B,YAAI,CAACT,EAAL,EAAS;AACP,iBAAO,IAAP;AACD;;AAEDS,QAAAA,MAAM,GAAGP,MAAM,CAACO,MAAM,IAAI,EAAX,CAAN,CAAqBC,OAArB,CAA6B,MAA7B,EAAqC,GAArC,CAAT;AACA,eAAOD,MAAM,GAAGT,EAAE,GAAG,GAAL,GAAWS,MAAd,GAAuBT,EAApC;AACD,OAPD;;AASA,aAAOQ,EAAP;AACD;AAlBO,GAZG;AAgCbG,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,QAAIC,KAAK,GAAG,IAAZ,CAD0B,CAG1B;;;AACA,SAAKC,SAAL,CAAe,YAAY;AACzB;AACA;AACAD,MAAAA,KAAK,CAACP,QAAN,GAAiB,WAAWS,MAAX,CAAkBF,KAAK,CAACG,IAAxB,CAAjB;AACD,KAJD;AAKD;AAzCY,CAAf","sourcesContent":["/*\n * SSR Safe Client Side ID attribute generation\n * id's can only be generated client side, after mount.\n * this._uid is not synched between server and client.\n */\n// @vue/component\nexport default {\n  props: {\n    id: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      localId_: null\n    };\n  },\n  computed: {\n    safeId: function safeId() {\n      // Computed property that returns a dynamic function for creating the ID.\n      // Reacts to changes in both .id and .localId_ And regens a new function\n      var id = this.id || this.localId_; // We return a function that accepts an optional suffix string\n      // So this computed prop looks and works like a method!!!\n      // But benefits from Vue's Computed prop caching\n\n      var fn = function fn(suffix) {\n        if (!id) {\n          return null;\n        }\n\n        suffix = String(suffix || '').replace(/\\s+/g, '_');\n        return suffix ? id + '_' + suffix : id;\n      };\n\n      return fn;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // mounted only occurs client side\n    this.$nextTick(function () {\n      // Update dom with auto ID after dom loaded to prevent\n      // SSR hydration errors.\n      _this.localId_ = \"__BVID__\".concat(_this._uid);\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}