{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport identity from './identity';\nimport { isArray } from './inspect';\nimport { keys } from './object';\n/**\n * Given an array of properties or an object of property keys,\n * plucks all the values off the target object, returning a new object\n * that has props that reference the original prop values\n *\n * @param {{}|string[]} keysToPluck\n * @param {{}} objToPluck\n * @param {Function} transformFn\n * @return {{}}\n */\n\nvar pluckProps = function pluckProps(keysToPluck, objToPluck) {\n  var transformFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\n  return (isArray(keysToPluck) ? keysToPluck.slice() : keys(keysToPluck)).reduce(function (memo, prop) {\n    memo[transformFn(prop)] = objToPluck[prop];\n    return memo;\n  }, {});\n};\n\nexport default pluckProps;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/utils/pluck-props.js"],"names":["identity","isArray","keys","pluckProps","keysToPluck","objToPluck","transformFn","arguments","length","undefined","slice","reduce","memo","prop"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,IAAT,QAAqB,UAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,WAApB,EAAiCC,UAAjC,EAA6C;AAC5D,MAAIC,WAAW,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEP,QAAtF;AACA,SAAO,CAACC,OAAO,CAACG,WAAD,CAAP,GAAuBA,WAAW,CAACM,KAAZ,EAAvB,GAA6CR,IAAI,CAACE,WAAD,CAAlD,EAAiEO,MAAjE,CAAwE,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACnGD,IAAAA,IAAI,CAACN,WAAW,CAACO,IAAD,CAAZ,CAAJ,GAA0BR,UAAU,CAACQ,IAAD,CAApC;AACA,WAAOD,IAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CAND;;AAQA,eAAeT,UAAf","sourcesContent":["import identity from './identity';\nimport { isArray } from './inspect';\nimport { keys } from './object';\n/**\n * Given an array of properties or an object of property keys,\n * plucks all the values off the target object, returning a new object\n * that has props that reference the original prop values\n *\n * @param {{}|string[]} keysToPluck\n * @param {{}} objToPluck\n * @param {Function} transformFn\n * @return {{}}\n */\n\nvar pluckProps = function pluckProps(keysToPluck, objToPluck) {\n  var transformFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\n  return (isArray(keysToPluck) ? keysToPluck.slice() : keys(keysToPluck)).reduce(function (memo, prop) {\n    memo[transformFn(prop)] = objToPluck[prop];\n    return memo;\n  }, {});\n};\n\nexport default pluckProps;"]},"metadata":{},"sourceType":"module"}