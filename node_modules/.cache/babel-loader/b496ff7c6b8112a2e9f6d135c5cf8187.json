{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { _registerComponent, registerVersion, getApp, _getProvider } from '@firebase/app';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues( // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  const result = {};\n\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n\n  return result;\n}\n/**\r\n * Takes data and encodes it in a JSON-friendly way, such that types such as\r\n * Date are preserved.\r\n * @internal\r\n * @param data - Data to encode.\r\n */\n\n\nfunction encode(data) {\n  if (data == null) {\n    return null;\n  }\n\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n\n  if (data === true || data === false) {\n    return data;\n  }\n\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n\n  if (Array.isArray(data)) {\n    return data.map(x => encode(x));\n  }\n\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data, x => encode(x));\n  } // If we got this far, the data is not encodable.\n\n\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n/**\r\n * Takes data that's been encoded in a JSON-friendly form and returns a form\r\n * with richer datatypes, such as Dates, etc.\r\n * @internal\r\n * @param json - JSON to convert.\r\n */\n\n\nfunction decode(json) {\n  if (json == null) {\n    return json;\n  }\n\n  if (json['@type']) {\n    switch (json['@type']) {\n      case LONG_TYPE: // Fall through and handle this the same as unsigned.\n\n      case UNSIGNED_LONG_TYPE:\n        {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number(json['value']);\n\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n\n          return value;\n        }\n\n      default:\n        {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n    }\n  }\n\n  if (Array.isArray(json)) {\n    return json.map(x => decode(x));\n  }\n\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json, x => decode(x));\n  } // Anything else is safe to return.\n\n\n  return json;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Functions.\r\n */\n\n\nconst FUNCTIONS_TYPE = 'functions';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\n\nconst errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\n\nclass FunctionsError extends FirebaseError {\n  constructor(\n  /**\r\n   * A standard error code that will be returned to the client. This also\r\n   * determines the HTTP status code of the response, as defined in code.proto.\r\n   */\n  code, message,\n  /**\r\n   * Extra data to be converted to JSON and included in the error response.\r\n   */\n  details) {\n    super(`${FUNCTIONS_TYPE}/${code}`, message || '');\n    this.details = details;\n  }\n\n}\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\n\n\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n\n    case 400:\n      return 'invalid-argument';\n\n    case 401:\n      return 'unauthenticated';\n\n    case 403:\n      return 'permission-denied';\n\n    case 404:\n      return 'not-found';\n\n    case 409:\n      return 'aborted';\n\n    case 429:\n      return 'resource-exhausted';\n\n    case 499:\n      return 'cancelled';\n\n    case 500:\n      return 'internal';\n\n    case 501:\n      return 'unimplemented';\n\n    case 503:\n      return 'unavailable';\n\n    case 504:\n      return 'deadline-exceeded';\n  }\n\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\n\n\nfunction _errorForResponse(status, bodyJSON) {\n  let code = codeForHTTPStatus(status); // Start with reasonable defaults from the status code.\n\n  let description = code;\n  let details = undefined; // Then look through the body for explicit details.\n\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n\n    if (errorJSON) {\n      const status = errorJSON.status;\n\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n\n        code = errorCodeMap[status]; // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n\n        description = status;\n      }\n\n      const message = errorJSON.message;\n\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {// If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new FunctionsError(code, description, details);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n * @internal\r\n */\n\n\nclass ContextProvider {\n  constructor(authProvider, messagingProvider, appCheckProvider) {\n    this.auth = null;\n    this.messaging = null;\n    this.appCheck = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(auth => this.auth = auth, () => {\n        /* get() never rejects */\n      });\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(messaging => this.messaging = messaging, () => {\n        /* get() never rejects */\n      });\n    }\n\n    if (!this.appCheck) {\n      appCheckProvider.get().then(appCheck => this.appCheck = appCheck, () => {\n        /* get() never rejects */\n      });\n    }\n  }\n\n  async getAuthToken() {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      return token === null || token === void 0 ? void 0 : token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getMessagingToken() {\n    if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') {\n      return undefined;\n    }\n\n    try {\n      return await this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getAppCheckToken() {\n    if (this.appCheck) {\n      const result = await this.appCheck.getToken();\n\n      if (result.error) {\n        // Do not send the App Check header to the functions endpoint if\n        // there was an error from the App Check exchange endpoint. The App\n        // Check SDK will already have logged the error to console.\n        return null;\n      }\n\n      return result.token;\n    }\n\n    return null;\n  }\n\n  async getContext() {\n    const authToken = await this.getAuthToken();\n    const messagingToken = await this.getMessagingToken();\n    const appCheckToken = await this.getAppCheckToken();\n    return {\n      authToken,\n      messagingToken,\n      appCheckToken\n    };\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_REGION = 'us-central1';\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type FunctionsError.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\n\nfunction failAfter(millis) {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timer = null;\n  return {\n    promise: new Promise((_, reject) => {\n      timer = setTimeout(() => {\n        reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n      }, millis);\n    }),\n    cancel: () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    }\n  };\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n * @internal\r\n */\n\n\nclass FunctionsService {\n  /**\r\n   * Creates a new Functions service for the given app.\r\n   * @param app - The FirebaseApp to use.\r\n   */\n  constructor(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain = DEFAULT_REGION, fetchImpl) {\n    this.app = app;\n    this.fetchImpl = fetchImpl;\n    this.emulatorOrigin = null;\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider); // Cancels all ongoing requests when resolved.\n\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return Promise.resolve(resolve());\n      };\n    }); // Resolve the region or custom domain overload by attempting to parse it.\n\n    try {\n      const url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin;\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n\n  _delete() {\n    return this.deleteService();\n  }\n  /**\r\n   * Returns the URL for a callable with the given name.\r\n   * @param name - The name of the callable.\r\n   * @internal\r\n   */\n\n\n  _url(name) {\n    const projectId = this.app.options.projectId;\n\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n}\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host The emulator host (ex: localhost)\r\n * @param port The emulator port (ex: 5001)\r\n * @public\r\n */\n\n\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\n  functionsInstance.emulatorOrigin = `http://${host}:${port}`;\n}\n/**\r\n * Returns a reference to the callable https trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\n\n\nfunction httpsCallable$1(functionsInstance, name, options) {\n  return data => {\n    return call(functionsInstance, name, data, options || {});\n  };\n}\n/**\r\n * Does an HTTP POST and returns the completed response.\r\n * @param url The url to post to.\r\n * @param body The JSON body of the post.\r\n * @param headers The HTTP headers to include in the request.\r\n * @return A Promise that will succeed when the request finishes.\r\n */\n\n\nasync function postJSON(url, body, headers, fetchImpl) {\n  headers['Content-Type'] = 'application/json';\n  let response;\n\n  try {\n    response = await fetchImpl(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers\n    });\n  } catch (e) {\n    // This could be an unhandled error on the backend, or it could be a\n    // network error. There's no way to know, since an unhandled error on the\n    // backend will fail to set the proper CORS header, and thus will be\n    // treated as a network error by fetch.\n    return {\n      status: 0,\n      json: null\n    };\n  }\n\n  let json = null;\n\n  try {\n    json = await response.json();\n  } catch (e) {// If we fail to parse JSON, it will fail the same as an empty body.\n  }\n\n  return {\n    status: response.status,\n    json\n  };\n}\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param name The name of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\n\n\nasync function call(functionsInstance, name, data, options) {\n  const url = functionsInstance._url(name); // Encode any special types, such as dates, in the input data.\n\n\n  data = encode(data);\n  const body = {\n    data\n  }; // Add a header for the authToken.\n\n  const headers = {};\n  const context = await functionsInstance.contextProvider.getContext();\n\n  if (context.authToken) {\n    headers['Authorization'] = 'Bearer ' + context.authToken;\n  }\n\n  if (context.messagingToken) {\n    headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n  }\n\n  if (context.appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = context.appCheckToken;\n  } // Default timeout to 70s, but let the options override it.\n\n\n  const timeout = options.timeout || 70000;\n  const failAfterHandle = failAfter(timeout);\n  const response = await Promise.race([postJSON(url, body, headers, functionsInstance.fetchImpl), failAfterHandle.promise, functionsInstance.cancelAllRequests]); // Always clear the failAfter timeout\n\n  failAfterHandle.cancel(); // If service was deleted, interrupted response throws an error.\n\n  if (!response) {\n    throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\n  } // Check for an error status, regardless of http status.\n\n\n  const error = _errorForResponse(response.status, response.json);\n\n  if (error) {\n    throw error;\n  }\n\n  if (!response.json) {\n    throw new FunctionsError('internal', 'Response is not valid JSON object.');\n  }\n\n  let responseData = response.json.data; // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n  // backwards compatibility.\n\n  if (typeof responseData === 'undefined') {\n    responseData = response.json.result;\n  }\n\n  if (typeof responseData === 'undefined') {\n    // Consider the response malformed.\n    throw new FunctionsError('internal', 'Response is missing data field.');\n  } // Decode any special types, such as dates, in the returned data.\n\n\n  const decodedData = decode(responseData);\n  return {\n    data: decodedData\n  };\n}\n\nconst name = \"@firebase/functions\";\nconst version = \"0.7.11\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst AUTH_INTERNAL_NAME = 'auth-internal';\nconst APP_CHECK_INTERNAL_NAME = 'app-check-internal';\nconst MESSAGING_INTERNAL_NAME = 'messaging-internal';\n\nfunction registerFunctions(fetchImpl, variant) {\n  const factory = (container, {\n    instanceIdentifier: regionOrCustomDomain\n  }) => {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\n  };\n\n  _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a {@link Functions} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param regionOrCustomDomain - one of:\r\n *   a) The region the callable functions are located in (ex: us-central1)\r\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\r\n * @public\r\n */\n\n\nfunction getFunctions(app = getApp(), regionOrCustomDomain = DEFAULT_REGION) {\n  // Dependencies\n  const functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\n\n  const functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  return functionsInstance;\n}\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @public\r\n */\n\n\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\n  connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\n}\n/**\r\n * Returns a reference to the callable HTTPS trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\n\n\nfunction httpsCallable(functionsInstance, name, options) {\n  return httpsCallable$1(getModularInstance(functionsInstance), name, options);\n}\n/**\r\n * Cloud Functions for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterFunctions(fetch.bind(self));\nexport { connectFunctionsEmulator, getFunctions, httpsCallable };","map":{"version":3,"mappings":"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","names":["LONG_TYPE","UNSIGNED_LONG_TYPE","mapValues","o","f","result","key","hasOwnProperty","encode","data","Number","valueOf","isFinite","Object","prototype","toString","call","Date","toISOString","Array","isArray","map","x","Error","decode","json","value","isNaN","FUNCTIONS_TYPE","errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","FunctionsError","FirebaseError","constructor","code","message","details","codeForHTTPStatus","status","_errorForResponse","bodyJSON","description","undefined","errorJSON","error","e","ContextProvider","authProvider","messagingProvider","appCheckProvider","auth","getImmediate","optional","messaging","get","then","appCheck","getAuthToken","token","getToken","accessToken","getMessagingToken","self","Notification","permission","getAppCheckToken","getContext","authToken","messagingToken","appCheckToken","DEFAULT_REGION","failAfter","millis","timer","promise","Promise","_","reject","setTimeout","cancel","clearTimeout","FunctionsService","app","regionOrCustomDomain","fetchImpl","contextProvider","cancelAllRequests","resolve","deleteService","url","URL","customDomain","origin","region","_delete","_url","name","projectId","options","emulatorOrigin","connectFunctionsEmulator","functionsInstance","host","port","httpsCallable","postJSON","body","headers","response","method","JSON","stringify","context","timeout","failAfterHandle","race","responseData","decodedData","AUTH_INTERNAL_NAME","APP_CHECK_INTERNAL_NAME","MESSAGING_INTERNAL_NAME","registerFunctions","variant","factory","container","instanceIdentifier","getProvider","_registerComponent","Component","setMultipleInstances","registerVersion","version","getFunctions","getApp","functionsProvider","_getProvider","getModularInstance","identifier","_connectFunctionsEmulator","_httpsCallable","fetch","bind"],"sources":["../src/serializer.ts","../src/constants.ts","../src/error.ts","../src/context.ts","../src/service.ts","../src/config.ts","../src/api.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\n/**\n * Takes data and encodes it in a JSON-friendly way, such that types such as\n * Date are preserved.\n * @internal\n * @param data - Data to encode.\n */\nexport function encode(data: unknown): unknown {\n  if (data == null) {\n    return null;\n  }\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n  if (data === true || data === false) {\n    return data;\n  }\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n  if (Array.isArray(data)) {\n    return data.map(x => encode(x));\n  }\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data!, x => encode(x));\n  }\n  // If we got this far, the data is not encodable.\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n\n/**\n * Takes data that's been encoded in a JSON-friendly form and returns a form\n * with richer datatypes, such as Dates, etc.\n * @internal\n * @param json - JSON to convert.\n */\nexport function decode(json: unknown): unknown {\n  if (json == null) {\n    return json;\n  }\n  if ((json as { [key: string]: unknown })['@type']) {\n    switch ((json as { [key: string]: unknown })['@type']) {\n      case LONG_TYPE:\n      // Fall through and handle this the same as unsigned.\n      case UNSIGNED_LONG_TYPE: {\n        // Technically, this could work return a valid number for malformed\n        // data if there was a number followed by garbage. But it's just not\n        // worth all the extra code to detect that case.\n        const value = Number((json as { [key: string]: unknown })['value']);\n        if (isNaN(value)) {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n        return value;\n      }\n      default: {\n        throw new Error('Data cannot be decoded from JSON: ' + json);\n      }\n    }\n  }\n  if (Array.isArray(json)) {\n    return json.map(x => decode(x));\n  }\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json!, x => decode(x));\n  }\n  // Anything else is safe to return.\n  return json;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Functions.\n */\nexport const FUNCTIONS_TYPE = 'functions';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FunctionsErrorCode } from './public-types';\nimport { decode } from './serializer';\nimport { HttpResponseBody } from './service';\nimport { FirebaseError } from '@firebase/util';\nimport { FUNCTIONS_TYPE } from './constants';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class FunctionsError extends FirebaseError {\n  constructor(\n    /**\n     * A standard error code that will be returned to the client. This also\n     * determines the HTTP status code of the response, as defined in code.proto.\n     */\n    code: FunctionsErrorCode,\n    message?: string,\n    /**\n     * Extra data to be converted to JSON and included in the error response.\n     */\n    readonly details?: unknown\n  ) {\n    super(`${FUNCTIONS_TYPE}/${code}`, message || '');\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new FunctionsError(code, description, details);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from '@firebase/component';\nimport {\n  AppCheckInternalComponentName,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport {\n  MessagingInternal,\n  MessagingInternalComponentName\n} from '@firebase/messaging-interop-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\n\n/**\n * The metadata that should be supplied with function calls.\n * @internal\n */\nexport interface Context {\n  authToken?: string;\n  messagingToken?: string;\n  appCheckToken: string | null;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n * @internal\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: MessagingInternal | null = null;\n  private appCheck: FirebaseAppCheckInternal | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<MessagingInternalComponentName>,\n    appCheckProvider: Provider<AppCheckInternalComponentName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.appCheck) {\n      appCheckProvider.get().then(\n        appCheck => (this.appCheck = appCheck),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      return token?.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getMessagingToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return await this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getAppCheckToken(): Promise<string | null> {\n    if (this.appCheck) {\n      const result = await this.appCheck.getToken();\n      if (result.error) {\n        // Do not send the App Check header to the functions endpoint if\n        // there was an error from the App Check exchange endpoint. The App\n        // Check SDK will already have logged the error to console.\n        return null;\n      }\n      return result.token;\n    }\n    return null;\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const messagingToken = await this.getMessagingToken();\n    const appCheckToken = await this.getAppCheckToken();\n    return { authToken, messagingToken, appCheckToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport {\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from './public-types';\nimport { _errorForResponse, FunctionsError } from './error';\nimport { ContextProvider } from './context';\nimport { encode, decode } from './serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { MessagingInternalComponentName } from '@firebase/messaging-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n\nexport const DEFAULT_REGION = 'us-central1';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\ninterface CancellablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type FunctionsError.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(millis: number): CancellablePromise<never> {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timer: any | null = null;\n  return {\n    promise: new Promise((_, reject) => {\n      timer = setTimeout(() => {\n        reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n      }, millis);\n    }),\n    cancel: () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    }\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n * @internal\n */\nexport class FunctionsService implements _FirebaseService {\n  readonly contextProvider: ContextProvider;\n  emulatorOrigin: string | null = null;\n  cancelAllRequests: Promise<void>;\n  deleteService!: () => Promise<void>;\n  region: string;\n  customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app.\n   * @param app - The FirebaseApp to use.\n   */\n  constructor(\n    readonly app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<MessagingInternalComponentName>,\n    appCheckProvider: Provider<AppCheckInternalComponentName>,\n    regionOrCustomDomain: string = DEFAULT_REGION,\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(\n      authProvider,\n      messagingProvider,\n      appCheckProvider\n    );\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return Promise.resolve(resolve());\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin;\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n\n  _delete(): Promise<void> {\n    return this.deleteService();\n  }\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name - The name of the callable.\n   * @internal\n   */\n  _url(name: string): string {\n    const projectId = this.app.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n}\n\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host The emulator host (ex: localhost)\n * @param port The emulator port (ex: 5001)\n * @public\n */\nexport function connectFunctionsEmulator(\n  functionsInstance: FunctionsService,\n  host: string,\n  port: number\n): void {\n  functionsInstance.emulatorOrigin = `http://${host}:${port}`;\n}\n\n/**\n * Returns a reference to the callable https trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nexport function httpsCallable<RequestData, ResponseData>(\n  functionsInstance: FunctionsService,\n  name: string,\n  options?: HttpsCallableOptions\n): HttpsCallable<RequestData, ResponseData> {\n  return (data => {\n    return call(functionsInstance, name, data, options || {});\n  }) as HttpsCallable<RequestData, ResponseData>;\n}\n\n/**\n * Does an HTTP POST and returns the completed response.\n * @param url The url to post to.\n * @param body The JSON body of the post.\n * @param headers The HTTP headers to include in the request.\n * @return A Promise that will succeed when the request finishes.\n */\nasync function postJSON(\n  url: string,\n  body: unknown,\n  headers: { [key: string]: string },\n  fetchImpl: typeof fetch\n): Promise<HttpResponse> {\n  headers['Content-Type'] = 'application/json';\n\n  let response: Response;\n  try {\n    response = await fetchImpl(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers\n    });\n  } catch (e) {\n    // This could be an unhandled error on the backend, or it could be a\n    // network error. There's no way to know, since an unhandled error on the\n    // backend will fail to set the proper CORS header, and thus will be\n    // treated as a network error by fetch.\n    return {\n      status: 0,\n      json: null\n    };\n  }\n  let json: HttpResponseBody | null = null;\n  try {\n    json = await response.json();\n  } catch (e) {\n    // If we fail to parse JSON, it will fail the same as an empty body.\n  }\n  return {\n    status: response.status,\n    json\n  };\n}\n\n/**\n * Calls a callable function asynchronously and returns the result.\n * @param name The name of the callable trigger.\n * @param data The data to pass as params to the function.s\n */\nasync function call(\n  functionsInstance: FunctionsService,\n  name: string,\n  data: unknown,\n  options: HttpsCallableOptions\n): Promise<HttpsCallableResult> {\n  const url = functionsInstance._url(name);\n\n  // Encode any special types, such as dates, in the input data.\n  data = encode(data);\n  const body = { data };\n\n  // Add a header for the authToken.\n  const headers: { [key: string]: string } = {};\n  const context = await functionsInstance.contextProvider.getContext();\n  if (context.authToken) {\n    headers['Authorization'] = 'Bearer ' + context.authToken;\n  }\n  if (context.messagingToken) {\n    headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n  }\n  if (context.appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = context.appCheckToken;\n  }\n\n  // Default timeout to 70s, but let the options override it.\n  const timeout = options.timeout || 70000;\n\n  const failAfterHandle = failAfter(timeout);\n  const response = await Promise.race([\n    postJSON(url, body, headers, functionsInstance.fetchImpl),\n    failAfterHandle.promise,\n    functionsInstance.cancelAllRequests\n  ]);\n\n  // Always clear the failAfter timeout\n  failAfterHandle.cancel();\n\n  // If service was deleted, interrupted response throws an error.\n  if (!response) {\n    throw new FunctionsError(\n      'cancelled',\n      'Firebase Functions instance was deleted.'\n    );\n  }\n\n  // Check for an error status, regardless of http status.\n  const error = _errorForResponse(response.status, response.json);\n  if (error) {\n    throw error;\n  }\n\n  if (!response.json) {\n    throw new FunctionsError('internal', 'Response is not valid JSON object.');\n  }\n\n  let responseData = response.json.data;\n  // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n  // backwards compatibility.\n  if (typeof responseData === 'undefined') {\n    responseData = response.json.result;\n  }\n  if (typeof responseData === 'undefined') {\n    // Consider the response malformed.\n    throw new FunctionsError('internal', 'Response is missing data field.');\n  }\n\n  // Decode any special types, such as dates, in the returned data.\n  const decodedData = decode(responseData);\n\n  return { data: decodedData };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport { FunctionsService } from './service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactory\n} from '@firebase/component';\nimport { FUNCTIONS_TYPE } from './constants';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { MessagingInternalComponentName } from '@firebase/messaging-interop-types';\nimport { name, version } from '../package.json';\n\nconst AUTH_INTERNAL_NAME: FirebaseAuthInternalName = 'auth-internal';\nconst APP_CHECK_INTERNAL_NAME: AppCheckInternalComponentName =\n  'app-check-internal';\nconst MESSAGING_INTERNAL_NAME: MessagingInternalComponentName =\n  'messaging-internal';\n\nexport function registerFunctions(\n  fetchImpl: typeof fetch,\n  variant?: string\n): void {\n  const factory: InstanceFactory<'functions'> = (\n    container: ComponentContainer,\n    { instanceIdentifier: regionOrCustomDomain }\n  ) => {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new FunctionsService(\n      app,\n      authProvider,\n      messagingProvider,\n      appCheckProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  };\n\n  _registerComponent(\n    new Component(\n      FUNCTIONS_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport { FUNCTIONS_TYPE } from './constants';\n\nimport { Provider } from '@firebase/component';\nimport { Functions, HttpsCallableOptions, HttpsCallable } from './public-types';\nimport {\n  FunctionsService,\n  DEFAULT_REGION,\n  connectFunctionsEmulator as _connectFunctionsEmulator,\n  httpsCallable as _httpsCallable\n} from './service';\nimport { getModularInstance } from '@firebase/util';\n\nexport * from './public-types';\n\n/**\n * Returns a {@link Functions} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param regionOrCustomDomain - one of:\n *   a) The region the callable functions are located in (ex: us-central1)\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\n * @public\n */\nexport function getFunctions(\n  app: FirebaseApp = getApp(),\n  regionOrCustomDomain: string = DEFAULT_REGION\n): Functions {\n  // Dependencies\n  const functionsProvider: Provider<'functions'> = _getProvider(\n    getModularInstance(app),\n    FUNCTIONS_TYPE\n  );\n  const functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  return functionsInstance;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @public\n */\nexport function connectFunctionsEmulator(\n  functionsInstance: Functions,\n  host: string,\n  port: number\n): void {\n  _connectFunctionsEmulator(\n    getModularInstance<FunctionsService>(functionsInstance as FunctionsService),\n    host,\n    port\n  );\n}\n\n/**\n * Returns a reference to the callable HTTPS trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nexport function httpsCallable<RequestData = unknown, ResponseData = unknown>(\n  functionsInstance: Functions,\n  name: string,\n  options?: HttpsCallableOptions\n): HttpsCallable<RequestData, ResponseData> {\n  return _httpsCallable<RequestData, ResponseData>(\n    getModularInstance<FunctionsService>(functionsInstance as FunctionsService),\n    name,\n    options\n  );\n}\n","/**\n * Cloud Functions for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerFunctions } from './config';\n\nexport * from './api';\n\nregisterFunctions(fetch.bind(self));\n"]},"metadata":{},"sourceType":"module"}