{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nvar Layer = {\n  props: {\n    pane: {\n      type: String,\n      default: 'overlayPane'\n    },\n    attribution: {\n      type: String,\n      default: null,\n      custom: true\n    },\n    name: {\n      type: String,\n      custom: true,\n      default: undefined\n    },\n    layerType: {\n      type: String,\n      custom: true,\n      default: undefined\n    },\n    visible: {\n      type: Boolean,\n      custom: true,\n      default: true\n    }\n  },\n  mounted: function mounted() {\n    this.layerOptions = {\n      attribution: this.attribution,\n      pane: this.pane\n    };\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.unbindPopup();\n    this.unbindTooltip();\n    this.parentContainer.removeLayer(this);\n  },\n  methods: {\n    setAttribution: function setAttribution(val, old) {\n      var attributionControl = this.$parent.mapObject.attributionControl;\n      attributionControl.removeAttribution(old).addAttribution(val);\n    },\n    setName: function setName() {\n      this.parentContainer.removeLayer(this);\n\n      if (this.visible) {\n        this.parentContainer.addLayer(this);\n      }\n    },\n    setLayerType: function setLayerType() {\n      this.parentContainer.removeLayer(this);\n\n      if (this.visible) {\n        this.parentContainer.addLayer(this);\n      }\n    },\n    setVisible: function setVisible(isVisible) {\n      if (this.mapObject) {\n        if (isVisible) {\n          this.parentContainer.addLayer(this);\n        } else {\n          if (this.parentContainer.hideLayer) {\n            this.parentContainer.hideLayer(this);\n          } else {\n            this.parentContainer.removeLayer(this);\n          }\n        }\n      }\n    },\n    unbindTooltip: function unbindTooltip() {\n      var tooltip = this.mapObject ? this.mapObject.getTooltip() : null;\n\n      if (tooltip) {\n        tooltip.unbindTooltip();\n      }\n    },\n    unbindPopup: function unbindPopup() {\n      var popup = this.mapObject ? this.mapObject.getPopup() : null;\n\n      if (popup) {\n        popup.unbindPopup();\n      }\n    },\n    updateVisibleProp: function updateVisibleProp(value) {\n      /**\n       * Triggers when the visible prop needs to be updated\n       * @type {boolean}\n       * @property {boolean} value - value of the visible property\n       */\n      this.$emit('update:visible', value);\n    }\n  }\n};\nvar GridLayer = {\n  mixins: [Layer],\n  props: {\n    pane: {\n      type: String,\n      default: 'tilePane'\n    },\n    opacity: {\n      type: Number,\n      custom: false,\n      default: 1.0\n    },\n    zIndex: {\n      type: Number,\n      default: 1\n    },\n    tileSize: {\n      type: Number,\n      default: 256\n    },\n    noWrap: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mounted: function mounted() {\n    this.gridLayerOptions = Object.assign({}, this.layerOptions, {\n      pane: this.pane,\n      opacity: this.opacity,\n      zIndex: this.zIndex,\n      tileSize: this.tileSize,\n      noWrap: this.noWrap\n    });\n  }\n};\nvar TileLayer = {\n  mixins: [GridLayer],\n  props: {\n    tms: {\n      type: Boolean,\n      default: false\n    },\n    subdomains: {\n      type: [String, Array],\n      default: 'abc',\n      validator: function validator(prop) {\n        if (typeof prop === 'string') {\n          return true;\n        } // Validates array that array only contains only strings\n\n\n        if (Array.isArray(prop)) {\n          return prop.every(function (subdomain) {\n            return typeof subdomain === 'string';\n          });\n        }\n\n        return false;\n      }\n    },\n    detectRetina: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mounted: function mounted() {\n    this.tileLayerOptions = Object.assign({}, this.gridLayerOptions, {\n      tms: this.tms,\n      subdomains: this.subdomains,\n      detectRetina: this.detectRetina\n    });\n  },\n  render: function render() {\n    return null;\n  }\n};\nexport default TileLayer;","map":{"version":3,"sources":["C:/Users/Krystian/Desktop/projekt/ecommercevuefirestore/ecommercevuefirestore/node_modules/vue2-leaflet/dist/mixins/TileLayer.js"],"names":["Layer","props","pane","type","String","default","attribution","custom","name","undefined","layerType","visible","Boolean","mounted","layerOptions","beforeDestroy","unbindPopup","unbindTooltip","parentContainer","removeLayer","methods","setAttribution","val","old","attributionControl","$parent","mapObject","removeAttribution","addAttribution","setName","addLayer","setLayerType","setVisible","isVisible","hideLayer","tooltip","getTooltip","popup","getPopup","updateVisibleProp","value","$emit","GridLayer","mixins","opacity","Number","zIndex","tileSize","noWrap","gridLayerOptions","Object","assign","TileLayer","tms","subdomains","Array","validator","prop","isArray","every","subdomain","detectRetina","tileLayerOptions","render"],"mappings":"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","sourcesContent":["var Layer = {\n  props: {\n    pane: {\n      type: String,\n      default: 'overlayPane',\n    },\n    attribution: {\n      type: String,\n      default: null,\n      custom: true,\n    },\n    name: {\n      type: String,\n      custom: true,\n      default: undefined,\n    },\n    layerType: {\n      type: String,\n      custom: true,\n      default: undefined,\n    },\n    visible: {\n      type: Boolean,\n      custom: true,\n      default: true,\n    },\n  },\n  mounted: function mounted() {\n    this.layerOptions = {\n      attribution: this.attribution,\n      pane: this.pane,\n    };\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.unbindPopup();\n    this.unbindTooltip();\n    this.parentContainer.removeLayer(this);\n  },\n  methods: {\n    setAttribution: function setAttribution(val, old) {\n      var attributionControl = this.$parent.mapObject.attributionControl;\n      attributionControl.removeAttribution(old).addAttribution(val);\n    },\n    setName: function setName() {\n      this.parentContainer.removeLayer(this);\n      if (this.visible) {\n        this.parentContainer.addLayer(this);\n      }\n    },\n    setLayerType: function setLayerType() {\n      this.parentContainer.removeLayer(this);\n      if (this.visible) {\n        this.parentContainer.addLayer(this);\n      }\n    },\n    setVisible: function setVisible(isVisible) {\n      if (this.mapObject) {\n        if (isVisible) {\n          this.parentContainer.addLayer(this);\n        } else {\n          if (this.parentContainer.hideLayer) {\n            this.parentContainer.hideLayer(this);\n          } else {\n            this.parentContainer.removeLayer(this);\n          }\n        }\n      }\n    },\n    unbindTooltip: function unbindTooltip() {\n      var tooltip = this.mapObject ? this.mapObject.getTooltip() : null;\n      if (tooltip) {\n        tooltip.unbindTooltip();\n      }\n    },\n    unbindPopup: function unbindPopup() {\n      var popup = this.mapObject ? this.mapObject.getPopup() : null;\n      if (popup) {\n        popup.unbindPopup();\n      }\n    },\n    updateVisibleProp: function updateVisibleProp(value) {\n      /**\n       * Triggers when the visible prop needs to be updated\n       * @type {boolean}\n       * @property {boolean} value - value of the visible property\n       */\n      this.$emit('update:visible', value);\n    },\n  },\n};\n\nvar GridLayer = {\n  mixins: [Layer],\n  props: {\n    pane: {\n      type: String,\n      default: 'tilePane'\n    },\n    opacity: {\n      type: Number,\n      custom: false,\n      default: 1.0\n    },\n    zIndex: {\n      type: Number,\n      default: 1\n    },\n    tileSize: {\n      type: Number,\n      default: 256\n    },\n    noWrap: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mounted: function mounted () {\n    this.gridLayerOptions = Object.assign({}, this.layerOptions,\n      {pane: this.pane,\n      opacity: this.opacity,\n      zIndex: this.zIndex,\n      tileSize: this.tileSize,\n      noWrap: this.noWrap});\n  }\n};\n\nvar TileLayer = {\n  mixins: [GridLayer],\n  props: {\n    tms: {\n      type: Boolean,\n      default: false,\n    },\n    subdomains: {\n      type: [String, Array],\n      default: 'abc',\n      validator: function (prop) {\n        if (typeof prop === 'string') { return true; }\n        // Validates array that array only contains only strings\n        if (Array.isArray(prop)) {\n          return prop.every(function (subdomain) { return typeof subdomain === 'string'; });\n        }\n        return false;\n      },\n    },\n    detectRetina: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  mounted: function mounted() {\n    this.tileLayerOptions = Object.assign({}, this.gridLayerOptions,\n      {tms: this.tms,\n      subdomains: this.subdomains,\n      detectRetina: this.detectRetina});\n  },\n  render: function render() {\n    return null;\n  },\n};\n\nexport default TileLayer;\n"]},"metadata":{},"sourceType":"module"}