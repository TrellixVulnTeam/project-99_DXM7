{"ast":null,"code":"import { isFunction } from '../../../utils/inspect';\nimport { BTr } from '../tr';\nimport { BTd } from '../td';\nvar busySlotName = 'table-busy';\nexport default {\n  props: {\n    busy: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      localBusy: false\n    };\n  },\n  computed: {\n    computedBusy: function computedBusy() {\n      return this.busy || this.localBusy;\n    }\n  },\n  watch: {\n    localBusy: function localBusy(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$emit('update:busy', newVal);\n      }\n    }\n  },\n  methods: {\n    // Event handler helper\n    stopIfBusy: function stopIfBusy(evt) {\n      if (this.computedBusy) {\n        // If table is busy (via provider) then don't propagate\n        evt.preventDefault();\n        evt.stopPropagation();\n        return true;\n      }\n\n      return false;\n    },\n    // Render the busy indicator or return `null` if not busy\n    renderBusy: function renderBusy() {\n      var h = this.$createElement; // Return a busy indicator row, or `null` if not busy\n\n      if (this.computedBusy && this.hasNormalizedSlot(busySlotName)) {\n        // Show the busy slot\n        return h(BTr, {\n          key: 'table-busy-slot',\n          staticClass: 'b-table-busy-slot',\n          class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, busySlotName) : this.tbodyTrClass]\n        }, [h(BTd, {\n          props: {\n            colspan: this.computedFields.length || null\n          }\n        }, [this.normalizeSlot(busySlotName)])]);\n      } else {\n        // We return `null` here so that we can determine if we need to\n        // render the table items rows or not\n        return null;\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Krystian/Desktop/TO3/ecommercevuefirestore/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-busy.js"],"names":["isFunction","BTr","BTd","busySlotName","props","busy","type","Boolean","default","data","localBusy","computed","computedBusy","watch","newVal","oldVal","$emit","methods","stopIfBusy","evt","preventDefault","stopPropagation","renderBusy","h","$createElement","hasNormalizedSlot","key","staticClass","class","tbodyTrClass","colspan","computedFields","length","normalizeSlot"],"mappings":"AAAA,SAASA,UAAT,QAA2B,wBAA3B;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,IAAIC,YAAY,GAAG,YAAnB;AACA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAEC,OADF;AAEJC,MAAAA,OAAO,EAAE;AAFL;AADD,GADM;AAObC,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,WAAO;AACLC,MAAAA,SAAS,EAAE;AADN,KAAP;AAGD,GAXY;AAYbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,SAASA,YAAT,GAAwB;AACpC,aAAO,KAAKP,IAAL,IAAa,KAAKK,SAAzB;AACD;AAHO,GAZG;AAiBbG,EAAAA,KAAK,EAAE;AACLH,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBI,MAAnB,EAA2BC,MAA3B,EAAmC;AAC5C,UAAID,MAAM,KAAKC,MAAf,EAAuB;AACrB,aAAKC,KAAL,CAAW,aAAX,EAA0BF,MAA1B;AACD;AACF;AALI,GAjBM;AAwBbG,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,GAApB,EAAyB;AACnC,UAAI,KAAKP,YAAT,EAAuB;AACrB;AACAO,QAAAA,GAAG,CAACC,cAAJ;AACAD,QAAAA,GAAG,CAACE,eAAJ;AACA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD,KAXM;AAYP;AACAC,IAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,UAAIC,CAAC,GAAG,KAAKC,cAAb,CADgC,CACH;;AAE7B,UAAI,KAAKZ,YAAL,IAAqB,KAAKa,iBAAL,CAAuBtB,YAAvB,CAAzB,EAA+D;AAC7D;AACA,eAAOoB,CAAC,CAACtB,GAAD,EAAM;AACZyB,UAAAA,GAAG,EAAE,iBADO;AAEZC,UAAAA,WAAW,EAAE,mBAFD;AAGZC,UAAAA,KAAK,EAAE,CAAC5B,UAAU,CAAC,KAAK6B,YAAN,CAAV,GAAgC,KAAKA,YAAL,CAAkB,IAAlB,EAAwB1B,YAAxB,CAAhC,GAAwE,KAAK0B,YAA9E;AAHK,SAAN,EAIL,CAACN,CAAC,CAACrB,GAAD,EAAM;AACTE,UAAAA,KAAK,EAAE;AACL0B,YAAAA,OAAO,EAAE,KAAKC,cAAL,CAAoBC,MAApB,IAA8B;AADlC;AADE,SAAN,EAIF,CAAC,KAAKC,aAAL,CAAmB9B,YAAnB,CAAD,CAJE,CAAF,CAJK,CAAR;AASD,OAXD,MAWO;AACL;AACA;AACA,eAAO,IAAP;AACD;AACF;AAhCM;AAxBI,CAAf","sourcesContent":["import { isFunction } from '../../../utils/inspect';\nimport { BTr } from '../tr';\nimport { BTd } from '../td';\nvar busySlotName = 'table-busy';\nexport default {\n  props: {\n    busy: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      localBusy: false\n    };\n  },\n  computed: {\n    computedBusy: function computedBusy() {\n      return this.busy || this.localBusy;\n    }\n  },\n  watch: {\n    localBusy: function localBusy(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$emit('update:busy', newVal);\n      }\n    }\n  },\n  methods: {\n    // Event handler helper\n    stopIfBusy: function stopIfBusy(evt) {\n      if (this.computedBusy) {\n        // If table is busy (via provider) then don't propagate\n        evt.preventDefault();\n        evt.stopPropagation();\n        return true;\n      }\n\n      return false;\n    },\n    // Render the busy indicator or return `null` if not busy\n    renderBusy: function renderBusy() {\n      var h = this.$createElement; // Return a busy indicator row, or `null` if not busy\n\n      if (this.computedBusy && this.hasNormalizedSlot(busySlotName)) {\n        // Show the busy slot\n        return h(BTr, {\n          key: 'table-busy-slot',\n          staticClass: 'b-table-busy-slot',\n          class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, busySlotName) : this.tbodyTrClass]\n        }, [h(BTd, {\n          props: {\n            colspan: this.computedFields.length || null\n          }\n        }, [this.normalizeSlot(busySlotName)])]);\n      } else {\n        // We return `null` here so that we can determine if we need to\n        // render the table items rows or not\n        return null;\n      }\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}