{"ast":null,"code":"import { setAttr, removeAttr } from '../../utils/dom';\nimport { bindTargets, unbindTargets } from '../../utils/target'; // Target listen types\n\nvar listenTypes = {\n  click: true // Emitted show event for modal\n\n};\nvar EVENT_SHOW = 'bv::show::modal';\n\nvar setRole = function setRole(el, binding, vnode) {\n  if (el.tagName !== 'BUTTON') {\n    setAttr(el, 'role', 'button');\n  }\n};\n/*\n * Export our directive\n */\n\n\nexport var VBModal = {\n  // eslint-disable-next-line no-shadow-restricted-names\n  bind: function bind(el, binding, vnode) {\n    bindTargets(vnode, binding, listenTypes, function (_ref) {\n      var targets = _ref.targets,\n          vnode = _ref.vnode;\n      targets.forEach(function (target) {\n        vnode.context.$root.$emit(EVENT_SHOW, target, vnode.elm);\n      });\n    }); // If element is not a button, we add `role=\"button\"` for accessibility\n\n    setRole(el, binding, vnode);\n  },\n  updated: setRole,\n  componentUpdated: setRole,\n  unbind: function unbind(el, binding, vnode) {\n    unbindTargets(vnode, binding, listenTypes); // If element is not a button, we add `role=\"button\"` for accessibility\n\n    if (el.tagName !== 'BUTTON') {\n      removeAttr(el, 'role', 'button');\n    }\n  }\n};\nexport default VBModal;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/directives/modal/modal.js"],"names":["setAttr","removeAttr","bindTargets","unbindTargets","listenTypes","click","EVENT_SHOW","setRole","el","binding","vnode","tagName","VBModal","bind","_ref","targets","forEach","target","context","$root","$emit","elm","updated","componentUpdated","unbind"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,oBAA3C,C,CAAiE;;AAEjE,IAAIC,WAAW,GAAG;AAChBC,EAAAA,KAAK,EAAE,IADS,CACJ;;AADI,CAAlB;AAIA,IAAIC,UAAU,GAAG,iBAAjB;;AAEA,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,EAAjB,EAAqBC,OAArB,EAA8BC,KAA9B,EAAqC;AACjD,MAAIF,EAAE,CAACG,OAAH,KAAe,QAAnB,EAA6B;AAC3BX,IAAAA,OAAO,CAACQ,EAAD,EAAK,MAAL,EAAa,QAAb,CAAP;AACD;AACF,CAJD;AAKA;AACA;AACA;;;AAGA,OAAO,IAAII,OAAO,GAAG;AACnB;AACAC,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcL,EAAd,EAAkBC,OAAlB,EAA2BC,KAA3B,EAAkC;AACtCR,IAAAA,WAAW,CAACQ,KAAD,EAAQD,OAAR,EAAiBL,WAAjB,EAA8B,UAAUU,IAAV,EAAgB;AACvD,UAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AAAA,UACIL,KAAK,GAAGI,IAAI,CAACJ,KADjB;AAEAK,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChCP,QAAAA,KAAK,CAACQ,OAAN,CAAcC,KAAd,CAAoBC,KAApB,CAA0Bd,UAA1B,EAAsCW,MAAtC,EAA8CP,KAAK,CAACW,GAApD;AACD,OAFD;AAGD,KANU,CAAX,CADsC,CAOlC;;AAEJd,IAAAA,OAAO,CAACC,EAAD,EAAKC,OAAL,EAAcC,KAAd,CAAP;AACD,GAZkB;AAanBY,EAAAA,OAAO,EAAEf,OAbU;AAcnBgB,EAAAA,gBAAgB,EAAEhB,OAdC;AAenBiB,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBhB,EAAhB,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoC;AAC1CP,IAAAA,aAAa,CAACO,KAAD,EAAQD,OAAR,EAAiBL,WAAjB,CAAb,CAD0C,CACE;;AAE5C,QAAII,EAAE,CAACG,OAAH,KAAe,QAAnB,EAA6B;AAC3BV,MAAAA,UAAU,CAACO,EAAD,EAAK,MAAL,EAAa,QAAb,CAAV;AACD;AACF;AArBkB,CAAd;AAuBP,eAAeI,OAAf","sourcesContent":["import { setAttr, removeAttr } from '../../utils/dom';\nimport { bindTargets, unbindTargets } from '../../utils/target'; // Target listen types\n\nvar listenTypes = {\n  click: true // Emitted show event for modal\n\n};\nvar EVENT_SHOW = 'bv::show::modal';\n\nvar setRole = function setRole(el, binding, vnode) {\n  if (el.tagName !== 'BUTTON') {\n    setAttr(el, 'role', 'button');\n  }\n};\n/*\n * Export our directive\n */\n\n\nexport var VBModal = {\n  // eslint-disable-next-line no-shadow-restricted-names\n  bind: function bind(el, binding, vnode) {\n    bindTargets(vnode, binding, listenTypes, function (_ref) {\n      var targets = _ref.targets,\n          vnode = _ref.vnode;\n      targets.forEach(function (target) {\n        vnode.context.$root.$emit(EVENT_SHOW, target, vnode.elm);\n      });\n    }); // If element is not a button, we add `role=\"button\"` for accessibility\n\n    setRole(el, binding, vnode);\n  },\n  updated: setRole,\n  componentUpdated: setRole,\n  unbind: function unbind(el, binding, vnode) {\n    unbindTargets(vnode, binding, listenTypes); // If element is not a button, we add `role=\"button\"` for accessibility\n\n    if (el.tagName !== 'BUTTON') {\n      removeAttr(el, 'role', 'button');\n    }\n  }\n};\nexport default VBModal;"]},"metadata":{},"sourceType":"module"}