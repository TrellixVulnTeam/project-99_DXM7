{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport Vue from '../../utils/vue';\nimport { getComponentConfig } from '../../utils/config';\nimport { isVisible } from '../../utils/dom';\nimport paginationMixin from '../../mixins/pagination';\nvar NAME = 'BPagination';\nvar DEFAULT_PER_PAGE = 20;\nvar DEFAULT_TOTAL_ROWS = 0; // Sanitize the provided per page number (converting to a number)\n\nvar sanitizePerPage = function sanitizePerPage(val) {\n  var perPage = parseInt(val, 10) || DEFAULT_PER_PAGE;\n  return perPage < 1 ? 1 : perPage;\n}; // Sanitize the provided total rows number (converting to a number)\n\n\nvar sanitizeTotalRows = function sanitizeTotalRows(val) {\n  var totalRows = parseInt(val, 10) || DEFAULT_TOTAL_ROWS;\n  return totalRows < 0 ? 0 : totalRows;\n};\n\nvar props = {\n  size: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(NAME, 'size');\n    }\n  },\n  perPage: {\n    type: [Number, String],\n    default: DEFAULT_PER_PAGE\n  },\n  totalRows: {\n    type: [Number, String],\n    default: DEFAULT_TOTAL_ROWS\n  },\n  ariaControls: {\n    type: String,\n    default: null\n  } // The render function is brought in via the pagination mixin\n  // @vue/component\n\n};\nexport var BPagination = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  mixins: [paginationMixin],\n  props: props,\n  computed: {\n    numberOfPages: function numberOfPages() {\n      var result = Math.ceil(sanitizeTotalRows(this.totalRows) / sanitizePerPage(this.perPage));\n      return result < 1 ? 1 : result;\n    }\n  },\n  watch: {\n    numberOfPages: function numberOfPages(newVal) {\n      if (newVal === this.localNumberOfPages) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.localNumberOfPages = newVal;\n      this.currentPage = 1;\n    }\n  },\n  created: function created() {\n    var _this = this; // Set the initial page count\n\n\n    this.localNumberOfPages = this.numberOfPages; // Set the initial page value\n\n    var currentPage = parseInt(this.value, 10) || 0;\n\n    if (currentPage > 0) {\n      this.currentPage = currentPage;\n    } else {\n      this.$nextTick(function () {\n        // If this value parses to NaN or a value less than 1\n        // Trigger an initial emit of 'null' if no page specified\n        _this.currentPage = 0;\n      });\n    }\n  },\n  mounted: function mounted() {\n    // Set the initial page count\n    this.localNumberOfPages = this.numberOfPages;\n  },\n  methods: {\n    // These methods are used by the render function\n    onClick: function onClick(num, evt) {\n      var _this2 = this; // Handle edge cases where number of pages has changed (i.e. if perPage changes)\n      // This should normally not happen, but just in case.\n\n\n      if (num > this.numberOfPages) {\n        /* istanbul ignore next */\n        num = this.numberOfPages;\n      } else if (num < 1) {\n        /* istanbul ignore next */\n        num = 1;\n      } // Update the v-model\n\n\n      this.currentPage = num; // Emit event triggered by user interaction\n\n      this.$emit('change', this.currentPage);\n      this.$nextTick(function () {\n        // Keep the current button focused if possible\n        var target = evt.target;\n\n        if (isVisible(target) && _this2.$el.contains(target) && target.focus) {\n          target.focus();\n        } else {\n          _this2.focusCurrent();\n        }\n      });\n    },\n    makePage: function makePage(pageNum) {\n      return pageNum;\n    },\n    linkProps: function linkProps(pageNum) {\n      // Always '#' for pagination component\n      return {\n        href: '#'\n      };\n    }\n  }\n});\nexport default BPagination;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/components/pagination/pagination.js"],"names":["Vue","getComponentConfig","isVisible","paginationMixin","NAME","DEFAULT_PER_PAGE","DEFAULT_TOTAL_ROWS","sanitizePerPage","val","perPage","parseInt","sanitizeTotalRows","totalRows","props","size","type","String","default","_default","Number","ariaControls","BPagination","extend","name","mixins","computed","numberOfPages","result","Math","ceil","watch","newVal","localNumberOfPages","currentPage","created","_this","value","$nextTick","mounted","methods","onClick","num","evt","_this2","$emit","target","$el","contains","focus","focusCurrent","makePage","pageNum","linkProps","href"],"mappings":"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","sourcesContent":["import Vue from '../../utils/vue';\nimport { getComponentConfig } from '../../utils/config';\nimport { isVisible } from '../../utils/dom';\nimport paginationMixin from '../../mixins/pagination';\nvar NAME = 'BPagination';\nvar DEFAULT_PER_PAGE = 20;\nvar DEFAULT_TOTAL_ROWS = 0; // Sanitize the provided per page number (converting to a number)\n\nvar sanitizePerPage = function sanitizePerPage(val) {\n  var perPage = parseInt(val, 10) || DEFAULT_PER_PAGE;\n  return perPage < 1 ? 1 : perPage;\n}; // Sanitize the provided total rows number (converting to a number)\n\n\nvar sanitizeTotalRows = function sanitizeTotalRows(val) {\n  var totalRows = parseInt(val, 10) || DEFAULT_TOTAL_ROWS;\n  return totalRows < 0 ? 0 : totalRows;\n};\n\nvar props = {\n  size: {\n    type: String,\n    default: function _default() {\n      return getComponentConfig(NAME, 'size');\n    }\n  },\n  perPage: {\n    type: [Number, String],\n    default: DEFAULT_PER_PAGE\n  },\n  totalRows: {\n    type: [Number, String],\n    default: DEFAULT_TOTAL_ROWS\n  },\n  ariaControls: {\n    type: String,\n    default: null\n  } // The render function is brought in via the pagination mixin\n  // @vue/component\n\n};\nexport var BPagination =\n/*#__PURE__*/\nVue.extend({\n  name: NAME,\n  mixins: [paginationMixin],\n  props: props,\n  computed: {\n    numberOfPages: function numberOfPages() {\n      var result = Math.ceil(sanitizeTotalRows(this.totalRows) / sanitizePerPage(this.perPage));\n      return result < 1 ? 1 : result;\n    }\n  },\n  watch: {\n    numberOfPages: function numberOfPages(newVal) {\n      if (newVal === this.localNumberOfPages) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.localNumberOfPages = newVal;\n      this.currentPage = 1;\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    // Set the initial page count\n    this.localNumberOfPages = this.numberOfPages; // Set the initial page value\n\n    var currentPage = parseInt(this.value, 10) || 0;\n\n    if (currentPage > 0) {\n      this.currentPage = currentPage;\n    } else {\n      this.$nextTick(function () {\n        // If this value parses to NaN or a value less than 1\n        // Trigger an initial emit of 'null' if no page specified\n        _this.currentPage = 0;\n      });\n    }\n  },\n  mounted: function mounted() {\n    // Set the initial page count\n    this.localNumberOfPages = this.numberOfPages;\n  },\n  methods: {\n    // These methods are used by the render function\n    onClick: function onClick(num, evt) {\n      var _this2 = this;\n\n      // Handle edge cases where number of pages has changed (i.e. if perPage changes)\n      // This should normally not happen, but just in case.\n      if (num > this.numberOfPages) {\n        /* istanbul ignore next */\n        num = this.numberOfPages;\n      } else if (num < 1) {\n        /* istanbul ignore next */\n        num = 1;\n      } // Update the v-model\n\n\n      this.currentPage = num; // Emit event triggered by user interaction\n\n      this.$emit('change', this.currentPage);\n      this.$nextTick(function () {\n        // Keep the current button focused if possible\n        var target = evt.target;\n\n        if (isVisible(target) && _this2.$el.contains(target) && target.focus) {\n          target.focus();\n        } else {\n          _this2.focusCurrent();\n        }\n      });\n    },\n    makePage: function makePage(pageNum) {\n      return pageNum;\n    },\n    linkProps: function linkProps(pageNum) {\n      // Always '#' for pagination component\n      return {\n        href: '#'\n      };\n    }\n  }\n});\nexport default BPagination;"]},"metadata":{},"sourceType":"module"}