{"ast":null,"code":"import { hasNormalizedSlot as _hasNormalizedSlot, normalizeSlot as _normalizeSlot } from '../utils/normalize-slot';\nimport { concat } from '../utils/array';\nexport default {\n  methods: {\n    hasNormalizedSlot: function hasNormalizedSlot(names) {\n      // Returns true if the either a $scopedSlot or $slot exists with the specified name\n      // `names` can be a string name or an array of names\n      return _hasNormalizedSlot(names, this.$scopedSlots, this.$slots);\n    },\n    normalizeSlot: function normalizeSlot(names) {\n      var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // Returns an array of rendered vNodes if slot found.\n      // Returns undefined if not found.\n      // `names` can be a string name or an array of names\n\n      var vNodes = _normalizeSlot(names, scope, this.$scopedSlots, this.$slots);\n\n      return vNodes ? concat(vNodes) : vNodes;\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Krystian/Desktop/TO3/ecommercevuefirestore/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"],"names":["hasNormalizedSlot","_hasNormalizedSlot","normalizeSlot","_normalizeSlot","concat","methods","names","$scopedSlots","$slots","scope","arguments","length","undefined","vNodes"],"mappings":"AAAA,SAASA,iBAAiB,IAAIC,kBAA9B,EAAkDC,aAAa,IAAIC,cAAnE,QAAyF,yBAAzF;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,eAAe;AACbC,EAAAA,OAAO,EAAE;AACPL,IAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BM,KAA3B,EAAkC;AACnD;AACA;AACA,aAAOL,kBAAkB,CAACK,KAAD,EAAQ,KAAKC,YAAb,EAA2B,KAAKC,MAAhC,CAAzB;AACD,KALM;AAMPN,IAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBI,KAAvB,EAA8B;AAC3C,UAAIG,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF,CAD2C,CAG3C;AACA;AACA;;AACA,UAAIG,MAAM,GAAGV,cAAc,CAACG,KAAD,EAAQG,KAAR,EAAe,KAAKF,YAApB,EAAkC,KAAKC,MAAvC,CAA3B;;AAEA,aAAOK,MAAM,GAAGT,MAAM,CAACS,MAAD,CAAT,GAAoBA,MAAjC;AACD;AAfM;AADI,CAAf","sourcesContent":["import { hasNormalizedSlot as _hasNormalizedSlot, normalizeSlot as _normalizeSlot } from '../utils/normalize-slot';\nimport { concat } from '../utils/array';\nexport default {\n  methods: {\n    hasNormalizedSlot: function hasNormalizedSlot(names) {\n      // Returns true if the either a $scopedSlot or $slot exists with the specified name\n      // `names` can be a string name or an array of names\n      return _hasNormalizedSlot(names, this.$scopedSlots, this.$slots);\n    },\n    normalizeSlot: function normalizeSlot(names) {\n      var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // Returns an array of rendered vNodes if slot found.\n      // Returns undefined if not found.\n      // `names` can be a string name or an array of names\n      var vNodes = _normalizeSlot(names, scope, this.$scopedSlots, this.$slots);\n\n      return vNodes ? concat(vNodes) : vNodes;\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}