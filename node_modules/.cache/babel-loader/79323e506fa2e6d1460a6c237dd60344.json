{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport looseEqual from '../../../utils/loose-equal';\nimport range from '../../../utils/range';\nimport { isArray, arrayIncludes } from '../../../utils/array';\nimport { getComponentConfig } from '../../../utils/config';\nimport { isNumber } from '../../../utils/inspect';\nimport sanitizeRow from './sanitize-row';\nexport default {\n  props: {\n    selectable: {\n      type: Boolean,\n      default: false\n    },\n    selectMode: {\n      type: String,\n      default: 'multi',\n      validator: function validator(val) {\n        return arrayIncludes(['range', 'multi', 'single'], val);\n      }\n    },\n    selectedVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig('BTable', 'selectedVariant');\n      }\n    }\n  },\n  data: function data() {\n    return {\n      selectedRows: [],\n      selectedLastRow: -1\n    };\n  },\n  computed: {\n    isSelectable: function isSelectable() {\n      return this.selectable && this.selectMode;\n    },\n    selectableHasSelection: function selectableHasSelection() {\n      return this.isSelectable && this.selectedRows && this.selectedRows.length > 0 && this.selectedRows.some(Boolean);\n    },\n    selectableIsMultiSelect: function selectableIsMultiSelect() {\n      return this.isSelectable && arrayIncludes(['range', 'multi'], this.selectMode);\n    },\n    selectableTableClasses: function selectableTableClasses() {\n      var _ref;\n\n      return _ref = {\n        'b-table-selectable': this.isSelectable\n      }, _defineProperty(_ref, \"b-table-select-\".concat(this.selectMode), this.isSelectable), _defineProperty(_ref, 'b-table-selecting', this.selectableHasSelection), _ref;\n    },\n    selectableTableAttrs: function selectableTableAttrs() {\n      return {\n        'aria-multiselectable': !this.isSelectable ? null : this.selectableIsMultiSelect ? 'true' : 'false'\n      };\n    }\n  },\n  watch: {\n    computedItems: function computedItems(newVal, oldVal) {\n      // Reset for selectable\n      var equal = false;\n\n      if (this.isSelectable && this.selectedRows.length > 0) {\n        // Quick check against array length\n        equal = isArray(newVal) && isArray(oldVal) && newVal.length === oldVal.length;\n\n        for (var i = 0; equal && i < newVal.length; i++) {\n          // Look for the first non-loosely equal row, after ignoring reserved fields\n          equal = looseEqual(sanitizeRow(newVal[i]), sanitizeRow(oldVal[i]));\n        }\n      }\n\n      if (!equal) {\n        this.clearSelected();\n      }\n    },\n    selectable: function selectable(newVal, oldVal) {\n      this.clearSelected();\n      this.setSelectionHandlers(newVal);\n    },\n    selectMode: function selectMode(newVal, oldVal) {\n      this.clearSelected();\n    },\n    selectedRows: function selectedRows(_selectedRows, oldVal) {\n      var _this = this;\n\n      if (this.isSelectable && !looseEqual(_selectedRows, oldVal)) {\n        var items = []; // `.forEach()` skips over non-existent indices (on sparse arrays)\n\n        _selectedRows.forEach(function (v, idx) {\n          if (v) {\n            items.push(_this.computedItems[idx]);\n          }\n        });\n\n        this.$emit('row-selected', items);\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Set up handlers\n    if (this.isSelectable) {\n      this.setSelectionHandlers(true);\n    }\n  },\n  methods: {\n    // Public methods\n    selectRow: function selectRow(index) {\n      // Select a particular row (indexed based on computedItems)\n      if (this.isSelectable && isNumber(index) && index >= 0 && index < this.computedItems.length && !this.isRowSelected(index)) {\n        var selectedRows = this.selectableIsMultiSelect ? this.selectedRows.slice() : [];\n        selectedRows[index] = true;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    unselectRow: function unselectRow(index) {\n      // Un-select a particular row (indexed based on `computedItems`)\n      if (this.isSelectable && isNumber(index) && this.isRowSelected(index)) {\n        var selectedRows = this.selectedRows.slice();\n        selectedRows[index] = false;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    selectAllRows: function selectAllRows() {\n      var length = this.computedItems.length;\n\n      if (this.isSelectable && length > 0) {\n        this.selectedLastClicked = -1;\n        this.selectedRows = this.selectableIsMultiSelect ? range(length).map(function (i) {\n          return true;\n        }) : [true];\n      }\n    },\n    isRowSelected: function isRowSelected(index) {\n      // Determine if a row is selected (indexed based on `computedItems`)\n      return Boolean(isNumber(index) && this.selectedRows[index]);\n    },\n    clearSelected: function clearSelected() {\n      // Clear any active selected row(s)\n      this.selectedLastClicked = -1;\n      this.selectedRows = [];\n    },\n    // Internal private methods\n    selectableRowClasses: function selectableRowClasses(index) {\n      if (this.isSelectable && this.isRowSelected(index)) {\n        var variant = this.selectedVariant;\n        return _defineProperty({\n          'b-table-row-selected': true\n        }, \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(variant), variant);\n      } else {\n        return {};\n      }\n    },\n    selectableRowAttrs: function selectableRowAttrs(index) {\n      return {\n        'aria-selected': !this.isSelectable ? null : this.isRowSelected(index) ? 'true' : 'false'\n      };\n    },\n    setSelectionHandlers: function setSelectionHandlers(on) {\n      var method = on ? '$on' : '$off'; // Handle row-clicked event\n\n      this[method]('row-clicked', this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n      this[method]('filtered', this.clearSelected);\n      this[method]('context-changed', this.clearSelected);\n    },\n    selectionHandler: function selectionHandler(item, index, evt) {\n      /* istanbul ignore if: should never happen */\n      if (!this.isSelectable) {\n        // Don't do anything if table is not in selectable mode\n\n        /* istanbul ignore next: should never happen */\n        this.clearSelected();\n        /* istanbul ignore next: should never happen */\n\n        return;\n      }\n\n      var selectMode = this.selectMode;\n      var selectedRows = this.selectedRows.slice();\n      var selected = !selectedRows[index]; // Note 'multi' mode needs no special event handling\n\n      if (selectMode === 'single') {\n        selectedRows = [];\n      } else if (selectMode === 'range') {\n        if (this.selectedLastRow > -1 && evt.shiftKey) {\n          // range\n          for (var idx = Math.min(this.selectedLastRow, index); idx <= Math.max(this.selectedLastRow, index); idx++) {\n            selectedRows[idx] = true;\n          }\n\n          selected = true;\n        } else {\n          if (!(evt.ctrlKey || evt.metaKey)) {\n            // Clear range selection if any\n            selectedRows = [];\n            selected = true;\n          }\n\n          this.selectedLastRow = selected ? index : -1;\n        }\n      }\n\n      selectedRows[index] = selected;\n      this.selectedRows = selectedRows;\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Krystian/Desktop/ecommercevuefirestore/ecommercevuefirestore/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-selectable.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","looseEqual","range","isArray","arrayIncludes","getComponentConfig","isNumber","sanitizeRow","props","selectable","type","Boolean","default","selectMode","String","validator","val","selectedVariant","_default","data","selectedRows","selectedLastRow","computed","isSelectable","selectableHasSelection","length","some","selectableIsMultiSelect","selectableTableClasses","_ref","concat","selectableTableAttrs","watch","computedItems","newVal","oldVal","equal","i","clearSelected","setSelectionHandlers","_selectedRows","_this","items","forEach","v","idx","push","$emit","beforeMount","methods","selectRow","index","isRowSelected","slice","selectedLastClicked","unselectRow","selectAllRows","map","selectableRowClasses","variant","dark","selectableRowAttrs","on","method","selectionHandler","item","evt","selected","shiftKey","Math","min","max","ctrlKey","metaKey"],"mappings":";;;;;;AAAA,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;AAAE,MAAID,GAAG,IAAID,GAAX,EAAgB;AAAEG,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;AAAEC,MAAAA,KAAK,EAAEA,KAAT;AAAgBG,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEP,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AAAmB;;AAAC,SAAOF,GAAP;AAAa;;AAEjN,OAAOQ,UAAP,MAAuB,4BAAvB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,sBAAvC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAEC,OADI;AAEVC,MAAAA,OAAO,EAAE;AAFC,KADP;AAKLC,IAAAA,UAAU,EAAE;AACVH,MAAAA,IAAI,EAAEI,MADI;AAEVF,MAAAA,OAAO,EAAE,OAFC;AAGVG,MAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACjC,eAAOZ,aAAa,CAAC,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,CAAD,EAA+BY,GAA/B,CAApB;AACD;AALS,KALP;AAYLC,IAAAA,eAAe,EAAE;AACfP,MAAAA,IAAI,EAAEI,MADS;AAEfF,MAAAA,OAAO,EAAE,SAASM,QAAT,GAAoB;AAC3B,eAAOb,kBAAkB,CAAC,QAAD,EAAW,iBAAX,CAAzB;AACD;AAJc;AAZZ,GADM;AAoBbc,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,WAAO;AACLC,MAAAA,YAAY,EAAE,EADT;AAELC,MAAAA,eAAe,EAAE,CAAC;AAFb,KAAP;AAID,GAzBY;AA0BbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,SAASA,YAAT,GAAwB;AACpC,aAAO,KAAKd,UAAL,IAAmB,KAAKI,UAA/B;AACD,KAHO;AAIRW,IAAAA,sBAAsB,EAAE,SAASA,sBAAT,GAAkC;AACxD,aAAO,KAAKD,YAAL,IAAqB,KAAKH,YAA1B,IAA0C,KAAKA,YAAL,CAAkBK,MAAlB,GAA2B,CAArE,IAA0E,KAAKL,YAAL,CAAkBM,IAAlB,CAAuBf,OAAvB,CAAjF;AACD,KANO;AAORgB,IAAAA,uBAAuB,EAAE,SAASA,uBAAT,GAAmC;AAC1D,aAAO,KAAKJ,YAAL,IAAqBnB,aAAa,CAAC,CAAC,OAAD,EAAU,OAAV,CAAD,EAAqB,KAAKS,UAA1B,CAAzC;AACD,KATO;AAURe,IAAAA,sBAAsB,EAAE,SAASA,sBAAT,GAAkC;AACxD,UAAIC,IAAJ;;AAEA,aAAOA,IAAI,GAAG;AACZ,8BAAsB,KAAKN;AADf,OAAP,EAEJ/B,eAAe,CAACqC,IAAD,EAAO,kBAAkBC,MAAlB,CAAyB,KAAKjB,UAA9B,CAAP,EAAkD,KAAKU,YAAvD,CAFX,EAEiF/B,eAAe,CAACqC,IAAD,EAAO,mBAAP,EAA4B,KAAKL,sBAAjC,CAFhG,EAE0JK,IAFjK;AAGD,KAhBO;AAiBRE,IAAAA,oBAAoB,EAAE,SAASA,oBAAT,GAAgC;AACpD,aAAO;AACL,gCAAwB,CAAC,KAAKR,YAAN,GAAqB,IAArB,GAA4B,KAAKI,uBAAL,GAA+B,MAA/B,GAAwC;AADvF,OAAP;AAGD;AArBO,GA1BG;AAiDbK,EAAAA,KAAK,EAAE;AACLC,IAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuC;AACpD;AACA,UAAIC,KAAK,GAAG,KAAZ;;AAEA,UAAI,KAAKb,YAAL,IAAqB,KAAKH,YAAL,CAAkBK,MAAlB,GAA2B,CAApD,EAAuD;AACrD;AACAW,QAAAA,KAAK,GAAGjC,OAAO,CAAC+B,MAAD,CAAP,IAAmB/B,OAAO,CAACgC,MAAD,CAA1B,IAAsCD,MAAM,CAACT,MAAP,KAAkBU,MAAM,CAACV,MAAvE;;AAEA,aAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBD,KAAK,IAAIC,CAAC,GAAGH,MAAM,CAACT,MAApC,EAA4CY,CAAC,EAA7C,EAAiD;AAC/C;AACAD,UAAAA,KAAK,GAAGnC,UAAU,CAACM,WAAW,CAAC2B,MAAM,CAACG,CAAD,CAAP,CAAZ,EAAyB9B,WAAW,CAAC4B,MAAM,CAACE,CAAD,CAAP,CAApC,CAAlB;AACD;AACF;;AAED,UAAI,CAACD,KAAL,EAAY;AACV,aAAKE,aAAL;AACD;AACF,KAlBI;AAmBL7B,IAAAA,UAAU,EAAE,SAASA,UAAT,CAAoByB,MAApB,EAA4BC,MAA5B,EAAoC;AAC9C,WAAKG,aAAL;AACA,WAAKC,oBAAL,CAA0BL,MAA1B;AACD,KAtBI;AAuBLrB,IAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBqB,MAApB,EAA4BC,MAA5B,EAAoC;AAC9C,WAAKG,aAAL;AACD,KAzBI;AA0BLlB,IAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBoB,aAAtB,EAAqCL,MAArC,EAA6C;AACzD,UAAIM,KAAK,GAAG,IAAZ;;AAEA,UAAI,KAAKlB,YAAL,IAAqB,CAACtB,UAAU,CAACuC,aAAD,EAAgBL,MAAhB,CAApC,EAA6D;AAC3D,YAAIO,KAAK,GAAG,EAAZ,CAD2D,CAC3C;;AAEhBF,QAAAA,aAAa,CAACG,OAAd,CAAsB,UAAUC,CAAV,EAAaC,GAAb,EAAkB;AACtC,cAAID,CAAJ,EAAO;AACLF,YAAAA,KAAK,CAACI,IAAN,CAAWL,KAAK,CAACR,aAAN,CAAoBY,GAApB,CAAX;AACD;AACF,SAJD;;AAMA,aAAKE,KAAL,CAAW,cAAX,EAA2BL,KAA3B;AACD;AACF;AAxCI,GAjDM;AA2FbM,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC;AACA,QAAI,KAAKzB,YAAT,EAAuB;AACrB,WAAKgB,oBAAL,CAA0B,IAA1B;AACD;AACF,GAhGY;AAiGbU,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACnC;AACA,UAAI,KAAK5B,YAAL,IAAqBjB,QAAQ,CAAC6C,KAAD,CAA7B,IAAwCA,KAAK,IAAI,CAAjD,IAAsDA,KAAK,GAAG,KAAKlB,aAAL,CAAmBR,MAAjF,IAA2F,CAAC,KAAK2B,aAAL,CAAmBD,KAAnB,CAAhG,EAA2H;AACzH,YAAI/B,YAAY,GAAG,KAAKO,uBAAL,GAA+B,KAAKP,YAAL,CAAkBiC,KAAlB,EAA/B,GAA2D,EAA9E;AACAjC,QAAAA,YAAY,CAAC+B,KAAD,CAAZ,GAAsB,IAAtB;AACA,aAAKG,mBAAL,GAA2B,CAAC,CAA5B;AACA,aAAKlC,YAAL,GAAoBA,YAApB;AACD;AACF,KAVM;AAWPmC,IAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBJ,KAArB,EAA4B;AACvC;AACA,UAAI,KAAK5B,YAAL,IAAqBjB,QAAQ,CAAC6C,KAAD,CAA7B,IAAwC,KAAKC,aAAL,CAAmBD,KAAnB,CAA5C,EAAuE;AACrE,YAAI/B,YAAY,GAAG,KAAKA,YAAL,CAAkBiC,KAAlB,EAAnB;AACAjC,QAAAA,YAAY,CAAC+B,KAAD,CAAZ,GAAsB,KAAtB;AACA,aAAKG,mBAAL,GAA2B,CAAC,CAA5B;AACA,aAAKlC,YAAL,GAAoBA,YAApB;AACD;AACF,KAnBM;AAoBPoC,IAAAA,aAAa,EAAE,SAASA,aAAT,GAAyB;AACtC,UAAI/B,MAAM,GAAG,KAAKQ,aAAL,CAAmBR,MAAhC;;AAEA,UAAI,KAAKF,YAAL,IAAqBE,MAAM,GAAG,CAAlC,EAAqC;AACnC,aAAK6B,mBAAL,GAA2B,CAAC,CAA5B;AACA,aAAKlC,YAAL,GAAoB,KAAKO,uBAAL,GAA+BzB,KAAK,CAACuB,MAAD,CAAL,CAAcgC,GAAd,CAAkB,UAAUpB,CAAV,EAAa;AAChF,iBAAO,IAAP;AACD,SAFkD,CAA/B,GAEf,CAAC,IAAD,CAFL;AAGD;AACF,KA7BM;AA8BPe,IAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBD,KAAvB,EAA8B;AAC3C;AACA,aAAOxC,OAAO,CAACL,QAAQ,CAAC6C,KAAD,CAAR,IAAmB,KAAK/B,YAAL,CAAkB+B,KAAlB,CAApB,CAAd;AACD,KAjCM;AAkCPb,IAAAA,aAAa,EAAE,SAASA,aAAT,GAAyB;AACtC;AACA,WAAKgB,mBAAL,GAA2B,CAAC,CAA5B;AACA,WAAKlC,YAAL,GAAoB,EAApB;AACD,KAtCM;AAuCP;AACAsC,IAAAA,oBAAoB,EAAE,SAASA,oBAAT,CAA8BP,KAA9B,EAAqC;AACzD,UAAI,KAAK5B,YAAL,IAAqB,KAAK6B,aAAL,CAAmBD,KAAnB,CAAzB,EAAoD;AAClD,YAAIQ,OAAO,GAAG,KAAK1C,eAAnB;AACA,eAAOzB,eAAe,CAAC;AACrB,kCAAwB;AADH,SAAD,EAEnB,GAAGsC,MAAH,CAAU,KAAK8B,IAAL,GAAY,IAAZ,GAAmB,OAA7B,EAAsC,GAAtC,EAA2C9B,MAA3C,CAAkD6B,OAAlD,CAFmB,EAEyCA,OAFzC,CAAtB;AAGD,OALD,MAKO;AACL,eAAO,EAAP;AACD;AACF,KAjDM;AAkDPE,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BV,KAA5B,EAAmC;AACrD,aAAO;AACL,yBAAiB,CAAC,KAAK5B,YAAN,GAAqB,IAArB,GAA4B,KAAK6B,aAAL,CAAmBD,KAAnB,IAA4B,MAA5B,GAAqC;AAD7E,OAAP;AAGD,KAtDM;AAuDPZ,IAAAA,oBAAoB,EAAE,SAASA,oBAAT,CAA8BuB,EAA9B,EAAkC;AACtD,UAAIC,MAAM,GAAGD,EAAE,GAAG,KAAH,GAAW,MAA1B,CADsD,CACpB;;AAElC,WAAKC,MAAL,EAAa,aAAb,EAA4B,KAAKC,gBAAjC,EAHsD,CAGF;;AAEpD,WAAKD,MAAL,EAAa,UAAb,EAAyB,KAAKzB,aAA9B;AACA,WAAKyB,MAAL,EAAa,iBAAb,EAAgC,KAAKzB,aAArC;AACD,KA9DM;AA+DP0B,IAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCd,KAAhC,EAAuCe,GAAvC,EAA4C;AAC5D;AACA,UAAI,CAAC,KAAK3C,YAAV,EAAwB;AACtB;;AAEA;AACA,aAAKe,aAAL;AACA;;AAEA;AACD;;AAED,UAAIzB,UAAU,GAAG,KAAKA,UAAtB;AACA,UAAIO,YAAY,GAAG,KAAKA,YAAL,CAAkBiC,KAAlB,EAAnB;AACA,UAAIc,QAAQ,GAAG,CAAC/C,YAAY,CAAC+B,KAAD,CAA5B,CAd4D,CAcvB;;AAErC,UAAItC,UAAU,KAAK,QAAnB,EAA6B;AAC3BO,QAAAA,YAAY,GAAG,EAAf;AACD,OAFD,MAEO,IAAIP,UAAU,KAAK,OAAnB,EAA4B;AACjC,YAAI,KAAKQ,eAAL,GAAuB,CAAC,CAAxB,IAA6B6C,GAAG,CAACE,QAArC,EAA+C;AAC7C;AACA,eAAK,IAAIvB,GAAG,GAAGwB,IAAI,CAACC,GAAL,CAAS,KAAKjD,eAAd,EAA+B8B,KAA/B,CAAf,EAAsDN,GAAG,IAAIwB,IAAI,CAACE,GAAL,CAAS,KAAKlD,eAAd,EAA+B8B,KAA/B,CAA7D,EAAoGN,GAAG,EAAvG,EAA2G;AACzGzB,YAAAA,YAAY,CAACyB,GAAD,CAAZ,GAAoB,IAApB;AACD;;AAEDsB,UAAAA,QAAQ,GAAG,IAAX;AACD,SAPD,MAOO;AACL,cAAI,EAAED,GAAG,CAACM,OAAJ,IAAeN,GAAG,CAACO,OAArB,CAAJ,EAAmC;AACjC;AACArD,YAAAA,YAAY,GAAG,EAAf;AACA+C,YAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,eAAK9C,eAAL,GAAuB8C,QAAQ,GAAGhB,KAAH,GAAW,CAAC,CAA3C;AACD;AACF;;AAED/B,MAAAA,YAAY,CAAC+B,KAAD,CAAZ,GAAsBgB,QAAtB;AACA,WAAK/C,YAAL,GAAoBA,YAApB;AACD;AAtGM;AAjGI,CAAf","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport looseEqual from '../../../utils/loose-equal';\nimport range from '../../../utils/range';\nimport { isArray, arrayIncludes } from '../../../utils/array';\nimport { getComponentConfig } from '../../../utils/config';\nimport { isNumber } from '../../../utils/inspect';\nimport sanitizeRow from './sanitize-row';\nexport default {\n  props: {\n    selectable: {\n      type: Boolean,\n      default: false\n    },\n    selectMode: {\n      type: String,\n      default: 'multi',\n      validator: function validator(val) {\n        return arrayIncludes(['range', 'multi', 'single'], val);\n      }\n    },\n    selectedVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig('BTable', 'selectedVariant');\n      }\n    }\n  },\n  data: function data() {\n    return {\n      selectedRows: [],\n      selectedLastRow: -1\n    };\n  },\n  computed: {\n    isSelectable: function isSelectable() {\n      return this.selectable && this.selectMode;\n    },\n    selectableHasSelection: function selectableHasSelection() {\n      return this.isSelectable && this.selectedRows && this.selectedRows.length > 0 && this.selectedRows.some(Boolean);\n    },\n    selectableIsMultiSelect: function selectableIsMultiSelect() {\n      return this.isSelectable && arrayIncludes(['range', 'multi'], this.selectMode);\n    },\n    selectableTableClasses: function selectableTableClasses() {\n      var _ref;\n\n      return _ref = {\n        'b-table-selectable': this.isSelectable\n      }, _defineProperty(_ref, \"b-table-select-\".concat(this.selectMode), this.isSelectable), _defineProperty(_ref, 'b-table-selecting', this.selectableHasSelection), _ref;\n    },\n    selectableTableAttrs: function selectableTableAttrs() {\n      return {\n        'aria-multiselectable': !this.isSelectable ? null : this.selectableIsMultiSelect ? 'true' : 'false'\n      };\n    }\n  },\n  watch: {\n    computedItems: function computedItems(newVal, oldVal) {\n      // Reset for selectable\n      var equal = false;\n\n      if (this.isSelectable && this.selectedRows.length > 0) {\n        // Quick check against array length\n        equal = isArray(newVal) && isArray(oldVal) && newVal.length === oldVal.length;\n\n        for (var i = 0; equal && i < newVal.length; i++) {\n          // Look for the first non-loosely equal row, after ignoring reserved fields\n          equal = looseEqual(sanitizeRow(newVal[i]), sanitizeRow(oldVal[i]));\n        }\n      }\n\n      if (!equal) {\n        this.clearSelected();\n      }\n    },\n    selectable: function selectable(newVal, oldVal) {\n      this.clearSelected();\n      this.setSelectionHandlers(newVal);\n    },\n    selectMode: function selectMode(newVal, oldVal) {\n      this.clearSelected();\n    },\n    selectedRows: function selectedRows(_selectedRows, oldVal) {\n      var _this = this;\n\n      if (this.isSelectable && !looseEqual(_selectedRows, oldVal)) {\n        var items = []; // `.forEach()` skips over non-existent indices (on sparse arrays)\n\n        _selectedRows.forEach(function (v, idx) {\n          if (v) {\n            items.push(_this.computedItems[idx]);\n          }\n        });\n\n        this.$emit('row-selected', items);\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Set up handlers\n    if (this.isSelectable) {\n      this.setSelectionHandlers(true);\n    }\n  },\n  methods: {\n    // Public methods\n    selectRow: function selectRow(index) {\n      // Select a particular row (indexed based on computedItems)\n      if (this.isSelectable && isNumber(index) && index >= 0 && index < this.computedItems.length && !this.isRowSelected(index)) {\n        var selectedRows = this.selectableIsMultiSelect ? this.selectedRows.slice() : [];\n        selectedRows[index] = true;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    unselectRow: function unselectRow(index) {\n      // Un-select a particular row (indexed based on `computedItems`)\n      if (this.isSelectable && isNumber(index) && this.isRowSelected(index)) {\n        var selectedRows = this.selectedRows.slice();\n        selectedRows[index] = false;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    selectAllRows: function selectAllRows() {\n      var length = this.computedItems.length;\n\n      if (this.isSelectable && length > 0) {\n        this.selectedLastClicked = -1;\n        this.selectedRows = this.selectableIsMultiSelect ? range(length).map(function (i) {\n          return true;\n        }) : [true];\n      }\n    },\n    isRowSelected: function isRowSelected(index) {\n      // Determine if a row is selected (indexed based on `computedItems`)\n      return Boolean(isNumber(index) && this.selectedRows[index]);\n    },\n    clearSelected: function clearSelected() {\n      // Clear any active selected row(s)\n      this.selectedLastClicked = -1;\n      this.selectedRows = [];\n    },\n    // Internal private methods\n    selectableRowClasses: function selectableRowClasses(index) {\n      if (this.isSelectable && this.isRowSelected(index)) {\n        var variant = this.selectedVariant;\n        return _defineProperty({\n          'b-table-row-selected': true\n        }, \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(variant), variant);\n      } else {\n        return {};\n      }\n    },\n    selectableRowAttrs: function selectableRowAttrs(index) {\n      return {\n        'aria-selected': !this.isSelectable ? null : this.isRowSelected(index) ? 'true' : 'false'\n      };\n    },\n    setSelectionHandlers: function setSelectionHandlers(on) {\n      var method = on ? '$on' : '$off'; // Handle row-clicked event\n\n      this[method]('row-clicked', this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n      this[method]('filtered', this.clearSelected);\n      this[method]('context-changed', this.clearSelected);\n    },\n    selectionHandler: function selectionHandler(item, index, evt) {\n      /* istanbul ignore if: should never happen */\n      if (!this.isSelectable) {\n        // Don't do anything if table is not in selectable mode\n\n        /* istanbul ignore next: should never happen */\n        this.clearSelected();\n        /* istanbul ignore next: should never happen */\n\n        return;\n      }\n\n      var selectMode = this.selectMode;\n      var selectedRows = this.selectedRows.slice();\n      var selected = !selectedRows[index]; // Note 'multi' mode needs no special event handling\n\n      if (selectMode === 'single') {\n        selectedRows = [];\n      } else if (selectMode === 'range') {\n        if (this.selectedLastRow > -1 && evt.shiftKey) {\n          // range\n          for (var idx = Math.min(this.selectedLastRow, index); idx <= Math.max(this.selectedLastRow, index); idx++) {\n            selectedRows[idx] = true;\n          }\n\n          selected = true;\n        } else {\n          if (!(evt.ctrlKey || evt.metaKey)) {\n            // Clear range selection if any\n            selectedRows = [];\n            selected = true;\n          }\n\n          this.selectedLastRow = selected ? index : -1;\n        }\n      }\n\n      selectedRows[index] = selected;\n      this.selectedRows = selectedRows;\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}