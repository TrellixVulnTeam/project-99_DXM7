{"ast":null,"code":"var Layer = {\n  props: {\n    pane: {\n      type: String,\n      default: 'overlayPane'\n    },\n    attribution: {\n      type: String,\n      default: null,\n      custom: true\n    },\n    name: {\n      type: String,\n      custom: true,\n      default: undefined\n    },\n    layerType: {\n      type: String,\n      custom: true,\n      default: undefined\n    },\n    visible: {\n      type: Boolean,\n      custom: true,\n      default: true\n    }\n  },\n  mounted: function mounted() {\n    this.layerOptions = {\n      attribution: this.attribution,\n      pane: this.pane\n    };\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.unbindPopup();\n    this.unbindTooltip();\n    this.parentContainer.removeLayer(this);\n  },\n  methods: {\n    setAttribution: function setAttribution(val, old) {\n      var attributionControl = this.$parent.mapObject.attributionControl;\n      attributionControl.removeAttribution(old).addAttribution(val);\n    },\n    setName: function setName() {\n      this.parentContainer.removeLayer(this);\n\n      if (this.visible) {\n        this.parentContainer.addLayer(this);\n      }\n    },\n    setLayerType: function setLayerType() {\n      this.parentContainer.removeLayer(this);\n\n      if (this.visible) {\n        this.parentContainer.addLayer(this);\n      }\n    },\n    setVisible: function setVisible(isVisible) {\n      if (this.mapObject) {\n        if (isVisible) {\n          this.parentContainer.addLayer(this);\n        } else {\n          if (this.parentContainer.hideLayer) {\n            this.parentContainer.hideLayer(this);\n          } else {\n            this.parentContainer.removeLayer(this);\n          }\n        }\n      }\n    },\n    unbindTooltip: function unbindTooltip() {\n      var tooltip = this.mapObject ? this.mapObject.getTooltip() : null;\n\n      if (tooltip) {\n        tooltip.unbindTooltip();\n      }\n    },\n    unbindPopup: function unbindPopup() {\n      var popup = this.mapObject ? this.mapObject.getPopup() : null;\n\n      if (popup) {\n        popup.unbindPopup();\n      }\n    },\n    updateVisibleProp: function updateVisibleProp(value) {\n      /**\n       * Triggers when the visible prop needs to be updated\n       * @type {boolean}\n       * @property {boolean} value - value of the visible property\n       */\n      this.$emit('update:visible', value);\n    }\n  }\n};\nexport default Layer;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/vue2-leaflet/dist/mixins/Layer.js"],"names":["Layer","props","pane","type","String","default","attribution","custom","name","undefined","layerType","visible","Boolean","mounted","layerOptions","beforeDestroy","unbindPopup","unbindTooltip","parentContainer","removeLayer","methods","setAttribution","val","old","attributionControl","$parent","mapObject","removeAttribution","addAttribution","setName","addLayer","setLayerType","setVisible","isVisible","hideLayer","tooltip","getTooltip","popup","getPopup","updateVisibleProp","value","$emit"],"mappings":"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","sourcesContent":["var Layer = {\n  props: {\n    pane: {\n      type: String,\n      default: 'overlayPane',\n    },\n    attribution: {\n      type: String,\n      default: null,\n      custom: true,\n    },\n    name: {\n      type: String,\n      custom: true,\n      default: undefined,\n    },\n    layerType: {\n      type: String,\n      custom: true,\n      default: undefined,\n    },\n    visible: {\n      type: Boolean,\n      custom: true,\n      default: true,\n    },\n  },\n  mounted: function mounted() {\n    this.layerOptions = {\n      attribution: this.attribution,\n      pane: this.pane,\n    };\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.unbindPopup();\n    this.unbindTooltip();\n    this.parentContainer.removeLayer(this);\n  },\n  methods: {\n    setAttribution: function setAttribution(val, old) {\n      var attributionControl = this.$parent.mapObject.attributionControl;\n      attributionControl.removeAttribution(old).addAttribution(val);\n    },\n    setName: function setName() {\n      this.parentContainer.removeLayer(this);\n      if (this.visible) {\n        this.parentContainer.addLayer(this);\n      }\n    },\n    setLayerType: function setLayerType() {\n      this.parentContainer.removeLayer(this);\n      if (this.visible) {\n        this.parentContainer.addLayer(this);\n      }\n    },\n    setVisible: function setVisible(isVisible) {\n      if (this.mapObject) {\n        if (isVisible) {\n          this.parentContainer.addLayer(this);\n        } else {\n          if (this.parentContainer.hideLayer) {\n            this.parentContainer.hideLayer(this);\n          } else {\n            this.parentContainer.removeLayer(this);\n          }\n        }\n      }\n    },\n    unbindTooltip: function unbindTooltip() {\n      var tooltip = this.mapObject ? this.mapObject.getTooltip() : null;\n      if (tooltip) {\n        tooltip.unbindTooltip();\n      }\n    },\n    unbindPopup: function unbindPopup() {\n      var popup = this.mapObject ? this.mapObject.getPopup() : null;\n      if (popup) {\n        popup.unbindPopup();\n      }\n    },\n    updateVisibleProp: function updateVisibleProp(value) {\n      /**\n       * Triggers when the visible prop needs to be updated\n       * @type {boolean}\n       * @property {boolean} value - value of the visible property\n       */\n      this.$emit('update:visible', value);\n    },\n  },\n};\n\nexport default Layer;\n"]},"metadata":{},"sourceType":"module"}