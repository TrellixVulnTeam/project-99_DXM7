{"ast":null,"code":"import Vue from '../../utils/vue';\nimport listenOnRootMixin from '../../mixins/listen-on-root';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nimport { getComponentConfig } from '../../utils/config';\nvar NAME = 'BNavbarToggle'; // TODO: Switch to using VBToggle directive, will reduce code footprint\n// Events we emit on $root\n\nvar EVENT_TOGGLE = 'bv::toggle::collapse'; // Events we listen to on $root\n\nvar EVENT_STATE = 'bv::collapse::state'; // This private event is NOT to be documented as people should not be using it.\n\nvar EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // @vue/component\n\nexport var BNavbarToggle = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  mixins: [listenOnRootMixin, normalizeSlotMixin],\n  props: {\n    label: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME, 'label');\n      }\n    },\n    target: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      toggleState: false\n    };\n  },\n  created: function created() {\n    this.listenOnRoot(EVENT_STATE, this.handleStateEvt);\n    this.listenOnRoot(EVENT_STATE_SYNC, this.handleStateEvt);\n  },\n  methods: {\n    onClick: function onClick(evt) {\n      this.$emit('click', evt);\n\n      if (!evt.defaultPrevented) {\n        this.$root.$emit(EVENT_TOGGLE, this.target);\n      }\n    },\n    handleStateEvt: function handleStateEvt(id, state) {\n      if (id === this.target) {\n        this.toggleState = state;\n      }\n    }\n  },\n  render: function render(h) {\n    return h('button', {\n      class: ['navbar-toggler'],\n      attrs: {\n        type: 'button',\n        'aria-label': this.label,\n        'aria-controls': this.target,\n        'aria-expanded': this.toggleState ? 'true' : 'false'\n      },\n      on: {\n        click: this.onClick\n      }\n    }, [this.normalizeSlot('default') || h('span', {\n      class: ['navbar-toggler-icon']\n    })]);\n  }\n});\nexport default BNavbarToggle;","map":{"version":3,"sources":["C:/Users/Krystian/Desktop/TO3/ecommercevuefirestore/node_modules/bootstrap-vue/esm/components/navbar/navbar-toggle.js"],"names":["Vue","listenOnRootMixin","normalizeSlotMixin","getComponentConfig","NAME","EVENT_TOGGLE","EVENT_STATE","EVENT_STATE_SYNC","BNavbarToggle","extend","name","mixins","props","label","type","String","default","_default","target","required","data","toggleState","created","listenOnRoot","handleStateEvt","methods","onClick","evt","$emit","defaultPrevented","$root","id","state","render","h","class","attrs","on","click","normalizeSlot"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,iBAAhB;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,IAAIC,IAAI,GAAG,eAAX,C,CAA4B;AAC5B;;AAEA,IAAIC,YAAY,GAAG,sBAAnB,C,CAA2C;;AAE3C,IAAIC,WAAW,GAAG,qBAAlB,C,CAAyC;;AAEzC,IAAIC,gBAAgB,GAAG,2BAAvB,C,CAAoD;;AAEpD,OAAO,IAAIC,aAAa,GACxB,aACAR,GAAG,CAACS,MAAJ,CAAW;AACTC,EAAAA,IAAI,EAAEN,IADG;AAETO,EAAAA,MAAM,EAAE,CAACV,iBAAD,EAAoBC,kBAApB,CAFC;AAGTU,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEC,MADD;AAELC,MAAAA,OAAO,EAAE,SAASC,QAAT,GAAoB;AAC3B,eAAOd,kBAAkB,CAACC,IAAD,EAAO,OAAP,CAAzB;AACD;AAJI,KADF;AAOLc,IAAAA,MAAM,EAAE;AACNJ,MAAAA,IAAI,EAAEC,MADA;AAENI,MAAAA,QAAQ,EAAE;AAFJ;AAPH,GAHE;AAeTC,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,WAAO;AACLC,MAAAA,WAAW,EAAE;AADR,KAAP;AAGD,GAnBQ;AAoBTC,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,SAAKC,YAAL,CAAkBjB,WAAlB,EAA+B,KAAKkB,cAApC;AACA,SAAKD,YAAL,CAAkBhB,gBAAlB,EAAoC,KAAKiB,cAAzC;AACD,GAvBQ;AAwBTC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAC7B,WAAKC,KAAL,CAAW,OAAX,EAAoBD,GAApB;;AAEA,UAAI,CAACA,GAAG,CAACE,gBAAT,EAA2B;AACzB,aAAKC,KAAL,CAAWF,KAAX,CAAiBvB,YAAjB,EAA+B,KAAKa,MAApC;AACD;AACF,KAPM;AAQPM,IAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBO,EAAxB,EAA4BC,KAA5B,EAAmC;AACjD,UAAID,EAAE,KAAK,KAAKb,MAAhB,EAAwB;AACtB,aAAKG,WAAL,GAAmBW,KAAnB;AACD;AACF;AAZM,GAxBA;AAsCTC,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,WAAOA,CAAC,CAAC,QAAD,EAAW;AACjBC,MAAAA,KAAK,EAAE,CAAC,gBAAD,CADU;AAEjBC,MAAAA,KAAK,EAAE;AACLtB,QAAAA,IAAI,EAAE,QADD;AAEL,sBAAc,KAAKD,KAFd;AAGL,yBAAiB,KAAKK,MAHjB;AAIL,yBAAiB,KAAKG,WAAL,GAAmB,MAAnB,GAA4B;AAJxC,OAFU;AAQjBgB,MAAAA,EAAE,EAAE;AACFC,QAAAA,KAAK,EAAE,KAAKZ;AADV;AARa,KAAX,EAWL,CAAC,KAAKa,aAAL,CAAmB,SAAnB,KAAiCL,CAAC,CAAC,MAAD,EAAS;AAC7CC,MAAAA,KAAK,EAAE,CAAC,qBAAD;AADsC,KAAT,CAAnC,CAXK,CAAR;AAcD;AArDQ,CAAX,CAFO;AAyDP,eAAe3B,aAAf","sourcesContent":["import Vue from '../../utils/vue';\nimport listenOnRootMixin from '../../mixins/listen-on-root';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nimport { getComponentConfig } from '../../utils/config';\nvar NAME = 'BNavbarToggle'; // TODO: Switch to using VBToggle directive, will reduce code footprint\n// Events we emit on $root\n\nvar EVENT_TOGGLE = 'bv::toggle::collapse'; // Events we listen to on $root\n\nvar EVENT_STATE = 'bv::collapse::state'; // This private event is NOT to be documented as people should not be using it.\n\nvar EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // @vue/component\n\nexport var BNavbarToggle =\n/*#__PURE__*/\nVue.extend({\n  name: NAME,\n  mixins: [listenOnRootMixin, normalizeSlotMixin],\n  props: {\n    label: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME, 'label');\n      }\n    },\n    target: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      toggleState: false\n    };\n  },\n  created: function created() {\n    this.listenOnRoot(EVENT_STATE, this.handleStateEvt);\n    this.listenOnRoot(EVENT_STATE_SYNC, this.handleStateEvt);\n  },\n  methods: {\n    onClick: function onClick(evt) {\n      this.$emit('click', evt);\n\n      if (!evt.defaultPrevented) {\n        this.$root.$emit(EVENT_TOGGLE, this.target);\n      }\n    },\n    handleStateEvt: function handleStateEvt(id, state) {\n      if (id === this.target) {\n        this.toggleState = state;\n      }\n    }\n  },\n  render: function render(h) {\n    return h('button', {\n      class: ['navbar-toggler'],\n      attrs: {\n        type: 'button',\n        'aria-label': this.label,\n        'aria-controls': this.target,\n        'aria-expanded': this.toggleState ? 'true' : 'false'\n      },\n      on: {\n        click: this.onClick\n      }\n    }, [this.normalizeSlot('default') || h('span', {\n      class: ['navbar-toggler-icon']\n    })]);\n  }\n});\nexport default BNavbarToggle;"]},"metadata":{},"sourceType":"module"}