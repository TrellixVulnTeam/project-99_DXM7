{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport Vue from '../../utils/vue';\nimport looseEqual from '../../utils/loose-equal';\nimport looseIndexOf from '../../utils/loose-index-of';\nimport { isArray } from '../../utils/inspect';\nimport formMixin from '../../mixins/form';\nimport formRadioCheckMixin from '../../mixins/form-radio-check';\nimport formSizeMixin from '../../mixins/form-size';\nimport formStateMixin from '../../mixins/form-state';\nimport idMixin from '../../mixins/id'; // @vue/component\n\nexport var BFormCheckbox = /*#__PURE__*/Vue.extend({\n  name: 'BFormCheckbox',\n  mixins: [formRadioCheckMixin, // Includes shared render function\n  idMixin, formMixin, formSizeMixin, formStateMixin],\n  inject: {\n    bvGroup: {\n      from: 'bvCheckGroup',\n      default: false\n    }\n  },\n  props: {\n    value: {\n      // type: [Object, Boolean],\n      default: true\n    },\n    uncheckedValue: {\n      // type: [Object, Boolean],\n      // Not applicable in multi-check mode\n      default: false\n    },\n    indeterminate: {\n      // Not applicable in multi-check mode\n      type: Boolean,\n      default: false\n    },\n    switch: {\n      // Custom switch styling\n      type: Boolean,\n      default: false\n    },\n    checked: {\n      // v-model\n      type: [String, Number, Object, Array, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    isChecked: function isChecked() {\n      var checked = this.computedLocalChecked;\n      var value = this.value;\n\n      if (isArray(checked)) {\n        return looseIndexOf(checked, value) > -1;\n      } else {\n        return looseEqual(checked, value);\n      }\n    },\n    isRadio: function isRadio() {\n      return false;\n    },\n    isCheck: function isCheck() {\n      return true;\n    }\n  },\n  watch: {\n    computedLocalChecked: function computedLocalChecked(newVal, oldVal) {\n      this.$emit('input', newVal);\n\n      if (this.$refs && this.$refs.input) {\n        this.$emit('update:indeterminate', this.$refs.input.indeterminate);\n      }\n    },\n    indeterminate: function indeterminate(newVal, oldVal) {\n      this.setIndeterminate(newVal);\n    }\n  },\n  mounted: function mounted() {\n    // Set initial indeterminate state\n    this.setIndeterminate(this.indeterminate);\n  },\n  methods: {\n    handleChange: function handleChange(_ref) {\n      var _ref$target = _ref.target,\n          checked = _ref$target.checked,\n          indeterminate = _ref$target.indeterminate;\n      var localChecked = this.computedLocalChecked;\n      var value = this.value;\n      var isArr = isArray(localChecked);\n      var uncheckedValue = isArr ? null : this.uncheckedValue; // Update computedLocalChecked\n\n      if (isArr) {\n        var idx = looseIndexOf(localChecked, value);\n\n        if (checked && idx < 0) {\n          // Add value to array\n          localChecked = localChecked.concat(value);\n        } else if (!checked && idx > -1) {\n          // Remove value from array\n          localChecked = localChecked.slice(0, idx).concat(localChecked.slice(idx + 1));\n        }\n      } else {\n        localChecked = checked ? value : uncheckedValue;\n      }\n\n      this.computedLocalChecked = localChecked; // Change is only emitted on user interaction\n\n      this.$emit('change', checked ? value : uncheckedValue); // If this is a child of form-checkbox-group, we emit a change event on it as well\n\n      if (this.isGroup) {\n        this.bvGroup.$emit('change', localChecked);\n      }\n\n      this.$emit('update:indeterminate', indeterminate);\n    },\n    setIndeterminate: function setIndeterminate(state) {\n      // Indeterminate only supported in single checkbox mode\n      if (isArray(this.computedLocalChecked)) {\n        state = false;\n      }\n\n      if (this.$refs && this.$refs.input) {\n        this.$refs.input.indeterminate = state; // Emit update event to prop\n\n        this.$emit('update:indeterminate', state);\n      }\n    }\n  }\n});\nexport default BFormCheckbox;","map":{"version":3,"sources":["C:/Users/Krystian/Desktop/ecommercevuefirestore/ecommercevuefirestore/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js"],"names":["Vue","looseEqual","looseIndexOf","isArray","formMixin","formRadioCheckMixin","formSizeMixin","formStateMixin","idMixin","BFormCheckbox","extend","name","mixins","inject","bvGroup","from","default","props","value","uncheckedValue","indeterminate","type","Boolean","switch","checked","String","Number","Object","Array","computed","isChecked","computedLocalChecked","isRadio","isCheck","watch","newVal","oldVal","$emit","$refs","input","setIndeterminate","mounted","methods","handleChange","_ref","_ref$target","target","localChecked","isArr","idx","concat","slice","isGroup","state"],"mappings":"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","sourcesContent":["import Vue from '../../utils/vue';\nimport looseEqual from '../../utils/loose-equal';\nimport looseIndexOf from '../../utils/loose-index-of';\nimport { isArray } from '../../utils/inspect';\nimport formMixin from '../../mixins/form';\nimport formRadioCheckMixin from '../../mixins/form-radio-check';\nimport formSizeMixin from '../../mixins/form-size';\nimport formStateMixin from '../../mixins/form-state';\nimport idMixin from '../../mixins/id'; // @vue/component\n\nexport var BFormCheckbox =\n/*#__PURE__*/\nVue.extend({\n  name: 'BFormCheckbox',\n  mixins: [formRadioCheckMixin, // Includes shared render function\n  idMixin, formMixin, formSizeMixin, formStateMixin],\n  inject: {\n    bvGroup: {\n      from: 'bvCheckGroup',\n      default: false\n    }\n  },\n  props: {\n    value: {\n      // type: [Object, Boolean],\n      default: true\n    },\n    uncheckedValue: {\n      // type: [Object, Boolean],\n      // Not applicable in multi-check mode\n      default: false\n    },\n    indeterminate: {\n      // Not applicable in multi-check mode\n      type: Boolean,\n      default: false\n    },\n    switch: {\n      // Custom switch styling\n      type: Boolean,\n      default: false\n    },\n    checked: {\n      // v-model\n      type: [String, Number, Object, Array, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    isChecked: function isChecked() {\n      var checked = this.computedLocalChecked;\n      var value = this.value;\n\n      if (isArray(checked)) {\n        return looseIndexOf(checked, value) > -1;\n      } else {\n        return looseEqual(checked, value);\n      }\n    },\n    isRadio: function isRadio() {\n      return false;\n    },\n    isCheck: function isCheck() {\n      return true;\n    }\n  },\n  watch: {\n    computedLocalChecked: function computedLocalChecked(newVal, oldVal) {\n      this.$emit('input', newVal);\n\n      if (this.$refs && this.$refs.input) {\n        this.$emit('update:indeterminate', this.$refs.input.indeterminate);\n      }\n    },\n    indeterminate: function indeterminate(newVal, oldVal) {\n      this.setIndeterminate(newVal);\n    }\n  },\n  mounted: function mounted() {\n    // Set initial indeterminate state\n    this.setIndeterminate(this.indeterminate);\n  },\n  methods: {\n    handleChange: function handleChange(_ref) {\n      var _ref$target = _ref.target,\n          checked = _ref$target.checked,\n          indeterminate = _ref$target.indeterminate;\n      var localChecked = this.computedLocalChecked;\n      var value = this.value;\n      var isArr = isArray(localChecked);\n      var uncheckedValue = isArr ? null : this.uncheckedValue; // Update computedLocalChecked\n\n      if (isArr) {\n        var idx = looseIndexOf(localChecked, value);\n\n        if (checked && idx < 0) {\n          // Add value to array\n          localChecked = localChecked.concat(value);\n        } else if (!checked && idx > -1) {\n          // Remove value from array\n          localChecked = localChecked.slice(0, idx).concat(localChecked.slice(idx + 1));\n        }\n      } else {\n        localChecked = checked ? value : uncheckedValue;\n      }\n\n      this.computedLocalChecked = localChecked; // Change is only emitted on user interaction\n\n      this.$emit('change', checked ? value : uncheckedValue); // If this is a child of form-checkbox-group, we emit a change event on it as well\n\n      if (this.isGroup) {\n        this.bvGroup.$emit('change', localChecked);\n      }\n\n      this.$emit('update:indeterminate', indeterminate);\n    },\n    setIndeterminate: function setIndeterminate(state) {\n      // Indeterminate only supported in single checkbox mode\n      if (isArray(this.computedLocalChecked)) {\n        state = false;\n      }\n\n      if (this.$refs && this.$refs.input) {\n        this.$refs.input.indeterminate = state; // Emit update event to prop\n\n        this.$emit('update:indeterminate', state);\n      }\n    }\n  }\n});\nexport default BFormCheckbox;"]},"metadata":{},"sourceType":"module"}