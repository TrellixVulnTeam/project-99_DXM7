{"ast":null,"code":"/**\n * Issue #569: collapse::toggle::state triggered too many times\n * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569\n */\n// @vue/component\nexport default {\n  methods: {\n    /**\n     * Safely register event listeners on the root Vue node.\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback.\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     * @chainable\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      var _this = this;\n\n      this.$root.$on(event, callback);\n      this.$on('hook:beforeDestroy', function () {\n        _this.$root.$off(event, callback);\n      }); // Return this for easy chaining\n\n      return this;\n    },\n\n    /**\n     * Safely register a $once event listener on the root Vue node.\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback.\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     * @chainable\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n\n      this.$root.$once(event, callback);\n      this.$on('hook:beforeDestroy', function () {\n        _this2.$root.$off(event, callback);\n      }); // Return this for easy chaining\n\n      return this;\n    },\n\n    /**\n     * Convenience method for calling vm.$emit on vm.$root.\n     * @param {string} event\n     * @param {*} args\n     * @chainable\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      var _this$$root;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args)); // Return this for easy chaining\n\n\n      return this;\n    }\n  }\n};","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/mixins/listen-on-root.js"],"names":["methods","listenOnRoot","event","callback","_this","$root","$on","$off","listenOnRootOnce","_this2","$once","emitOnRoot","_this$$root","_len","arguments","length","args","Array","_key","$emit","apply","concat"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,eAAe;AACbA,EAAAA,OAAO,EAAE;AACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AACnD,UAAIC,KAAK,GAAG,IAAZ;;AAEA,WAAKC,KAAL,CAAWC,GAAX,CAAeJ,KAAf,EAAsBC,QAAtB;AACA,WAAKG,GAAL,CAAS,oBAAT,EAA+B,YAAY;AACzCF,QAAAA,KAAK,CAACC,KAAN,CAAYE,IAAZ,CAAiBL,KAAjB,EAAwBC,QAAxB;AACD,OAFD,EAJmD,CAM/C;;AAEJ,aAAO,IAAP;AACD,KAzBM;;AA2BP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIK,IAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BN,KAA1B,EAAiCC,QAAjC,EAA2C;AAC3D,UAAIM,MAAM,GAAG,IAAb;;AAEA,WAAKJ,KAAL,CAAWK,KAAX,CAAiBR,KAAjB,EAAwBC,QAAxB;AACA,WAAKG,GAAL,CAAS,oBAAT,EAA+B,YAAY;AACzCG,QAAAA,MAAM,CAACJ,KAAP,CAAaE,IAAb,CAAkBL,KAAlB,EAAyBC,QAAzB;AACD,OAFD,EAJ2D,CAMvD;;AAEJ,aAAO,IAAP;AACD,KAnDM;;AAqDP;AACJ;AACA;AACA;AACA;AACA;AACIQ,IAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBT,KAApB,EAA2B;AACrC,UAAIU,WAAJ;;AAEA,WAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEK,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGL,IAA9F,EAAoGK,IAAI,EAAxG,EAA4G;AAC1GF,QAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBJ,SAAS,CAACI,IAAD,CAA1B;AACD;;AAED,OAACN,WAAW,GAAG,KAAKP,KAApB,EAA2Bc,KAA3B,CAAiCC,KAAjC,CAAuCR,WAAvC,EAAoD,CAACV,KAAD,EAAQmB,MAAR,CAAeL,IAAf,CAApD,EAPqC,CAOsC;;;AAG3E,aAAO,IAAP;AACD;AAtEM;AADI,CAAf","sourcesContent":["/**\n * Issue #569: collapse::toggle::state triggered too many times\n * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569\n */\n// @vue/component\nexport default {\n  methods: {\n    /**\n     * Safely register event listeners on the root Vue node.\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback.\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     * @chainable\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      var _this = this;\n\n      this.$root.$on(event, callback);\n      this.$on('hook:beforeDestroy', function () {\n        _this.$root.$off(event, callback);\n      }); // Return this for easy chaining\n\n      return this;\n    },\n\n    /**\n     * Safely register a $once event listener on the root Vue node.\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback.\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     * @chainable\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n\n      this.$root.$once(event, callback);\n      this.$on('hook:beforeDestroy', function () {\n        _this2.$root.$off(event, callback);\n      }); // Return this for easy chaining\n\n      return this;\n    },\n\n    /**\n     * Convenience method for calling vm.$emit on vm.$root.\n     * @param {string} event\n     * @param {*} args\n     * @chainable\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      var _this$$root;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args)); // Return this for easy chaining\n\n\n      return this;\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}