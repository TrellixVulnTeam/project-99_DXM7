{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport looseEqual from '../../utils/loose-equal';\nimport { addClass, removeAttr, removeClass, setAttr } from '../../utils/dom';\nimport { isBrowser } from '../../utils/env';\nimport { bindTargets, getTargets, unbindTargets } from '../../utils/target'; // Target listen types\n\nvar listenTypes = {\n  click: true // Property key for handler storage\n\n};\nvar BV_TOGGLE = '__BV_toggle__';\nvar BV_TOGGLE_STATE = '__BV_toggle_STATE__';\nvar BV_TOGGLE_CONTROLS = '__BV_toggle_CONTROLS__';\nvar BV_TOGGLE_TARGETS = '__BV_toggle_TARGETS__'; // Emitted control event for collapse (emitted to collapse)\n\nvar EVENT_TOGGLE = 'bv::toggle::collapse'; // Listen to event for toggle state update (emitted by collapse)\n\nvar EVENT_STATE = 'bv::collapse::state'; // Private event emitted on $root to ensure the toggle state is always synced.\n// Gets emitted even if the state of b-collapse has not changed.\n// This event is NOT to be documented as people should not be using it.\n\nvar EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Private event we send to collapse to request state update sync event\n\nvar EVENT_STATE_REQUEST = 'bv::request::collapse::state'; // Reset and remove a property from the provided element\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle targets update\n\n\nvar handleTargets = function handleTargets(_ref) {\n  var targets = _ref.targets,\n      vnode = _ref.vnode;\n  targets.forEach(function (target) {\n    vnode.context.$root.$emit(EVENT_TOGGLE, target);\n  });\n}; // Handle directive updates\n\n/* istanbul ignore next: not easy to test */\n\n\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\n  if (!isBrowser) {\n    return;\n  }\n\n  if (!looseEqual(getTargets(binding), el[BV_TOGGLE_TARGETS])) {\n    // Targets have changed, so update accordingly\n    unbindTargets(vnode, binding, listenTypes);\n    var targets = bindTargets(vnode, binding, listenTypes, handleTargets); // Update targets array to element\n\n    el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n    el[BV_TOGGLE_CONTROLS] = targets.join(' '); // ensure aria-controls is up to date\n\n    setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]); // Request a state update from targets so that we can ensure\n    // expanded state is correct\n\n    targets.forEach(function (target) {\n      vnode.context.$root.$emit(EVENT_STATE_REQUEST, target);\n    });\n  } // Ensure the collapse class and aria-* attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or it's contents\n\n\n  if (el[BV_TOGGLE_STATE] === true) {\n    addClass(el, 'collapsed');\n    setAttr(el, 'aria-expanded', 'true');\n  } else if (el[BV_TOGGLE_STATE] === false) {\n    removeClass(el, 'collapsed');\n    setAttr(el, 'aria-expanded', 'false');\n  }\n\n  setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n};\n/*\n * Export our directive\n */\n\n\nexport var VBToggle = {\n  bind: function bind(el, binding, vnode) {\n    var targets = bindTargets(vnode, binding, listenTypes, handleTargets);\n\n    if (isBrowser && vnode.context && targets.length > 0) {\n      // Add targets array to element\n      el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n      el[BV_TOGGLE_CONTROLS] = targets.join(' '); // State is initially collapsed until we receive a state event\n\n      el[BV_TOGGLE_STATE] = false;\n      setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n      setAttr(el, 'aria-expanded', 'false'); // If element is not a button, we add `role=\"button\"` for accessibility\n\n      if (el.tagName !== 'BUTTON') {\n        setAttr(el, 'role', 'button');\n      } // Toggle state handler\n\n\n      var toggleDirectiveHandler = function toggleDirectiveHandler(id, state) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n\n        if (targets.indexOf(id) !== -1) {\n          // Set aria-expanded state\n          setAttr(el, 'aria-expanded', state ? 'true' : 'false'); // Set/Clear 'collapsed' class state\n\n          el[BV_TOGGLE_STATE] = state;\n\n          if (state) {\n            removeClass(el, 'collapsed');\n          } else {\n            addClass(el, 'collapsed');\n          }\n        }\n      }; // Store the toggle handler on the element\n\n\n      el[BV_TOGGLE] = toggleDirectiveHandler; // Listen for toggle state changes (public)\n\n      vnode.context.$root.$on(EVENT_STATE, el[BV_TOGGLE]); // Listen for toggle state sync (private)\n\n      vnode.context.$root.$on(EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    }\n  },\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n  unbind: function unbind(el, binding, vnode)\n  /* istanbul ignore next */\n  {\n    unbindTargets(vnode, binding, listenTypes); // Remove our $root listener\n\n    if (el[BV_TOGGLE]) {\n      vnode.context.$root.$off(EVENT_STATE, el[BV_TOGGLE]);\n      vnode.context.$root.$off(EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    } // Reset custom  props\n\n\n    resetProp(el, BV_TOGGLE);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_CONTROLS);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs\n\n    removeClass(el, 'collapsed');\n    removeAttr(el, 'aria-expanded');\n    removeAttr(el, 'aria-controls');\n    removeAttr(el, 'role');\n  }\n};\nexport default VBToggle;","map":{"version":3,"sources":["D:/UEK/ecommercevuefirestore2304/node_modules/bootstrap-vue/esm/directives/toggle/toggle.js"],"names":["looseEqual","addClass","removeAttr","removeClass","setAttr","isBrowser","bindTargets","getTargets","unbindTargets","listenTypes","click","BV_TOGGLE","BV_TOGGLE_STATE","BV_TOGGLE_CONTROLS","BV_TOGGLE_TARGETS","EVENT_TOGGLE","EVENT_STATE","EVENT_STATE_SYNC","EVENT_STATE_REQUEST","resetProp","el","prop","handleTargets","_ref","targets","vnode","forEach","target","context","$root","$emit","handleUpdate","binding","join","VBToggle","bind","length","tagName","toggleDirectiveHandler","id","state","indexOf","$on","componentUpdated","updated","unbind","$off"],"mappings":"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","sourcesContent":["import looseEqual from '../../utils/loose-equal';\nimport { addClass, removeAttr, removeClass, setAttr } from '../../utils/dom';\nimport { isBrowser } from '../../utils/env';\nimport { bindTargets, getTargets, unbindTargets } from '../../utils/target'; // Target listen types\n\nvar listenTypes = {\n  click: true // Property key for handler storage\n\n};\nvar BV_TOGGLE = '__BV_toggle__';\nvar BV_TOGGLE_STATE = '__BV_toggle_STATE__';\nvar BV_TOGGLE_CONTROLS = '__BV_toggle_CONTROLS__';\nvar BV_TOGGLE_TARGETS = '__BV_toggle_TARGETS__'; // Emitted control event for collapse (emitted to collapse)\n\nvar EVENT_TOGGLE = 'bv::toggle::collapse'; // Listen to event for toggle state update (emitted by collapse)\n\nvar EVENT_STATE = 'bv::collapse::state'; // Private event emitted on $root to ensure the toggle state is always synced.\n// Gets emitted even if the state of b-collapse has not changed.\n// This event is NOT to be documented as people should not be using it.\n\nvar EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Private event we send to collapse to request state update sync event\n\nvar EVENT_STATE_REQUEST = 'bv::request::collapse::state'; // Reset and remove a property from the provided element\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle targets update\n\n\nvar handleTargets = function handleTargets(_ref) {\n  var targets = _ref.targets,\n      vnode = _ref.vnode;\n  targets.forEach(function (target) {\n    vnode.context.$root.$emit(EVENT_TOGGLE, target);\n  });\n}; // Handle directive updates\n\n/* istanbul ignore next: not easy to test */\n\n\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\n  if (!isBrowser) {\n    return;\n  }\n\n  if (!looseEqual(getTargets(binding), el[BV_TOGGLE_TARGETS])) {\n    // Targets have changed, so update accordingly\n    unbindTargets(vnode, binding, listenTypes);\n    var targets = bindTargets(vnode, binding, listenTypes, handleTargets); // Update targets array to element\n\n    el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n    el[BV_TOGGLE_CONTROLS] = targets.join(' '); // ensure aria-controls is up to date\n\n    setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]); // Request a state update from targets so that we can ensure\n    // expanded state is correct\n\n    targets.forEach(function (target) {\n      vnode.context.$root.$emit(EVENT_STATE_REQUEST, target);\n    });\n  } // Ensure the collapse class and aria-* attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or it's contents\n\n\n  if (el[BV_TOGGLE_STATE] === true) {\n    addClass(el, 'collapsed');\n    setAttr(el, 'aria-expanded', 'true');\n  } else if (el[BV_TOGGLE_STATE] === false) {\n    removeClass(el, 'collapsed');\n    setAttr(el, 'aria-expanded', 'false');\n  }\n\n  setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n};\n/*\n * Export our directive\n */\n\n\nexport var VBToggle = {\n  bind: function bind(el, binding, vnode) {\n    var targets = bindTargets(vnode, binding, listenTypes, handleTargets);\n\n    if (isBrowser && vnode.context && targets.length > 0) {\n      // Add targets array to element\n      el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n      el[BV_TOGGLE_CONTROLS] = targets.join(' '); // State is initially collapsed until we receive a state event\n\n      el[BV_TOGGLE_STATE] = false;\n      setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n      setAttr(el, 'aria-expanded', 'false'); // If element is not a button, we add `role=\"button\"` for accessibility\n\n      if (el.tagName !== 'BUTTON') {\n        setAttr(el, 'role', 'button');\n      } // Toggle state handler\n\n\n      var toggleDirectiveHandler = function toggleDirectiveHandler(id, state) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n\n        if (targets.indexOf(id) !== -1) {\n          // Set aria-expanded state\n          setAttr(el, 'aria-expanded', state ? 'true' : 'false'); // Set/Clear 'collapsed' class state\n\n          el[BV_TOGGLE_STATE] = state;\n\n          if (state) {\n            removeClass(el, 'collapsed');\n          } else {\n            addClass(el, 'collapsed');\n          }\n        }\n      }; // Store the toggle handler on the element\n\n\n      el[BV_TOGGLE] = toggleDirectiveHandler; // Listen for toggle state changes (public)\n\n      vnode.context.$root.$on(EVENT_STATE, el[BV_TOGGLE]); // Listen for toggle state sync (private)\n\n      vnode.context.$root.$on(EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    }\n  },\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n  unbind: function unbind(el, binding, vnode)\n  /* istanbul ignore next */\n  {\n    unbindTargets(vnode, binding, listenTypes); // Remove our $root listener\n\n    if (el[BV_TOGGLE]) {\n      vnode.context.$root.$off(EVENT_STATE, el[BV_TOGGLE]);\n      vnode.context.$root.$off(EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    } // Reset custom  props\n\n\n    resetProp(el, BV_TOGGLE);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_CONTROLS);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs\n\n    removeClass(el, 'collapsed');\n    removeAttr(el, 'aria-expanded');\n    removeAttr(el, 'aria-controls');\n    removeAttr(el, 'role');\n  }\n};\nexport default VBToggle;"]},"metadata":{},"sourceType":"module"}