{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport { isArray, isObject } from './inspect';\n/**\n * Get property defined by dot/array notation in string.\n *\n * @link https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf#gistcomment-1935901\n *\n * @param {Object} obj\n * @param {string|Array} path\n * @param {*} defaultValue (optional)\n * @return {*}\n */\n\nvar get = function get(obj, path) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null; // Handle array of path values\n\n  path = isArray(path) ? path.join('.') : path; // If no path or no object passed\n\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  } // Handle edge case where user has dot(s) in top-level item field key\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2762\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  if (path in obj) {\n    return obj[path];\n  } // Handle string array notation (numeric indices only)\n\n\n  path = String(path).replace(/\\[(\\d+)]/g, '.$1');\n  var steps = path.split('.').filter(Boolean); // Handle case where someone passes a string of only dots\n\n  if (steps.length === 0) {\n    return defaultValue;\n  } // Traverse path in object to find result\n  // We use `!=` vs `!==` to test for both `null` and `undefined`\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  return steps.every(function (step) {\n    return isObject(obj) && step in obj && (obj = obj[step]) != null;\n  }) ? obj : defaultValue;\n};\n\nexport default get;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/utils/get.js"],"names":["isArray","isObject","get","obj","path","defaultValue","arguments","length","undefined","join","String","replace","steps","split","filter","Boolean","every","step"],"mappings":";;;;;;AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,WAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAaC,GAAb,EAAkBC,IAAlB,EAAwB;AAChC,MAAIC,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAvF,CADgC,CAEhC;;AACAF,EAAAA,IAAI,GAAGJ,OAAO,CAACI,IAAD,CAAP,GAAgBA,IAAI,CAACK,IAAL,CAAU,GAAV,CAAhB,GAAiCL,IAAxC,CAHgC,CAGc;;AAE9C,MAAI,CAACA,IAAD,IAAS,CAACH,QAAQ,CAACE,GAAD,CAAtB,EAA6B;AAC3B,WAAOE,YAAP;AACD,GAP+B,CAO9B;AACF;AACA;AACA;;;AAGA,MAAID,IAAI,IAAID,GAAZ,EAAiB;AACf,WAAOA,GAAG,CAACC,IAAD,CAAV;AACD,GAf+B,CAe9B;;;AAGFA,EAAAA,IAAI,GAAGM,MAAM,CAACN,IAAD,CAAN,CAAaO,OAAb,CAAqB,WAArB,EAAkC,KAAlC,CAAP;AACA,MAAIC,KAAK,GAAGR,IAAI,CAACS,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CAAZ,CAnBgC,CAmBa;;AAE7C,MAAIH,KAAK,CAACL,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAOF,YAAP;AACD,GAvB+B,CAuB9B;AACF;AACA;AACA;;;AAGA,SAAOO,KAAK,CAACI,KAAN,CAAY,UAAUC,IAAV,EAAgB;AACjC,WAAOhB,QAAQ,CAACE,GAAD,CAAR,IAAiBc,IAAI,IAAId,GAAzB,IAAgC,CAACA,GAAG,GAAGA,GAAG,CAACc,IAAD,CAAV,KAAqB,IAA5D;AACD,GAFM,IAEFd,GAFE,GAEIE,YAFX;AAGD,CAhCD;;AAkCA,eAAeH,GAAf","sourcesContent":["import { isArray, isObject } from './inspect';\n/**\n * Get property defined by dot/array notation in string.\n *\n * @link https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf#gistcomment-1935901\n *\n * @param {Object} obj\n * @param {string|Array} path\n * @param {*} defaultValue (optional)\n * @return {*}\n */\n\nvar get = function get(obj, path) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  // Handle array of path values\n  path = isArray(path) ? path.join('.') : path; // If no path or no object passed\n\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  } // Handle edge case where user has dot(s) in top-level item field key\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2762\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  if (path in obj) {\n    return obj[path];\n  } // Handle string array notation (numeric indices only)\n\n\n  path = String(path).replace(/\\[(\\d+)]/g, '.$1');\n  var steps = path.split('.').filter(Boolean); // Handle case where someone passes a string of only dots\n\n  if (steps.length === 0) {\n    return defaultValue;\n  } // Traverse path in object to find result\n  // We use `!=` vs `!==` to test for both `null` and `undefined`\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  return steps.every(function (step) {\n    return isObject(obj) && step in obj && (obj = obj[step]) != null;\n  }) ? obj : defaultValue;\n};\n\nexport default get;"]},"metadata":{},"sourceType":"module"}