{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport { stripTags } from '../utils/html';\nimport { isArray, isPlainObject, isUndefined } from '../utils/inspect';\nimport { keys } from '../utils/object'; // @vue/component\n\nexport default {\n  props: {\n    options: {\n      type: [Array, Object],\n      default: function _default() {\n        return [];\n      }\n    },\n    valueField: {\n      type: String,\n      default: 'value'\n    },\n    textField: {\n      type: String,\n      default: 'text'\n    },\n    htmlField: {\n      type: String,\n      default: 'html'\n    },\n    disabledField: {\n      type: String,\n      default: 'disabled'\n    }\n  },\n  computed: {\n    formOptions: function formOptions() {\n      var options = this.options;\n      var valueField = this.valueField;\n      var textField = this.textField;\n      var htmlField = this.htmlField;\n      var disabledField = this.disabledField;\n\n      if (isArray(options)) {\n        // Normalize flat-ish arrays to Array of Objects\n        return options.map(function (option) {\n          if (isPlainObject(option)) {\n            var value = option[valueField];\n            var text = String(option[textField]);\n            return {\n              value: isUndefined(value) ? text : value,\n              text: stripTags(text),\n              html: option[htmlField],\n              disabled: Boolean(option[disabledField])\n            };\n          }\n\n          return {\n            value: option,\n            text: stripTags(String(option)),\n            disabled: false\n          };\n        });\n      } else {\n        // options is Object\n        // Normalize Objects to Array of Objects\n        return keys(options).map(function (key) {\n          var option = options[key] || {};\n\n          if (isPlainObject(option)) {\n            var value = option[valueField];\n            var text = option[textField];\n            return {\n              value: isUndefined(value) ? key : value,\n              text: isUndefined(text) ? stripTags(String(key)) : stripTags(String(text)),\n              html: option[htmlField],\n              disabled: Boolean(option[disabledField])\n            };\n          }\n\n          return {\n            value: key,\n            text: stripTags(String(option)),\n            disabled: false\n          };\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/mixins/form-options.js"],"names":["stripTags","isArray","isPlainObject","isUndefined","keys","props","options","type","Array","Object","default","_default","valueField","String","textField","htmlField","disabledField","computed","formOptions","map","option","value","text","html","disabled","Boolean","key"],"mappings":"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","sourcesContent":["import { stripTags } from '../utils/html';\nimport { isArray, isPlainObject, isUndefined } from '../utils/inspect';\nimport { keys } from '../utils/object'; // @vue/component\n\nexport default {\n  props: {\n    options: {\n      type: [Array, Object],\n      default: function _default() {\n        return [];\n      }\n    },\n    valueField: {\n      type: String,\n      default: 'value'\n    },\n    textField: {\n      type: String,\n      default: 'text'\n    },\n    htmlField: {\n      type: String,\n      default: 'html'\n    },\n    disabledField: {\n      type: String,\n      default: 'disabled'\n    }\n  },\n  computed: {\n    formOptions: function formOptions() {\n      var options = this.options;\n      var valueField = this.valueField;\n      var textField = this.textField;\n      var htmlField = this.htmlField;\n      var disabledField = this.disabledField;\n\n      if (isArray(options)) {\n        // Normalize flat-ish arrays to Array of Objects\n        return options.map(function (option) {\n          if (isPlainObject(option)) {\n            var value = option[valueField];\n            var text = String(option[textField]);\n            return {\n              value: isUndefined(value) ? text : value,\n              text: stripTags(text),\n              html: option[htmlField],\n              disabled: Boolean(option[disabledField])\n            };\n          }\n\n          return {\n            value: option,\n            text: stripTags(String(option)),\n            disabled: false\n          };\n        });\n      } else {\n        // options is Object\n        // Normalize Objects to Array of Objects\n        return keys(options).map(function (key) {\n          var option = options[key] || {};\n\n          if (isPlainObject(option)) {\n            var value = option[valueField];\n            var text = option[textField];\n            return {\n              value: isUndefined(value) ? key : value,\n              text: isUndefined(text) ? stripTags(String(key)) : stripTags(String(text)),\n              html: option[htmlField],\n              disabled: Boolean(option[disabledField])\n            };\n          }\n\n          return {\n            value: key,\n            text: stripTags(String(option)),\n            disabled: false\n          };\n        });\n      }\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}