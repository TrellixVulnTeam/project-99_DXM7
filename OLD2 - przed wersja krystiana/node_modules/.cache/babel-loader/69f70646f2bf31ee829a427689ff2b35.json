{"ast":null,"code":"import cloneDeep from '../../../utils/clone-deep';\nimport looseEqual from '../../../utils/loose-equal';\nimport warn from '../../../utils/warn';\nimport { concat } from '../../../utils/array';\nimport { isFunction, isString, isRegExp } from '../../../utils/inspect';\nimport stringifyRecordValues from './stringify-record-values';\nvar DEPRECATION_MSG = 'Supplying a function to prop \"filter\" is deprecated. Use \"filter-function\" instead.';\nexport default {\n  props: {\n    filter: {\n      // Passing a function to filter is deprecated and should be avoided\n      type: [String, RegExp, Object, Array, Function],\n      default: null,\n      // `deprecated` -> Don't use this prop\n      // `deprecation` -> Refers to a change in prop usage\n      deprecation: DEPRECATION_MSG\n    },\n    filterFunction: {\n      type: Function,\n      default: null\n    },\n    filterIgnoredFields: {\n      type: Array // default: undefined\n\n    },\n    filterIncludedFields: {\n      type: Array // default: undefined\n\n    }\n  },\n  data: function data() {\n    return {\n      // Flag for displaying which empty slot to show and some event triggering\n      isFiltered: false\n    };\n  },\n  computed: {\n    computedFilterIgnored: function computedFilterIgnored() {\n      return this.filterIgnoredFields ? concat(this.filterIgnoredFields).filter(Boolean) : null;\n    },\n    computedFilterIncluded: function computedFilterIncluded() {\n      return this.filterIncludedFields ? concat(this.filterIncludedFields).filter(Boolean) : null;\n    },\n    localFiltering: function localFiltering() {\n      return this.hasProvider ? !!this.noProviderFiltering : true;\n    },\n    // For watching changes to `filteredItems` vs `localItems`\n    filteredCheck: function filteredCheck() {\n      return {\n        filteredItems: this.filteredItems,\n        localItems: this.localItems,\n        localFilter: this.localFilter\n      };\n    },\n    // Sanitized/normalized version of filter prop\n    localFilter: function localFilter() {\n      // Deprecate setting prop filter to a function\n      // `localFilterFn` will contain the correct function ref\n      if (isFunction(this.filter)) {\n        /* istanbul ignore next */\n        return '';\n      } // Using internal filter function, which only accepts string or RegExp\n\n\n      if (this.localFiltering && !isFunction(this.filterFunction) && !(isString(this.filter) || isRegExp(this.filter))) {\n        return '';\n      } // Could be a string, object or array, as needed by external filter function\n      // We use `cloneDeep` to ensure we have a new copy of an object or array\n      // without Vue reactive observers\n\n\n      return cloneDeep(this.filter);\n    },\n    // Sanitized/normalize filter-function prop\n    localFilterFn: function localFilterFn() {\n      var filterFn = this.filterFunction;\n      var filter = this.filter; // Prefer `filterFn` prop\n\n      if (isFunction(filterFn)) {\n        return filterFn;\n      } // Deprecate setting `filter` prop to a function\n\n\n      if (isFunction(filter)) {\n        /* istanbul ignore next */\n        warn(\"b-table: \".concat(DEPRECATION_MSG));\n        /* istanbul ignore next */\n\n        return filter;\n      } // No `filterFunction`, so signal to use internal filter function\n\n\n      return null;\n    },\n    // Returns the records in `localItems` that match the filter criteria\n    // Returns the original `localItems` array if not sorting\n    filteredItems: function filteredItems() {\n      var items = this.localItems || []; // Resolve the filtering function, when requested\n      // We prefer the provided filtering function and fallback to the internal one\n      // When no filtering criteria is specified the filtering factories will return `null`\n\n      var filterFn = null;\n\n      if (this.localFiltering) {\n        var criteria = this.localFilter;\n        filterFn = this.filterFnFactory(this.localFilterFn, criteria) || this.defaultFilterFnFactory(criteria);\n      } // We only do local filtering when requested and there are records to filter\n\n\n      if (filterFn && items.length > 0) {\n        return items.filter(filterFn);\n      } // Otherwise return all items\n\n\n      return items;\n    }\n  },\n  watch: {\n    // Watch for changes to the filter criteria and filtered items vs localItems).\n    // And set visual state and emit events as required\n    filteredCheck: function filteredCheck(_ref) {\n      var filteredItems = _ref.filteredItems,\n          localItems = _ref.localItems,\n          localFilter = _ref.localFilter; // Determine if the dataset is filtered or not\n\n      var isFiltered = false;\n\n      if (!localFilter) {\n        // If filter criteria is falsey\n        isFiltered = false;\n      } else if (looseEqual(localFilter, []) || looseEqual(localFilter, {})) {\n        // If filter criteria is an empty array or object\n        isFiltered = false;\n      } else if (localFilter) {\n        // If filter criteria is truthy\n        isFiltered = true;\n      }\n\n      if (isFiltered) {\n        this.$emit('filtered', filteredItems, filteredItems.length);\n      }\n\n      this.isFiltered = isFiltered;\n    },\n    isFiltered: function isFiltered(newVal, oldVal) {\n      if (newVal === false && oldVal === true) {\n        // We need to emit a filtered event if isFiltered transitions from true to\n        // false so that users can update their pagination controls.\n        this.$emit('filtered', this.localItems, this.localItems.length);\n      }\n    }\n  },\n  created: function created() {\n    var _this = this; // Set the initial filtered state.\n    // In a nextTick so that we trigger a filtered event if needed\n\n\n    this.$nextTick(function () {\n      _this.isFiltered = Boolean(_this.localFilter);\n    });\n  },\n  methods: {\n    // Filter Function factories\n    filterFnFactory: function filterFnFactory(filterFn, criteria) {\n      // Wrapper factory for external filter functions\n      // Wrap the provided filter-function and return a new function\n      // Returns `null` if no filter-function defined or if criteria is falsey\n      // Rather than directly grabbing `this.computedLocalFilterFn` or `this.filterFunction`\n      // we have it passed, so that the caller computed prop will be reactive to changes\n      // in the original filter-function (as this routine is a method)\n      if (!filterFn || !isFunction(filterFn) || !criteria || looseEqual(criteria, []) || looseEqual(criteria, {})) {\n        return null;\n      } // Build the wrapped filter test function, passing the criteria to the provided function\n\n\n      var fn = function fn(item) {\n        // Generated function returns true if the criteria matches part\n        // of the serialized data, otherwise false\n        return filterFn(item, criteria);\n      }; // Return the wrapped function\n\n\n      return fn;\n    },\n    defaultFilterFnFactory: function defaultFilterFnFactory(criteria) {\n      var _this2 = this; // Generates the default filter function, using the given filter criteria\n\n\n      if (!criteria || !(isString(criteria) || isRegExp(criteria))) {\n        // Built in filter can only support strings or RegExp criteria (at the moment)\n        return null;\n      } // Build the regexp needed for filtering\n\n\n      var regexp = criteria;\n\n      if (isString(regexp)) {\n        // Escape special `RegExp` characters in the string and convert contiguous\n        // whitespace to `\\s+` matches\n        var pattern = criteria.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&').replace(/[\\s\\uFEFF\\xA0]+/g, '\\\\s+'); // Build the `RegExp` (no need for global flag, as we only need\n        // to find the value once in the string)\n\n        regexp = new RegExp(\".*\".concat(pattern, \".*\"), 'i');\n      } // Generate the wrapped filter test function to use\n\n\n      var fn = function fn(item) {\n        // This searches all row values (and sub property values) in the entire (excluding\n        // special `_` prefixed keys), because we convert the record to a space-separated\n        // string containing all the value properties (recursively), even ones that are\n        // not visible (not specified in this.fields)\n        // Users can ignore filtering on specific fields, or on only certain fields,\n        // and can optionall specify searching results of fields with formatter\n        //\n        // TODO: Enable searching on scoped slots\n        //\n        // Generated function returns true if the criteria matches part of\n        // the serialized data, otherwise false\n        // We set `lastIndex = 0` on the `RegExp` in case someone specifies the `/g` global flag\n        regexp.lastIndex = 0;\n        return regexp.test(stringifyRecordValues(item, _this2.computedFilterIgnored, _this2.computedFilterIncluded, _this2.computedFieldsObj));\n      }; // Return the generated function\n\n\n      return fn;\n    }\n  }\n};","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-filtering.js"],"names":["cloneDeep","looseEqual","warn","concat","isFunction","isString","isRegExp","stringifyRecordValues","DEPRECATION_MSG","props","filter","type","String","RegExp","Object","Array","Function","default","deprecation","filterFunction","filterIgnoredFields","filterIncludedFields","data","isFiltered","computed","computedFilterIgnored","Boolean","computedFilterIncluded","localFiltering","hasProvider","noProviderFiltering","filteredCheck","filteredItems","localItems","localFilter","localFilterFn","filterFn","items","criteria","filterFnFactory","defaultFilterFnFactory","length","watch","_ref","$emit","newVal","oldVal","created","_this","$nextTick","methods","fn","item","_this2","regexp","pattern","replace","lastIndex","test","computedFieldsObj"],"mappings":"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","sourcesContent":["import cloneDeep from '../../../utils/clone-deep';\nimport looseEqual from '../../../utils/loose-equal';\nimport warn from '../../../utils/warn';\nimport { concat } from '../../../utils/array';\nimport { isFunction, isString, isRegExp } from '../../../utils/inspect';\nimport stringifyRecordValues from './stringify-record-values';\nvar DEPRECATION_MSG = 'Supplying a function to prop \"filter\" is deprecated. Use \"filter-function\" instead.';\nexport default {\n  props: {\n    filter: {\n      // Passing a function to filter is deprecated and should be avoided\n      type: [String, RegExp, Object, Array, Function],\n      default: null,\n      // `deprecated` -> Don't use this prop\n      // `deprecation` -> Refers to a change in prop usage\n      deprecation: DEPRECATION_MSG\n    },\n    filterFunction: {\n      type: Function,\n      default: null\n    },\n    filterIgnoredFields: {\n      type: Array // default: undefined\n\n    },\n    filterIncludedFields: {\n      type: Array // default: undefined\n\n    }\n  },\n  data: function data() {\n    return {\n      // Flag for displaying which empty slot to show and some event triggering\n      isFiltered: false\n    };\n  },\n  computed: {\n    computedFilterIgnored: function computedFilterIgnored() {\n      return this.filterIgnoredFields ? concat(this.filterIgnoredFields).filter(Boolean) : null;\n    },\n    computedFilterIncluded: function computedFilterIncluded() {\n      return this.filterIncludedFields ? concat(this.filterIncludedFields).filter(Boolean) : null;\n    },\n    localFiltering: function localFiltering() {\n      return this.hasProvider ? !!this.noProviderFiltering : true;\n    },\n    // For watching changes to `filteredItems` vs `localItems`\n    filteredCheck: function filteredCheck() {\n      return {\n        filteredItems: this.filteredItems,\n        localItems: this.localItems,\n        localFilter: this.localFilter\n      };\n    },\n    // Sanitized/normalized version of filter prop\n    localFilter: function localFilter() {\n      // Deprecate setting prop filter to a function\n      // `localFilterFn` will contain the correct function ref\n      if (isFunction(this.filter)) {\n        /* istanbul ignore next */\n        return '';\n      } // Using internal filter function, which only accepts string or RegExp\n\n\n      if (this.localFiltering && !isFunction(this.filterFunction) && !(isString(this.filter) || isRegExp(this.filter))) {\n        return '';\n      } // Could be a string, object or array, as needed by external filter function\n      // We use `cloneDeep` to ensure we have a new copy of an object or array\n      // without Vue reactive observers\n\n\n      return cloneDeep(this.filter);\n    },\n    // Sanitized/normalize filter-function prop\n    localFilterFn: function localFilterFn() {\n      var filterFn = this.filterFunction;\n      var filter = this.filter; // Prefer `filterFn` prop\n\n      if (isFunction(filterFn)) {\n        return filterFn;\n      } // Deprecate setting `filter` prop to a function\n\n\n      if (isFunction(filter)) {\n        /* istanbul ignore next */\n        warn(\"b-table: \".concat(DEPRECATION_MSG));\n        /* istanbul ignore next */\n\n        return filter;\n      } // No `filterFunction`, so signal to use internal filter function\n\n\n      return null;\n    },\n    // Returns the records in `localItems` that match the filter criteria\n    // Returns the original `localItems` array if not sorting\n    filteredItems: function filteredItems() {\n      var items = this.localItems || []; // Resolve the filtering function, when requested\n      // We prefer the provided filtering function and fallback to the internal one\n      // When no filtering criteria is specified the filtering factories will return `null`\n\n      var filterFn = null;\n\n      if (this.localFiltering) {\n        var criteria = this.localFilter;\n        filterFn = this.filterFnFactory(this.localFilterFn, criteria) || this.defaultFilterFnFactory(criteria);\n      } // We only do local filtering when requested and there are records to filter\n\n\n      if (filterFn && items.length > 0) {\n        return items.filter(filterFn);\n      } // Otherwise return all items\n\n\n      return items;\n    }\n  },\n  watch: {\n    // Watch for changes to the filter criteria and filtered items vs localItems).\n    // And set visual state and emit events as required\n    filteredCheck: function filteredCheck(_ref) {\n      var filteredItems = _ref.filteredItems,\n          localItems = _ref.localItems,\n          localFilter = _ref.localFilter;\n      // Determine if the dataset is filtered or not\n      var isFiltered = false;\n\n      if (!localFilter) {\n        // If filter criteria is falsey\n        isFiltered = false;\n      } else if (looseEqual(localFilter, []) || looseEqual(localFilter, {})) {\n        // If filter criteria is an empty array or object\n        isFiltered = false;\n      } else if (localFilter) {\n        // If filter criteria is truthy\n        isFiltered = true;\n      }\n\n      if (isFiltered) {\n        this.$emit('filtered', filteredItems, filteredItems.length);\n      }\n\n      this.isFiltered = isFiltered;\n    },\n    isFiltered: function isFiltered(newVal, oldVal) {\n      if (newVal === false && oldVal === true) {\n        // We need to emit a filtered event if isFiltered transitions from true to\n        // false so that users can update their pagination controls.\n        this.$emit('filtered', this.localItems, this.localItems.length);\n      }\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    // Set the initial filtered state.\n    // In a nextTick so that we trigger a filtered event if needed\n    this.$nextTick(function () {\n      _this.isFiltered = Boolean(_this.localFilter);\n    });\n  },\n  methods: {\n    // Filter Function factories\n    filterFnFactory: function filterFnFactory(filterFn, criteria) {\n      // Wrapper factory for external filter functions\n      // Wrap the provided filter-function and return a new function\n      // Returns `null` if no filter-function defined or if criteria is falsey\n      // Rather than directly grabbing `this.computedLocalFilterFn` or `this.filterFunction`\n      // we have it passed, so that the caller computed prop will be reactive to changes\n      // in the original filter-function (as this routine is a method)\n      if (!filterFn || !isFunction(filterFn) || !criteria || looseEqual(criteria, []) || looseEqual(criteria, {})) {\n        return null;\n      } // Build the wrapped filter test function, passing the criteria to the provided function\n\n\n      var fn = function fn(item) {\n        // Generated function returns true if the criteria matches part\n        // of the serialized data, otherwise false\n        return filterFn(item, criteria);\n      }; // Return the wrapped function\n\n\n      return fn;\n    },\n    defaultFilterFnFactory: function defaultFilterFnFactory(criteria) {\n      var _this2 = this;\n\n      // Generates the default filter function, using the given filter criteria\n      if (!criteria || !(isString(criteria) || isRegExp(criteria))) {\n        // Built in filter can only support strings or RegExp criteria (at the moment)\n        return null;\n      } // Build the regexp needed for filtering\n\n\n      var regexp = criteria;\n\n      if (isString(regexp)) {\n        // Escape special `RegExp` characters in the string and convert contiguous\n        // whitespace to `\\s+` matches\n        var pattern = criteria.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&').replace(/[\\s\\uFEFF\\xA0]+/g, '\\\\s+'); // Build the `RegExp` (no need for global flag, as we only need\n        // to find the value once in the string)\n\n        regexp = new RegExp(\".*\".concat(pattern, \".*\"), 'i');\n      } // Generate the wrapped filter test function to use\n\n\n      var fn = function fn(item) {\n        // This searches all row values (and sub property values) in the entire (excluding\n        // special `_` prefixed keys), because we convert the record to a space-separated\n        // string containing all the value properties (recursively), even ones that are\n        // not visible (not specified in this.fields)\n        // Users can ignore filtering on specific fields, or on only certain fields,\n        // and can optionall specify searching results of fields with formatter\n        //\n        // TODO: Enable searching on scoped slots\n        //\n        // Generated function returns true if the criteria matches part of\n        // the serialized data, otherwise false\n        // We set `lastIndex = 0` on the `RegExp` in case someone specifies the `/g` global flag\n        regexp.lastIndex = 0;\n        return regexp.test(stringifyRecordValues(item, _this2.computedFilterIgnored, _this2.computedFilterIncluded, _this2.computedFieldsObj));\n      }; // Return the generated function\n\n\n      return fn;\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}