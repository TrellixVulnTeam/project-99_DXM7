{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport startCase from '../../../utils/startcase';\nimport { isArray, isFunction, isObject, isString } from '../../../utils/inspect';\nimport { keys } from '../../../utils/object';\nimport { IGNORED_FIELD_KEYS } from './constants'; // Private function to massage field entry into common object format\n\nvar processField = function processField(key, value) {\n  var field = null;\n\n  if (isString(value)) {\n    // Label shortcut\n    field = {\n      key: key,\n      label: value\n    };\n  } else if (isFunction(value)) {\n    // Formatter shortcut\n    field = {\n      key: key,\n      formatter: value\n    };\n  } else if (isObject(value)) {\n    field = _objectSpread({}, value);\n    field.key = field.key || key;\n  } else if (value !== false) {\n    // Fallback to just key\n\n    /* istanbul ignore next */\n    field = {\n      key: key\n    };\n  }\n\n  return field;\n}; // We normalize fields into an array of objects\n// [ { key:..., label:..., ...}, {...}, ..., {..}]\n\n\nvar normalizeFields = function normalizeFields(origFields, items) {\n  var fields = [];\n\n  if (isArray(origFields)) {\n    // Normalize array Form\n    origFields.filter(function (f) {\n      return f;\n    }).forEach(function (f) {\n      if (isString(f)) {\n        fields.push({\n          key: f,\n          label: startCase(f)\n        });\n      } else if (isObject(f) && f.key && isString(f.key)) {\n        // Full object definition. We use assign so that we don't mutate the original\n        fields.push(_objectSpread({}, f));\n      } else if (isObject(f) && keys(f).length === 1) {\n        // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }\n        var key = keys(f)[0];\n        var field = processField(key, f[key]);\n\n        if (field) {\n          fields.push(field);\n        }\n      }\n    });\n  } else if (origFields && isObject(origFields) && keys(origFields).length > 0) {\n    // Normalize object Form (deprecated)\n    keys(origFields).forEach(function (key) {\n      var field = processField(key, origFields[key]);\n\n      if (field) {\n        fields.push(field);\n      }\n    });\n  } // If no field provided, take a sample from first record (if exits)\n\n\n  if (fields.length === 0 && isArray(items) && items.length > 0) {\n    var sample = items[0];\n    keys(sample).forEach(function (k) {\n      if (!IGNORED_FIELD_KEYS[k]) {\n        fields.push({\n          key: k,\n          label: startCase(k)\n        });\n      }\n    });\n  } // Ensure we have a unique array of fields and that they have String labels\n\n\n  var memo = {};\n  return fields.filter(function (f) {\n    if (!memo[f.key]) {\n      memo[f.key] = true;\n      f.label = isString(f.label) ? f.label : startCase(f.key);\n      return true;\n    }\n\n    return false;\n  });\n};\n\nexport default normalizeFields;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/components/table/helpers/normalize-fields.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","startCase","isArray","isFunction","isObject","isString","IGNORED_FIELD_KEYS","processField","field","label","formatter","normalizeFields","origFields","items","fields","f","sample","k","memo"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport startCase from '../../../utils/startcase';\nimport { isArray, isFunction, isObject, isString } from '../../../utils/inspect';\nimport { keys } from '../../../utils/object';\nimport { IGNORED_FIELD_KEYS } from './constants'; // Private function to massage field entry into common object format\n\nvar processField = function processField(key, value) {\n  var field = null;\n\n  if (isString(value)) {\n    // Label shortcut\n    field = {\n      key: key,\n      label: value\n    };\n  } else if (isFunction(value)) {\n    // Formatter shortcut\n    field = {\n      key: key,\n      formatter: value\n    };\n  } else if (isObject(value)) {\n    field = _objectSpread({}, value);\n    field.key = field.key || key;\n  } else if (value !== false) {\n    // Fallback to just key\n\n    /* istanbul ignore next */\n    field = {\n      key: key\n    };\n  }\n\n  return field;\n}; // We normalize fields into an array of objects\n// [ { key:..., label:..., ...}, {...}, ..., {..}]\n\n\nvar normalizeFields = function normalizeFields(origFields, items) {\n  var fields = [];\n\n  if (isArray(origFields)) {\n    // Normalize array Form\n    origFields.filter(function (f) {\n      return f;\n    }).forEach(function (f) {\n      if (isString(f)) {\n        fields.push({\n          key: f,\n          label: startCase(f)\n        });\n      } else if (isObject(f) && f.key && isString(f.key)) {\n        // Full object definition. We use assign so that we don't mutate the original\n        fields.push(_objectSpread({}, f));\n      } else if (isObject(f) && keys(f).length === 1) {\n        // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }\n        var key = keys(f)[0];\n        var field = processField(key, f[key]);\n\n        if (field) {\n          fields.push(field);\n        }\n      }\n    });\n  } else if (origFields && isObject(origFields) && keys(origFields).length > 0) {\n    // Normalize object Form (deprecated)\n    keys(origFields).forEach(function (key) {\n      var field = processField(key, origFields[key]);\n\n      if (field) {\n        fields.push(field);\n      }\n    });\n  } // If no field provided, take a sample from first record (if exits)\n\n\n  if (fields.length === 0 && isArray(items) && items.length > 0) {\n    var sample = items[0];\n    keys(sample).forEach(function (k) {\n      if (!IGNORED_FIELD_KEYS[k]) {\n        fields.push({\n          key: k,\n          label: startCase(k)\n        });\n      }\n    });\n  } // Ensure we have a unique array of fields and that they have String labels\n\n\n  var memo = {};\n  return fields.filter(function (f) {\n    if (!memo[f.key]) {\n      memo[f.key] = true;\n      f.label = isString(f.label) ? f.label : startCase(f.key);\n      return true;\n    }\n\n    return false;\n  });\n};\n\nexport default normalizeFields;"]},"metadata":{},"sourceType":"module"}