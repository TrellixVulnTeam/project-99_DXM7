{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport OurVue from './vue';\nimport cloneDeep from './clone-deep';\nimport get from './get';\nimport warn from './warn';\nimport { isArray, isPlainObject, isString, isUndefined } from './inspect';\nimport { getOwnPropertyNames, hasOwnProperty } from './object';\nimport DEFAULTS from './config-defaults'; // --- Constants ---\n\nvar PROP_NAME = '$bvConfig'; // Config manager class\n\nvar BvConfig = /*#__PURE__*/function () {\n  function BvConfig() {\n    _classCallCheck(this, BvConfig); // TODO: pre-populate with default config values (needs updated tests)\n    // this.$_config = cloneDeep(DEFAULTS)\n\n\n    this.$_config = {};\n    this.$_cachedBreakpoints = null;\n  }\n\n  _createClass(BvConfig, [{\n    key: \"getDefaults\",\n    // Returns the defaults\n    value: function getDefaults()\n    /* istanbul ignore next */\n    {\n      return this.defaults;\n    } // Method to merge in user config parameters\n\n  }, {\n    key: \"setConfig\",\n    value: function setConfig() {\n      var _this = this;\n\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!isPlainObject(config)) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      var configKeys = getOwnPropertyNames(config);\n      configKeys.forEach(function (cmpName) {\n        /* istanbul ignore next */\n        if (!hasOwnProperty(DEFAULTS, cmpName)) {\n          warn(\"config: unknown config property \\\"\".concat(cmpName, \"\\\"\"));\n          return;\n        }\n\n        var cmpConfig = config[cmpName];\n\n        if (cmpName === 'breakpoints') {\n          // Special case for breakpoints\n          var breakpoints = config.breakpoints;\n          /* istanbul ignore if */\n\n          if (!isArray(breakpoints) || breakpoints.length < 2 || breakpoints.some(function (b) {\n            return !isString(b) || b.length === 0;\n          })) {\n            warn('config: \"breakpoints\" must be an array of at least 2 breakpoint names');\n          } else {\n            _this.$_config.breakpoints = cloneDeep(breakpoints);\n          }\n        } else if (isPlainObject(cmpConfig)) {\n          // Component prop defaults\n          var props = getOwnPropertyNames(cmpConfig);\n          props.forEach(function (prop) {\n            /* istanbul ignore if */\n            if (!hasOwnProperty(DEFAULTS[cmpName], prop)) {\n              warn(\"config: unknown config property \\\"\".concat(cmpName, \".\").concat(prop, \"\\\"\"));\n            } else {\n              // TODO: If we pre-populate the config with defaults, we can skip this line\n              _this.$_config[cmpName] = _this.$_config[cmpName] || {};\n\n              if (!isUndefined(cmpConfig[prop])) {\n                _this.$_config[cmpName][prop] = cloneDeep(cmpConfig[prop]);\n              }\n            }\n          });\n        }\n      });\n    } // Clear the config. For testing purposes only\n\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      this.$_config = {};\n    } // Returns a deep copy of the user config\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return cloneDeep(this.$_config);\n    }\n  }, {\n    key: \"getConfigValue\",\n    value: function getConfigValue(key) {\n      // First we try the user config, and if key not found we fall back to default value\n      // NOTE: If we deep clone DEFAULTS into config, then we can skip the fallback for get\n      return cloneDeep(get(this.$_config, key, get(DEFAULTS, key)));\n    }\n  }, {\n    key: \"defaults\",\n    get: function get()\n    /* istanbul ignore next */\n    {\n      return DEFAULTS;\n    }\n  }], [{\n    key: \"Defaults\",\n    get: function get()\n    /* istanbul ignore next */\n    {\n      return DEFAULTS;\n    }\n  }]);\n\n  return BvConfig;\n}(); // Method for applying a global config\n\n\nexport var setConfig = function setConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var Vue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : OurVue; // Ensure we have a $bvConfig Object on the Vue prototype.\n  // We set on Vue and OurVue just in case consumer has not set an alias of `vue`.\n\n  Vue.prototype[PROP_NAME] = OurVue.prototype[PROP_NAME] = Vue.prototype[PROP_NAME] || OurVue.prototype[PROP_NAME] || new BvConfig(); // Apply the config values\n\n  Vue.prototype[PROP_NAME].setConfig(config);\n}; // Method for resetting the user config. Exported for testing purposes only.\n\nexport var resetConfig = function resetConfig() {\n  if (OurVue.prototype[PROP_NAME] && OurVue.prototype[PROP_NAME].resetConfig) {\n    OurVue.prototype[PROP_NAME].resetConfig();\n  }\n};","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/utils/config-set.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","OurVue","cloneDeep","get","warn","isArray","isPlainObject","isString","isUndefined","getOwnPropertyNames","hasOwnProperty","DEFAULTS","PROP_NAME","BvConfig","$_config","$_cachedBreakpoints","value","getDefaults","defaults","setConfig","_this","config","arguments","undefined","configKeys","forEach","cmpName","concat","cmpConfig","breakpoints","some","b","prop","resetConfig","getConfig","getConfigValue","Vue"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport OurVue from './vue';\nimport cloneDeep from './clone-deep';\nimport get from './get';\nimport warn from './warn';\nimport { isArray, isPlainObject, isString, isUndefined } from './inspect';\nimport { getOwnPropertyNames, hasOwnProperty } from './object';\nimport DEFAULTS from './config-defaults'; // --- Constants ---\n\nvar PROP_NAME = '$bvConfig'; // Config manager class\n\nvar BvConfig =\n/*#__PURE__*/\nfunction () {\n  function BvConfig() {\n    _classCallCheck(this, BvConfig);\n\n    // TODO: pre-populate with default config values (needs updated tests)\n    // this.$_config = cloneDeep(DEFAULTS)\n    this.$_config = {};\n    this.$_cachedBreakpoints = null;\n  }\n\n  _createClass(BvConfig, [{\n    key: \"getDefaults\",\n    // Returns the defaults\n    value: function getDefaults()\n    /* istanbul ignore next */\n    {\n      return this.defaults;\n    } // Method to merge in user config parameters\n\n  }, {\n    key: \"setConfig\",\n    value: function setConfig() {\n      var _this = this;\n\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!isPlainObject(config)) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      var configKeys = getOwnPropertyNames(config);\n      configKeys.forEach(function (cmpName) {\n        /* istanbul ignore next */\n        if (!hasOwnProperty(DEFAULTS, cmpName)) {\n          warn(\"config: unknown config property \\\"\".concat(cmpName, \"\\\"\"));\n          return;\n        }\n\n        var cmpConfig = config[cmpName];\n\n        if (cmpName === 'breakpoints') {\n          // Special case for breakpoints\n          var breakpoints = config.breakpoints;\n          /* istanbul ignore if */\n\n          if (!isArray(breakpoints) || breakpoints.length < 2 || breakpoints.some(function (b) {\n            return !isString(b) || b.length === 0;\n          })) {\n            warn('config: \"breakpoints\" must be an array of at least 2 breakpoint names');\n          } else {\n            _this.$_config.breakpoints = cloneDeep(breakpoints);\n          }\n        } else if (isPlainObject(cmpConfig)) {\n          // Component prop defaults\n          var props = getOwnPropertyNames(cmpConfig);\n          props.forEach(function (prop) {\n            /* istanbul ignore if */\n            if (!hasOwnProperty(DEFAULTS[cmpName], prop)) {\n              warn(\"config: unknown config property \\\"\".concat(cmpName, \".\").concat(prop, \"\\\"\"));\n            } else {\n              // TODO: If we pre-populate the config with defaults, we can skip this line\n              _this.$_config[cmpName] = _this.$_config[cmpName] || {};\n\n              if (!isUndefined(cmpConfig[prop])) {\n                _this.$_config[cmpName][prop] = cloneDeep(cmpConfig[prop]);\n              }\n            }\n          });\n        }\n      });\n    } // Clear the config. For testing purposes only\n\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      this.$_config = {};\n    } // Returns a deep copy of the user config\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return cloneDeep(this.$_config);\n    }\n  }, {\n    key: \"getConfigValue\",\n    value: function getConfigValue(key) {\n      // First we try the user config, and if key not found we fall back to default value\n      // NOTE: If we deep clone DEFAULTS into config, then we can skip the fallback for get\n      return cloneDeep(get(this.$_config, key, get(DEFAULTS, key)));\n    }\n  }, {\n    key: \"defaults\",\n    get: function get()\n    /* istanbul ignore next */\n    {\n      return DEFAULTS;\n    }\n  }], [{\n    key: \"Defaults\",\n    get: function get()\n    /* istanbul ignore next */\n    {\n      return DEFAULTS;\n    }\n  }]);\n\n  return BvConfig;\n}(); // Method for applying a global config\n\n\nexport var setConfig = function setConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var Vue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : OurVue;\n  // Ensure we have a $bvConfig Object on the Vue prototype.\n  // We set on Vue and OurVue just in case consumer has not set an alias of `vue`.\n  Vue.prototype[PROP_NAME] = OurVue.prototype[PROP_NAME] = Vue.prototype[PROP_NAME] || OurVue.prototype[PROP_NAME] || new BvConfig(); // Apply the config values\n\n  Vue.prototype[PROP_NAME].setConfig(config);\n}; // Method for resetting the user config. Exported for testing purposes only.\n\nexport var resetConfig = function resetConfig() {\n  if (OurVue.prototype[PROP_NAME] && OurVue.prototype[PROP_NAME].resetConfig) {\n    OurVue.prototype[PROP_NAME].resetConfig();\n  }\n};"]},"metadata":{},"sourceType":"module"}