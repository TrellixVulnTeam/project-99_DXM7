{"ast":null,"code":"import Vue from '../../utils/vue';\nimport listenOnRootMixin from '../../mixins/listen-on-root';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nimport { isBrowser } from '../../utils/env';\nimport { addClass, hasClass, removeClass, closest, matches, reflow, getCS, getBCR, eventOn, eventOff } from '../../utils/dom'; // Events we emit on $root\n\nvar EVENT_STATE = 'bv::collapse::state';\nvar EVENT_ACCORDION = 'bv::collapse::accordion'; // Private event we emit on `$root` to ensure the toggle state is\n// always synced. It gets emitted even if the state has not changed!\n// This event is NOT to be documented as people should not be using it\n\nvar EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Events we listen to on `$root`\n\nvar EVENT_TOGGLE = 'bv::toggle::collapse';\nvar EVENT_STATE_REQUEST = 'bv::request::collapse::state'; // Event listener options\n\nvar EventOptions = {\n  passive: true,\n  capture: false // @vue/component\n\n};\nexport var BCollapse = /*#__PURE__*/Vue.extend({\n  name: 'BCollapse',\n  mixins: [listenOnRootMixin, normalizeSlotMixin],\n  model: {\n    prop: 'visible',\n    event: 'input'\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    isNav: {\n      type: Boolean,\n      default: false\n    },\n    accordion: {\n      type: String,\n      default: null\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n  data: function data() {\n    return {\n      show: this.visible,\n      transitioning: false\n    };\n  },\n  computed: {\n    classObject: function classObject() {\n      return {\n        'navbar-collapse': this.isNav,\n        collapse: !this.transitioning,\n        show: this.show && !this.transitioning\n      };\n    }\n  },\n  watch: {\n    visible: function visible(newVal) {\n      if (newVal !== this.show) {\n        this.show = newVal;\n      }\n    },\n    show: function show(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.emitState();\n      }\n    }\n  },\n  created: function created() {\n    this.show = this.visible;\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.show = this.visible; // Listen for toggle events to open/close us\n\n    this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt); // Listen to other collapses for accordion events\n\n    this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);\n\n    if (this.isNav) {\n      // Set up handlers\n      this.setWindowEvents(true);\n      this.handleResize();\n    }\n\n    this.$nextTick(function () {\n      _this.emitState();\n    }); // Listen for \"Sync state\" requests from `v-b-toggle`\n\n    this.listenOnRoot(EVENT_STATE_REQUEST, function (id) {\n      if (id === _this.id) {\n        _this.$nextTick(_this.emitSync);\n      }\n    });\n  },\n  updated: function updated() {\n    // Emit a private event every time this component updates to ensure\n    // the toggle button is in sync with the collapse's state\n    // It is emitted regardless if the visible state changes\n    this.emitSync();\n  },\n  deactivated: function deactivated()\n  /* istanbul ignore next */\n  {\n    if (this.isNav) {\n      this.setWindowEvents(false);\n    }\n  },\n  activated: function activated()\n  /* istanbul ignore next */\n  {\n    if (this.isNav) {\n      this.setWindowEvents(true);\n    }\n\n    this.emitSync();\n  },\n  beforeDestroy: function beforeDestroy() {\n    // Trigger state emit if needed\n    this.show = false;\n\n    if (this.isNav && isBrowser) {\n      this.setWindowEvents(false);\n    }\n  },\n  methods: {\n    setWindowEvents: function setWindowEvents(on) {\n      var method = on ? eventOn : eventOff;\n      method(window, 'resize', this.handleResize, EventOptions);\n      method(window, 'orientationchange', this.handleResize, EventOptions);\n    },\n    toggle: function toggle() {\n      this.show = !this.show;\n    },\n    onEnter: function onEnter(el) {\n      el.style.height = 0;\n      reflow(el);\n      el.style.height = el.scrollHeight + 'px';\n      this.transitioning = true; // This should be moved out so we can add cancellable events\n\n      this.$emit('show');\n    },\n    onAfterEnter: function onAfterEnter(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('shown');\n    },\n    onLeave: function onLeave(el) {\n      el.style.height = 'auto';\n      el.style.display = 'block';\n      el.style.height = getBCR(el).height + 'px';\n      reflow(el);\n      this.transitioning = true;\n      el.style.height = 0; // This should be moved out so we can add cancellable events\n\n      this.$emit('hide');\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('hidden');\n    },\n    emitState: function emitState() {\n      this.$emit('input', this.show); // Let v-b-toggle know the state of this collapse\n\n      this.$root.$emit(EVENT_STATE, this.id, this.show);\n\n      if (this.accordion && this.show) {\n        // Tell the other collapses in this accordion to close\n        this.$root.$emit(EVENT_ACCORDION, this.id, this.accordion);\n      }\n    },\n    emitSync: function emitSync() {\n      // Emit a private event every time this component updates to ensure\n      // the toggle button is in sync with the collapse's state\n      // It is emitted regardless if the visible state changes\n      this.$root.$emit(EVENT_STATE_SYNC, this.id, this.show);\n    },\n    checkDisplayBlock: function checkDisplayBlock() {\n      // Check to see if the collapse has `display: block !important;` set.\n      // We can't set `display: none;` directly on this.$el, as it would\n      // trigger a new transition to start (or cancel a current one).\n      var restore = hasClass(this.$el, 'show');\n      removeClass(this.$el, 'show');\n      var isBlock = getCS(this.$el).display === 'block';\n      restore && addClass(this.$el, 'show');\n      return isBlock;\n    },\n    clickHandler: function clickHandler(evt) {\n      // If we are in a nav/navbar, close the collapse when non-disabled link clicked\n      var el = evt.target;\n\n      if (!this.isNav || !el || getCS(this.$el).display !== 'block') {\n        /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n        return;\n      }\n\n      if (matches(el, '.nav-link,.dropdown-item') || closest('.nav-link,.dropdown-item', el)) {\n        if (!this.checkDisplayBlock()) {\n          // Only close the collapse if it is not forced to be 'display: block !important;'\n          this.show = false;\n        }\n      }\n    },\n    handleToggleEvt: function handleToggleEvt(target) {\n      if (target !== this.id) {\n        return;\n      }\n\n      this.toggle();\n    },\n    handleAccordionEvt: function handleAccordionEvt(openedId, accordion) {\n      if (!this.accordion || accordion !== this.accordion) {\n        return;\n      }\n\n      if (openedId === this.id) {\n        // Open this collapse if not shown\n        if (!this.show) {\n          this.toggle();\n        }\n      } else {\n        // Close this collapse if shown\n        if (this.show) {\n          this.toggle();\n        }\n      }\n    },\n    handleResize: function handleResize() {\n      // Handler for orientation/resize to set collapsed state in nav/navbar\n      this.show = getCS(this.$el).display === 'block';\n    }\n  },\n  render: function render(h) {\n    var content = h(this.tag, {\n      class: this.classObject,\n      directives: [{\n        name: 'show',\n        value: this.show\n      }],\n      attrs: {\n        id: this.id || null\n      },\n      on: {\n        click: this.clickHandler\n      }\n    }, [this.normalizeSlot('default')]);\n    return h('transition', {\n      props: {\n        enterClass: '',\n        enterActiveClass: 'collapsing',\n        enterToClass: '',\n        leaveClass: '',\n        leaveActiveClass: 'collapsing',\n        leaveToClass: ''\n      },\n      on: {\n        enter: this.onEnter,\n        afterEnter: this.onAfterEnter,\n        leave: this.onLeave,\n        afterLeave: this.onAfterLeave\n      }\n    }, [content]);\n  }\n});\nexport default BCollapse;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/components/collapse/collapse.js"],"names":["Vue","listenOnRootMixin","normalizeSlotMixin","isBrowser","addClass","hasClass","removeClass","closest","matches","reflow","getCS","getBCR","eventOn","eventOff","EVENT_STATE","EVENT_ACCORDION","EVENT_STATE_SYNC","EVENT_TOGGLE","EVENT_STATE_REQUEST","EventOptions","passive","capture","BCollapse","extend","name","mixins","model","prop","event","props","id","type","String","required","isNav","Boolean","default","accordion","visible","tag","data","show","transitioning","computed","classObject","collapse","watch","newVal","oldVal","emitState","created","mounted","_this","listenOnRoot","handleToggleEvt","handleAccordionEvt","setWindowEvents","handleResize","$nextTick","emitSync","updated","deactivated","activated","beforeDestroy","methods","on","method","window","toggle","onEnter","el","style","height","scrollHeight","$emit","onAfterEnter","onLeave","display","onAfterLeave","$root","checkDisplayBlock","restore","$el","isBlock","clickHandler","evt","target","openedId","render","h","content","class","directives","value","attrs","click","normalizeSlot","enterClass","enterActiveClass","enterToClass","leaveClass","leaveActiveClass","leaveToClass","enter","afterEnter","leave","afterLeave"],"mappings":"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","sourcesContent":["import Vue from '../../utils/vue';\nimport listenOnRootMixin from '../../mixins/listen-on-root';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nimport { isBrowser } from '../../utils/env';\nimport { addClass, hasClass, removeClass, closest, matches, reflow, getCS, getBCR, eventOn, eventOff } from '../../utils/dom'; // Events we emit on $root\n\nvar EVENT_STATE = 'bv::collapse::state';\nvar EVENT_ACCORDION = 'bv::collapse::accordion'; // Private event we emit on `$root` to ensure the toggle state is\n// always synced. It gets emitted even if the state has not changed!\n// This event is NOT to be documented as people should not be using it\n\nvar EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Events we listen to on `$root`\n\nvar EVENT_TOGGLE = 'bv::toggle::collapse';\nvar EVENT_STATE_REQUEST = 'bv::request::collapse::state'; // Event listener options\n\nvar EventOptions = {\n  passive: true,\n  capture: false // @vue/component\n\n};\nexport var BCollapse =\n/*#__PURE__*/\nVue.extend({\n  name: 'BCollapse',\n  mixins: [listenOnRootMixin, normalizeSlotMixin],\n  model: {\n    prop: 'visible',\n    event: 'input'\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    isNav: {\n      type: Boolean,\n      default: false\n    },\n    accordion: {\n      type: String,\n      default: null\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n  data: function data() {\n    return {\n      show: this.visible,\n      transitioning: false\n    };\n  },\n  computed: {\n    classObject: function classObject() {\n      return {\n        'navbar-collapse': this.isNav,\n        collapse: !this.transitioning,\n        show: this.show && !this.transitioning\n      };\n    }\n  },\n  watch: {\n    visible: function visible(newVal) {\n      if (newVal !== this.show) {\n        this.show = newVal;\n      }\n    },\n    show: function show(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.emitState();\n      }\n    }\n  },\n  created: function created() {\n    this.show = this.visible;\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.show = this.visible; // Listen for toggle events to open/close us\n\n    this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt); // Listen to other collapses for accordion events\n\n    this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);\n\n    if (this.isNav) {\n      // Set up handlers\n      this.setWindowEvents(true);\n      this.handleResize();\n    }\n\n    this.$nextTick(function () {\n      _this.emitState();\n    }); // Listen for \"Sync state\" requests from `v-b-toggle`\n\n    this.listenOnRoot(EVENT_STATE_REQUEST, function (id) {\n      if (id === _this.id) {\n        _this.$nextTick(_this.emitSync);\n      }\n    });\n  },\n  updated: function updated() {\n    // Emit a private event every time this component updates to ensure\n    // the toggle button is in sync with the collapse's state\n    // It is emitted regardless if the visible state changes\n    this.emitSync();\n  },\n  deactivated: function deactivated()\n  /* istanbul ignore next */\n  {\n    if (this.isNav) {\n      this.setWindowEvents(false);\n    }\n  },\n  activated: function activated()\n  /* istanbul ignore next */\n  {\n    if (this.isNav) {\n      this.setWindowEvents(true);\n    }\n\n    this.emitSync();\n  },\n  beforeDestroy: function beforeDestroy() {\n    // Trigger state emit if needed\n    this.show = false;\n\n    if (this.isNav && isBrowser) {\n      this.setWindowEvents(false);\n    }\n  },\n  methods: {\n    setWindowEvents: function setWindowEvents(on) {\n      var method = on ? eventOn : eventOff;\n      method(window, 'resize', this.handleResize, EventOptions);\n      method(window, 'orientationchange', this.handleResize, EventOptions);\n    },\n    toggle: function toggle() {\n      this.show = !this.show;\n    },\n    onEnter: function onEnter(el) {\n      el.style.height = 0;\n      reflow(el);\n      el.style.height = el.scrollHeight + 'px';\n      this.transitioning = true; // This should be moved out so we can add cancellable events\n\n      this.$emit('show');\n    },\n    onAfterEnter: function onAfterEnter(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('shown');\n    },\n    onLeave: function onLeave(el) {\n      el.style.height = 'auto';\n      el.style.display = 'block';\n      el.style.height = getBCR(el).height + 'px';\n      reflow(el);\n      this.transitioning = true;\n      el.style.height = 0; // This should be moved out so we can add cancellable events\n\n      this.$emit('hide');\n    },\n    onAfterLeave: function onAfterLeave(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('hidden');\n    },\n    emitState: function emitState() {\n      this.$emit('input', this.show); // Let v-b-toggle know the state of this collapse\n\n      this.$root.$emit(EVENT_STATE, this.id, this.show);\n\n      if (this.accordion && this.show) {\n        // Tell the other collapses in this accordion to close\n        this.$root.$emit(EVENT_ACCORDION, this.id, this.accordion);\n      }\n    },\n    emitSync: function emitSync() {\n      // Emit a private event every time this component updates to ensure\n      // the toggle button is in sync with the collapse's state\n      // It is emitted regardless if the visible state changes\n      this.$root.$emit(EVENT_STATE_SYNC, this.id, this.show);\n    },\n    checkDisplayBlock: function checkDisplayBlock() {\n      // Check to see if the collapse has `display: block !important;` set.\n      // We can't set `display: none;` directly on this.$el, as it would\n      // trigger a new transition to start (or cancel a current one).\n      var restore = hasClass(this.$el, 'show');\n      removeClass(this.$el, 'show');\n      var isBlock = getCS(this.$el).display === 'block';\n      restore && addClass(this.$el, 'show');\n      return isBlock;\n    },\n    clickHandler: function clickHandler(evt) {\n      // If we are in a nav/navbar, close the collapse when non-disabled link clicked\n      var el = evt.target;\n\n      if (!this.isNav || !el || getCS(this.$el).display !== 'block') {\n        /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n        return;\n      }\n\n      if (matches(el, '.nav-link,.dropdown-item') || closest('.nav-link,.dropdown-item', el)) {\n        if (!this.checkDisplayBlock()) {\n          // Only close the collapse if it is not forced to be 'display: block !important;'\n          this.show = false;\n        }\n      }\n    },\n    handleToggleEvt: function handleToggleEvt(target) {\n      if (target !== this.id) {\n        return;\n      }\n\n      this.toggle();\n    },\n    handleAccordionEvt: function handleAccordionEvt(openedId, accordion) {\n      if (!this.accordion || accordion !== this.accordion) {\n        return;\n      }\n\n      if (openedId === this.id) {\n        // Open this collapse if not shown\n        if (!this.show) {\n          this.toggle();\n        }\n      } else {\n        // Close this collapse if shown\n        if (this.show) {\n          this.toggle();\n        }\n      }\n    },\n    handleResize: function handleResize() {\n      // Handler for orientation/resize to set collapsed state in nav/navbar\n      this.show = getCS(this.$el).display === 'block';\n    }\n  },\n  render: function render(h) {\n    var content = h(this.tag, {\n      class: this.classObject,\n      directives: [{\n        name: 'show',\n        value: this.show\n      }],\n      attrs: {\n        id: this.id || null\n      },\n      on: {\n        click: this.clickHandler\n      }\n    }, [this.normalizeSlot('default')]);\n    return h('transition', {\n      props: {\n        enterClass: '',\n        enterActiveClass: 'collapsing',\n        enterToClass: '',\n        leaveClass: '',\n        leaveActiveClass: 'collapsing',\n        leaveToClass: ''\n      },\n      on: {\n        enter: this.onEnter,\n        afterEnter: this.onAfterEnter,\n        leave: this.onLeave,\n        afterLeave: this.onAfterLeave\n      }\n    }, [content]);\n  }\n});\nexport default BCollapse;"]},"metadata":{},"sourceType":"module"}