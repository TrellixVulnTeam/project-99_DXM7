{"ast":null,"code":"import { keys } from '../../../utils/object';\nimport { arrayIncludes } from '../../../utils/array';\nimport { IGNORED_FIELD_KEYS } from './constants'; // Return a copy of a row after all reserved fields have been filtered out\n\nvar sanitizeRow = function sanitizeRow(row, ignoreFields, includeFields) {\n  var fieldsObj = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return keys(row).reduce(function (obj, key) {\n    // Ignore special fields that start with `_`\n    // Ignore fields in the `ignoreFields` array\n    // Include only fields in the `includeFields` array\n    if (!IGNORED_FIELD_KEYS[key] && !(ignoreFields && ignoreFields.length > 0 && arrayIncludes(ignoreFields, key)) && !(includeFields && includeFields.length > 0 && !arrayIncludes(includeFields, key))) {\n      var f = fieldsObj[key];\n      var val = row[key];\n      obj[key] = f && f.filterByFormatted && f.formatter ? f.formatter(val, key, row) : val;\n    }\n\n    return obj;\n  }, {});\n};\n\nexport default sanitizeRow;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/components/table/helpers/sanitize-row.js"],"names":["keys","arrayIncludes","IGNORED_FIELD_KEYS","sanitizeRow","row","ignoreFields","includeFields","fieldsObj","arguments","length","undefined","reduce","obj","key","f","val","filterByFormatted","formatter"],"mappings":"AAAA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,kBAAT,QAAmC,aAAnC,C,CAAkD;;AAElD,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,GAArB,EAA0BC,YAA1B,EAAwCC,aAAxC,EAAuD;AACvE,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF;AACA,SAAOR,IAAI,CAACI,GAAD,CAAJ,CAAUO,MAAV,CAAiB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC1C;AACA;AACA;AACA,QAAI,CAACX,kBAAkB,CAACW,GAAD,CAAnB,IAA4B,EAAER,YAAY,IAAIA,YAAY,CAACI,MAAb,GAAsB,CAAtC,IAA2CR,aAAa,CAACI,YAAD,EAAeQ,GAAf,CAA1D,CAA5B,IAA8G,EAAEP,aAAa,IAAIA,aAAa,CAACG,MAAd,GAAuB,CAAxC,IAA6C,CAACR,aAAa,CAACK,aAAD,EAAgBO,GAAhB,CAA7D,CAAlH,EAAsM;AACpM,UAAIC,CAAC,GAAGP,SAAS,CAACM,GAAD,CAAjB;AACA,UAAIE,GAAG,GAAGX,GAAG,CAACS,GAAD,CAAb;AACAD,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,CAAC,IAAIA,CAAC,CAACE,iBAAP,IAA4BF,CAAC,CAACG,SAA9B,GAA0CH,CAAC,CAACG,SAAF,CAAYF,GAAZ,EAAiBF,GAAjB,EAAsBT,GAAtB,CAA1C,GAAuEW,GAAlF;AACD;;AAED,WAAOH,GAAP;AACD,GAXM,EAWJ,EAXI,CAAP;AAYD,CAdD;;AAgBA,eAAeT,WAAf","sourcesContent":["import { keys } from '../../../utils/object';\nimport { arrayIncludes } from '../../../utils/array';\nimport { IGNORED_FIELD_KEYS } from './constants'; // Return a copy of a row after all reserved fields have been filtered out\n\nvar sanitizeRow = function sanitizeRow(row, ignoreFields, includeFields) {\n  var fieldsObj = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return keys(row).reduce(function (obj, key) {\n    // Ignore special fields that start with `_`\n    // Ignore fields in the `ignoreFields` array\n    // Include only fields in the `includeFields` array\n    if (!IGNORED_FIELD_KEYS[key] && !(ignoreFields && ignoreFields.length > 0 && arrayIncludes(ignoreFields, key)) && !(includeFields && includeFields.length > 0 && !arrayIncludes(includeFields, key))) {\n      var f = fieldsObj[key];\n      var val = row[key];\n      obj[key] = f && f.filterByFormatted && f.formatter ? f.formatter(val, key, row) : val;\n    }\n\n    return obj;\n  }, {});\n};\n\nexport default sanitizeRow;"]},"metadata":{},"sourceType":"module"}