{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { htmlOrText } from '../utils/html';\nimport normalizeSlotMixin from './normalize-slot';\nimport { BFormCheckbox } from '../components/form-checkbox/form-checkbox';\nimport { BFormRadio } from '../components/form-radio/form-radio'; // @vue/component\n\nexport default {\n  mixins: [normalizeSlotMixin],\n  model: {\n    prop: 'checked',\n    event: 'input'\n  },\n  props: {\n    validated: {\n      type: Boolean,\n      default: false\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: false\n    },\n    stacked: {\n      type: Boolean,\n      default: false\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    buttons: {\n      // Render as button style\n      type: Boolean,\n      default: false\n    },\n    buttonVariant: {\n      // Only applicable when rendered with button style\n      type: String,\n      default: 'secondary'\n    }\n  },\n  computed: {\n    inline: function inline() {\n      return !this.stacked;\n    },\n    groupName: function groupName() {\n      // Checks/Radios tied to the same model must have the same name,\n      // especially for ARIA accessibility.\n      return this.name || this.safeId();\n    },\n    groupClasses: function groupClasses() {\n      if (this.buttons) {\n        return ['btn-group-toggle', this.inline ? 'btn-group' : 'btn-group-vertical', this.size ? \"btn-group-\".concat(this.size) : '', this.validated ? \"was-validated\" : ''];\n      }\n\n      return [this.validated ? \"was-validated\" : ''];\n    },\n    computedAriaInvalid: function computedAriaInvalid() {\n      var ariaInvalid = this.ariaInvalid;\n\n      if (ariaInvalid === true || ariaInvalid === 'true' || ariaInvalid === '') {\n        return 'true';\n      }\n\n      return this.computedState === false ? 'true' : null;\n    }\n  },\n  watch: {\n    checked: function checked(newVal, oldVal) {\n      this.localChecked = newVal;\n    },\n    localChecked: function localChecked(newVal, oldVal) {\n      this.$emit('input', newVal);\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var inputs = this.formOptions.map(function (option, idx) {\n      var uid = \"_BV_option_\".concat(idx, \"_\");\n      return h(_this.isRadioGroup ? BFormRadio : BFormCheckbox, {\n        key: uid,\n        props: {\n          id: _this.safeId(uid),\n          value: option.value,\n          // Individual radios or checks can be disabled in a group\n          disabled: option.disabled || false // We don't need to include these, since the input's will know they are inside here\n          // name: this.groupName,\n          // form: this.form || null,\n          // required: Boolean(this.name && this.required)\n\n        }\n      }, [h('span', {\n        domProps: htmlOrText(option.html, option.text)\n      })]);\n    });\n    return h('div', {\n      class: this.groupClasses,\n      attrs: {\n        id: this.safeId(),\n        role: this.isRadioGroup ? 'radiogroup' : 'group',\n        // Tabindex to allow group to be focused if needed\n        tabindex: '-1',\n        'aria-required': this.required ? 'true' : null,\n        'aria-invalid': this.computedAriaInvalid\n      }\n    }, [this.normalizeSlot('first'), inputs, this.normalizeSlot('default')]);\n  }\n};","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js"],"names":["htmlOrText","normalizeSlotMixin","BFormCheckbox","BFormRadio","mixins","model","prop","event","props","validated","type","Boolean","default","ariaInvalid","String","stacked","plain","buttons","buttonVariant","computed","inline","groupName","name","safeId","groupClasses","size","concat","computedAriaInvalid","computedState","watch","checked","newVal","oldVal","localChecked","$emit","render","h","_this","inputs","formOptions","map","option","idx","uid","isRadioGroup","key","id","value","disabled","domProps","html","text","class","attrs","role","tabindex","required","normalizeSlot"],"mappings":"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","sourcesContent":["import { htmlOrText } from '../utils/html';\nimport normalizeSlotMixin from './normalize-slot';\nimport { BFormCheckbox } from '../components/form-checkbox/form-checkbox';\nimport { BFormRadio } from '../components/form-radio/form-radio'; // @vue/component\n\nexport default {\n  mixins: [normalizeSlotMixin],\n  model: {\n    prop: 'checked',\n    event: 'input'\n  },\n  props: {\n    validated: {\n      type: Boolean,\n      default: false\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: false\n    },\n    stacked: {\n      type: Boolean,\n      default: false\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    buttons: {\n      // Render as button style\n      type: Boolean,\n      default: false\n    },\n    buttonVariant: {\n      // Only applicable when rendered with button style\n      type: String,\n      default: 'secondary'\n    }\n  },\n  computed: {\n    inline: function inline() {\n      return !this.stacked;\n    },\n    groupName: function groupName() {\n      // Checks/Radios tied to the same model must have the same name,\n      // especially for ARIA accessibility.\n      return this.name || this.safeId();\n    },\n    groupClasses: function groupClasses() {\n      if (this.buttons) {\n        return ['btn-group-toggle', this.inline ? 'btn-group' : 'btn-group-vertical', this.size ? \"btn-group-\".concat(this.size) : '', this.validated ? \"was-validated\" : ''];\n      }\n\n      return [this.validated ? \"was-validated\" : ''];\n    },\n    computedAriaInvalid: function computedAriaInvalid() {\n      var ariaInvalid = this.ariaInvalid;\n\n      if (ariaInvalid === true || ariaInvalid === 'true' || ariaInvalid === '') {\n        return 'true';\n      }\n\n      return this.computedState === false ? 'true' : null;\n    }\n  },\n  watch: {\n    checked: function checked(newVal, oldVal) {\n      this.localChecked = newVal;\n    },\n    localChecked: function localChecked(newVal, oldVal) {\n      this.$emit('input', newVal);\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var inputs = this.formOptions.map(function (option, idx) {\n      var uid = \"_BV_option_\".concat(idx, \"_\");\n      return h(_this.isRadioGroup ? BFormRadio : BFormCheckbox, {\n        key: uid,\n        props: {\n          id: _this.safeId(uid),\n          value: option.value,\n          // Individual radios or checks can be disabled in a group\n          disabled: option.disabled || false // We don't need to include these, since the input's will know they are inside here\n          // name: this.groupName,\n          // form: this.form || null,\n          // required: Boolean(this.name && this.required)\n\n        }\n      }, [h('span', {\n        domProps: htmlOrText(option.html, option.text)\n      })]);\n    });\n    return h('div', {\n      class: this.groupClasses,\n      attrs: {\n        id: this.safeId(),\n        role: this.isRadioGroup ? 'radiogroup' : 'group',\n        // Tabindex to allow group to be focused if needed\n        tabindex: '-1',\n        'aria-required': this.required ? 'true' : null,\n        'aria-invalid': this.computedAriaInvalid\n      }\n    }, [this.normalizeSlot('first'), inputs, this.normalizeSlot('default')]);\n  }\n};"]},"metadata":{},"sourceType":"module"}