{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport looseEqual from '../../../utils/loose-equal';\nimport warn from '../../../utils/warn';\nimport { isArray, isFunction, isPromise } from '../../../utils/inspect';\nimport listenOnRootMixin from '../../../mixins/listen-on-root';\nexport default {\n  mixins: [listenOnRootMixin],\n  props: {\n    // Prop override(s)\n    items: {\n      // Adds in 'Function' support\n      type: [Array, Function],\n      default: function _default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n    },\n    // Additional props\n    noProviderPaging: {\n      type: Boolean,\n      default: false\n    },\n    noProviderSorting: {\n      type: Boolean,\n      default: false\n    },\n    noProviderFiltering: {\n      type: Boolean,\n      default: false\n    },\n    apiUrl: {\n      // Passthrough prop. Passed to the context object. Not used by b-table directly\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    hasProvider: function hasProvider() {\n      return isFunction(this.items);\n    },\n    providerTriggerContext: function providerTriggerContext() {\n      // Used to trigger the provider function via a watcher. Only the fields that\n      // are needed for triggering a provider update are included. Note that the\n      // regular this.context is sent to the provider during fetches though, as they\n      // may need all the prop info.\n      var ctx = {\n        apiUrl: this.apiUrl,\n        filter: null,\n        sortBy: null,\n        sortDesc: null,\n        perPage: null,\n        currentPage: null\n      };\n\n      if (!this.noProviderFiltering) {\n        // Either a string, or could be an object or array.\n        ctx.filter = this.localFilter;\n      }\n\n      if (!this.noProviderSorting) {\n        ctx.sortBy = this.localSortBy;\n        ctx.sortDesc = this.localSortDesc;\n      }\n\n      if (!this.noProviderPaging) {\n        ctx.perPage = this.perPage;\n        ctx.currentPage = this.currentPage;\n      }\n\n      return _objectSpread({}, ctx);\n    }\n  },\n  watch: {\n    // Provider update triggering\n    items: function items(newVal, oldVal) {\n      // If a new provider has been specified, trigger an update\n      if (this.hasProvider || isFunction(newVal)) {\n        this.$nextTick(this._providerUpdate);\n      }\n    },\n    providerTriggerContext: function providerTriggerContext(newVal, oldVal) {\n      // Trigger the provider to update as the relevant context values have changed.\n      if (!looseEqual(newVal, oldVal)) {\n        this.$nextTick(this._providerUpdate);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this; // Call the items provider if necessary\n\n\n    if (this.hasProvider && (!this.localItems || this.localItems.length === 0)) {\n      // Fetch on mount if localItems is empty\n      this._providerUpdate();\n    } // Listen for global messages to tell us to force refresh the table\n\n\n    this.listenOnRoot('bv::refresh::table', function (id) {\n      if (id === _this.id || id === _this) {\n        _this.refresh();\n      }\n    });\n  },\n  methods: {\n    refresh: function refresh() {\n      // Public Method: Force a refresh of the provider function\n      this.$off('refreshed', this.refresh);\n\n      if (this.computedBusy) {\n        // Can't force an update when forced busy by user (busy prop === true)\n        if (this.localBusy && this.hasProvider) {\n          // But if provider running (localBusy), re-schedule refresh once `refreshed` emitted\n          this.$on('refreshed', this.refresh);\n        }\n      } else {\n        this.clearSelected();\n\n        if (this.hasProvider) {\n          this.$nextTick(this._providerUpdate);\n        } else {\n          /* istanbul ignore next */\n          this.localItems = isArray(this.items) ? this.items.slice() : [];\n        }\n      }\n    },\n    // Provider related methods\n    _providerSetLocal: function _providerSetLocal(items) {\n      this.localItems = isArray(items) ? items.slice() : [];\n      this.localBusy = false;\n      this.$emit('refreshed'); // New root emit\n\n      if (this.id) {\n        this.emitOnRoot('bv::table::refreshed', this.id);\n      }\n    },\n    _providerUpdate: function _providerUpdate() {\n      var _this2 = this; // Refresh the provider function items.\n\n\n      if (!this.hasProvider) {\n        // Do nothing if no provider\n        return;\n      } // If table is busy, wait until refreshed before calling again\n\n\n      if (this.computedBusy) {\n        // Schedule a new refresh once `refreshed` is emitted\n        this.$nextTick(this.refresh);\n        return;\n      } // Set internal busy state\n\n\n      this.localBusy = true; // Call provider function with context and optional callback after DOM is fully updated\n\n      this.$nextTick(function () {\n        try {\n          // Call provider function passing it the context and optional callback\n          var data = _this2.items(_this2.context, _this2._providerSetLocal);\n\n          if (isPromise(data)) {\n            // Provider returned Promise\n            data.then(function (items) {\n              // Provider resolved with items\n              _this2._providerSetLocal(items);\n            });\n          } else if (isArray(data)) {\n            // Provider returned Array data\n            _this2._providerSetLocal(data);\n          } else if (_this2.items.length !== 2) {\n            // Check number of arguments provider function requested\n            // Provider not using callback (didn't request second argument), so we clear\n            // busy state as most likely there was an error in the provider function\n\n            /* istanbul ignore next */\n            warn(\"b-table provider function didn't request callback and did not return a promise or data\");\n            /* istanbul ignore next */\n\n            _this2.localBusy = false;\n          }\n        } catch (e)\n        /* istanbul ignore next */\n        {\n          // Provider function borked on us, so we spew out a warning\n          // and clear the busy state\n          warn(\"b-table provider function error [\".concat(e.name, \"] \").concat(e.message));\n          _this2.localBusy = false;\n\n          _this2.$off('refreshed', _this2.refresh);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["D:/UEK/ecommercevuefirestore2304/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","looseEqual","warn","isArray","isFunction","isPromise","listenOnRootMixin","mixins","props","items","type","Array","Function","default","_default","noProviderPaging","Boolean","noProviderSorting","noProviderFiltering","apiUrl","String","computed","hasProvider","providerTriggerContext","ctx","sortBy","sortDesc","perPage","currentPage","localFilter","localSortBy","localSortDesc","watch","newVal","oldVal","$nextTick","_providerUpdate","mounted","_this","localItems","listenOnRoot","id","refresh","methods","$off","computedBusy","localBusy","$on","clearSelected","slice","_providerSetLocal","$emit","emitOnRoot","_this2","data","context","then","e","concat","name","message"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport looseEqual from '../../../utils/loose-equal';\nimport warn from '../../../utils/warn';\nimport { isArray, isFunction, isPromise } from '../../../utils/inspect';\nimport listenOnRootMixin from '../../../mixins/listen-on-root';\nexport default {\n  mixins: [listenOnRootMixin],\n  props: {\n    // Prop override(s)\n    items: {\n      // Adds in 'Function' support\n      type: [Array, Function],\n      default: function _default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n    },\n    // Additional props\n    noProviderPaging: {\n      type: Boolean,\n      default: false\n    },\n    noProviderSorting: {\n      type: Boolean,\n      default: false\n    },\n    noProviderFiltering: {\n      type: Boolean,\n      default: false\n    },\n    apiUrl: {\n      // Passthrough prop. Passed to the context object. Not used by b-table directly\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    hasProvider: function hasProvider() {\n      return isFunction(this.items);\n    },\n    providerTriggerContext: function providerTriggerContext() {\n      // Used to trigger the provider function via a watcher. Only the fields that\n      // are needed for triggering a provider update are included. Note that the\n      // regular this.context is sent to the provider during fetches though, as they\n      // may need all the prop info.\n      var ctx = {\n        apiUrl: this.apiUrl,\n        filter: null,\n        sortBy: null,\n        sortDesc: null,\n        perPage: null,\n        currentPage: null\n      };\n\n      if (!this.noProviderFiltering) {\n        // Either a string, or could be an object or array.\n        ctx.filter = this.localFilter;\n      }\n\n      if (!this.noProviderSorting) {\n        ctx.sortBy = this.localSortBy;\n        ctx.sortDesc = this.localSortDesc;\n      }\n\n      if (!this.noProviderPaging) {\n        ctx.perPage = this.perPage;\n        ctx.currentPage = this.currentPage;\n      }\n\n      return _objectSpread({}, ctx);\n    }\n  },\n  watch: {\n    // Provider update triggering\n    items: function items(newVal, oldVal) {\n      // If a new provider has been specified, trigger an update\n      if (this.hasProvider || isFunction(newVal)) {\n        this.$nextTick(this._providerUpdate);\n      }\n    },\n    providerTriggerContext: function providerTriggerContext(newVal, oldVal) {\n      // Trigger the provider to update as the relevant context values have changed.\n      if (!looseEqual(newVal, oldVal)) {\n        this.$nextTick(this._providerUpdate);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // Call the items provider if necessary\n    if (this.hasProvider && (!this.localItems || this.localItems.length === 0)) {\n      // Fetch on mount if localItems is empty\n      this._providerUpdate();\n    } // Listen for global messages to tell us to force refresh the table\n\n\n    this.listenOnRoot('bv::refresh::table', function (id) {\n      if (id === _this.id || id === _this) {\n        _this.refresh();\n      }\n    });\n  },\n  methods: {\n    refresh: function refresh() {\n      // Public Method: Force a refresh of the provider function\n      this.$off('refreshed', this.refresh);\n\n      if (this.computedBusy) {\n        // Can't force an update when forced busy by user (busy prop === true)\n        if (this.localBusy && this.hasProvider) {\n          // But if provider running (localBusy), re-schedule refresh once `refreshed` emitted\n          this.$on('refreshed', this.refresh);\n        }\n      } else {\n        this.clearSelected();\n\n        if (this.hasProvider) {\n          this.$nextTick(this._providerUpdate);\n        } else {\n          /* istanbul ignore next */\n          this.localItems = isArray(this.items) ? this.items.slice() : [];\n        }\n      }\n    },\n    // Provider related methods\n    _providerSetLocal: function _providerSetLocal(items) {\n      this.localItems = isArray(items) ? items.slice() : [];\n      this.localBusy = false;\n      this.$emit('refreshed'); // New root emit\n\n      if (this.id) {\n        this.emitOnRoot('bv::table::refreshed', this.id);\n      }\n    },\n    _providerUpdate: function _providerUpdate() {\n      var _this2 = this;\n\n      // Refresh the provider function items.\n      if (!this.hasProvider) {\n        // Do nothing if no provider\n        return;\n      } // If table is busy, wait until refreshed before calling again\n\n\n      if (this.computedBusy) {\n        // Schedule a new refresh once `refreshed` is emitted\n        this.$nextTick(this.refresh);\n        return;\n      } // Set internal busy state\n\n\n      this.localBusy = true; // Call provider function with context and optional callback after DOM is fully updated\n\n      this.$nextTick(function () {\n        try {\n          // Call provider function passing it the context and optional callback\n          var data = _this2.items(_this2.context, _this2._providerSetLocal);\n\n          if (isPromise(data)) {\n            // Provider returned Promise\n            data.then(function (items) {\n              // Provider resolved with items\n              _this2._providerSetLocal(items);\n            });\n          } else if (isArray(data)) {\n            // Provider returned Array data\n            _this2._providerSetLocal(data);\n          } else if (_this2.items.length !== 2) {\n            // Check number of arguments provider function requested\n            // Provider not using callback (didn't request second argument), so we clear\n            // busy state as most likely there was an error in the provider function\n\n            /* istanbul ignore next */\n            warn(\"b-table provider function didn't request callback and did not return a promise or data\");\n            /* istanbul ignore next */\n\n            _this2.localBusy = false;\n          }\n        } catch (e)\n        /* istanbul ignore next */\n        {\n          // Provider function borked on us, so we spew out a warning\n          // and clear the busy state\n          warn(\"b-table provider function error [\".concat(e.name, \"] \").concat(e.message));\n          _this2.localBusy = false;\n\n          _this2.$off('refreshed', _this2.refresh);\n        }\n      });\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}