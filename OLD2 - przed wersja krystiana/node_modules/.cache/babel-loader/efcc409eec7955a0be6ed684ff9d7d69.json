{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport looseEqual from '../../../utils/loose-equal';\nimport { isArray, isFunction, isNull, isString, isUndefined } from '../../../utils/inspect';\nimport normalizeFields from './normalize-fields';\nexport default {\n  props: {\n    items: {\n      // Provider mixin adds in `Function` type\n      type: Array,\n      default: function _default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n    },\n    fields: {\n      // Object format is deprecated and should be avoided\n      type: [Array, Object],\n      default: null\n    },\n    primaryKey: {\n      // Primary key for record\n      // If provided the value in each row must be unique!\n      type: String,\n      default: null\n    },\n    value: {\n      // `v-model` for retrieving the current displayed rows\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      // Our local copy of the items\n      // Must be an array\n      localItems: isArray(this.items) ? this.items.slice() : []\n    };\n  },\n  computed: {\n    computedFields: function computedFields() {\n      // We normalize fields into an array of objects\n      // `[ { key:..., label:..., ...}, {...}, ..., {..}]`\n      return normalizeFields(this.fields, this.localItems);\n    },\n    computedFieldsObj: function computedFieldsObj() {\n      // Fields as a simple lookup hash object\n      // Mainly for formatter lookup and use in `scopedSlots` for convenience\n      // If the field has a formatter, it normalizes formatter to a\n      // function ref or `undefined` if no formatter\n      var parent = this.$parent;\n      return this.computedFields.reduce(function (obj, f) {\n        // We use object spread here so we don't mutate the original field object\n        obj[f.key] = _objectSpread({}, f);\n\n        if (f.formatter) {\n          // Normalize formatter to a function ref or `undefined`\n          var formatter = f.formatter;\n\n          if (isString(formatter) && isFunction(parent[formatter])) {\n            formatter = parent[formatter];\n          } else if (!isFunction(formatter)) {\n            /* istanbul ignore next */\n            formatter = undefined;\n          } // Return formatter function or `undefined` if none\n\n\n          obj[f.key].formatter = formatter;\n        }\n\n        return obj;\n      }, {});\n    },\n    computedItems: function computedItems() {\n      // Fallback if various mixins not provided\n      return (this.paginatedItems || this.sortedItems || this.filteredItems || this.localItems || []).slice();\n    },\n    context: function context() {\n      // Current state of sorting, filtering and pagination props/values\n      return {\n        filter: this.localFilter,\n        sortBy: this.localSortBy,\n        sortDesc: this.localSortDesc,\n        perPage: parseInt(this.perPage, 10) || 0,\n        currentPage: parseInt(this.currentPage, 10) || 1,\n        apiUrl: this.apiUrl\n      };\n    }\n  },\n  watch: {\n    items: function items(newItems) {\n      /* istanbul ignore else */\n      if (isArray(newItems)) {\n        // Set `localItems`/`filteredItems` to a copy of the provided array\n        this.localItems = newItems.slice();\n      } else if (isUndefined(newItems) || isNull(newItems)) {\n        /* istanbul ignore next */\n        this.localItems = [];\n      }\n    },\n    // Watch for changes on `computedItems` and update the `v-model`\n    computedItems: function computedItems(newVal) {\n      this.$emit('input', newVal);\n    },\n    // Watch for context changes\n    context: function context(newVal, oldVal) {\n      // Emit context information for external paging/filtering/sorting handling\n      if (!looseEqual(newVal, oldVal)) {\n        this.$emit('context-changed', newVal);\n      }\n    }\n  },\n  mounted: function mounted() {\n    // Initially update the `v-model` of displayed items\n    this.$emit('input', this.computedItems);\n  },\n  methods: {\n    // Method to get the formatter method for a given field key\n    getFieldFormatter: function getFieldFormatter(key) {\n      var field = this.computedFieldsObj[key]; // `this.computedFieldsObj` has pre-normalized the formatter to a\n      // function ref if present, otherwise `undefined`\n\n      return field ? field.formatter : undefined;\n    }\n  }\n};","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","looseEqual","isArray","isFunction","isNull","isString","isUndefined","normalizeFields","props","items","type","Array","default","_default","fields","primaryKey","String","data","localItems","slice","computed","computedFields","computedFieldsObj","parent","$parent","reduce","f","formatter","undefined","computedItems","paginatedItems","sortedItems","filteredItems","context","localFilter","sortBy","localSortBy","sortDesc","localSortDesc","perPage","parseInt","currentPage","apiUrl","watch","newItems","newVal","$emit","oldVal","mounted","methods","getFieldFormatter","field"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport looseEqual from '../../../utils/loose-equal';\nimport { isArray, isFunction, isNull, isString, isUndefined } from '../../../utils/inspect';\nimport normalizeFields from './normalize-fields';\nexport default {\n  props: {\n    items: {\n      // Provider mixin adds in `Function` type\n      type: Array,\n      default: function _default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n    },\n    fields: {\n      // Object format is deprecated and should be avoided\n      type: [Array, Object],\n      default: null\n    },\n    primaryKey: {\n      // Primary key for record\n      // If provided the value in each row must be unique!\n      type: String,\n      default: null\n    },\n    value: {\n      // `v-model` for retrieving the current displayed rows\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      // Our local copy of the items\n      // Must be an array\n      localItems: isArray(this.items) ? this.items.slice() : []\n    };\n  },\n  computed: {\n    computedFields: function computedFields() {\n      // We normalize fields into an array of objects\n      // `[ { key:..., label:..., ...}, {...}, ..., {..}]`\n      return normalizeFields(this.fields, this.localItems);\n    },\n    computedFieldsObj: function computedFieldsObj() {\n      // Fields as a simple lookup hash object\n      // Mainly for formatter lookup and use in `scopedSlots` for convenience\n      // If the field has a formatter, it normalizes formatter to a\n      // function ref or `undefined` if no formatter\n      var parent = this.$parent;\n      return this.computedFields.reduce(function (obj, f) {\n        // We use object spread here so we don't mutate the original field object\n        obj[f.key] = _objectSpread({}, f);\n\n        if (f.formatter) {\n          // Normalize formatter to a function ref or `undefined`\n          var formatter = f.formatter;\n\n          if (isString(formatter) && isFunction(parent[formatter])) {\n            formatter = parent[formatter];\n          } else if (!isFunction(formatter)) {\n            /* istanbul ignore next */\n            formatter = undefined;\n          } // Return formatter function or `undefined` if none\n\n\n          obj[f.key].formatter = formatter;\n        }\n\n        return obj;\n      }, {});\n    },\n    computedItems: function computedItems() {\n      // Fallback if various mixins not provided\n      return (this.paginatedItems || this.sortedItems || this.filteredItems || this.localItems || []).slice();\n    },\n    context: function context() {\n      // Current state of sorting, filtering and pagination props/values\n      return {\n        filter: this.localFilter,\n        sortBy: this.localSortBy,\n        sortDesc: this.localSortDesc,\n        perPage: parseInt(this.perPage, 10) || 0,\n        currentPage: parseInt(this.currentPage, 10) || 1,\n        apiUrl: this.apiUrl\n      };\n    }\n  },\n  watch: {\n    items: function items(newItems) {\n      /* istanbul ignore else */\n      if (isArray(newItems)) {\n        // Set `localItems`/`filteredItems` to a copy of the provided array\n        this.localItems = newItems.slice();\n      } else if (isUndefined(newItems) || isNull(newItems)) {\n        /* istanbul ignore next */\n        this.localItems = [];\n      }\n    },\n    // Watch for changes on `computedItems` and update the `v-model`\n    computedItems: function computedItems(newVal) {\n      this.$emit('input', newVal);\n    },\n    // Watch for context changes\n    context: function context(newVal, oldVal) {\n      // Emit context information for external paging/filtering/sorting handling\n      if (!looseEqual(newVal, oldVal)) {\n        this.$emit('context-changed', newVal);\n      }\n    }\n  },\n  mounted: function mounted() {\n    // Initially update the `v-model` of displayed items\n    this.$emit('input', this.computedItems);\n  },\n  methods: {\n    // Method to get the formatter method for a given field key\n    getFieldFormatter: function getFieldFormatter(key) {\n      var field = this.computedFieldsObj[key]; // `this.computedFieldsObj` has pre-normalized the formatter to a\n      // function ref if present, otherwise `undefined`\n\n      return field ? field.formatter : undefined;\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}