{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport idMixin from '../../mixins/id';\nimport formMixin from '../../mixins/form';\nimport formSizeMixin from '../../mixins/form-size';\nimport formStateMixin from '../../mixins/form-state';\nimport formTextMixin from '../../mixins/form-text';\nimport formSelectionMixin from '../../mixins/form-selection';\nimport formValidityMixin from '../../mixins/form-validity';\nimport { getCS, isVisible } from '../../utils/dom';\nimport { isNull } from '../../utils/inspect'; // @vue/component\n\nexport var BFormTextarea = /*#__PURE__*/Vue.extend({\n  name: 'BFormTextarea',\n  mixins: [idMixin, formMixin, formSizeMixin, formStateMixin, formTextMixin, formSelectionMixin, formValidityMixin],\n  props: {\n    rows: {\n      type: [Number, String],\n      default: 2\n    },\n    maxRows: {\n      type: [Number, String],\n      default: null\n    },\n    wrap: {\n      // 'soft', 'hard' or 'off'. Browser default is 'soft'\n      type: String,\n      default: 'soft'\n    },\n    noResize: {\n      // Disable the resize handle of textarea\n      type: Boolean,\n      default: false\n    },\n    noAutoShrink: {\n      // When in auto resize mode, disable shrinking to content height\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      dontResize: true,\n      heightInPx: null\n    };\n  },\n  computed: {\n    computedStyle: function computedStyle() {\n      var styles = {\n        // Setting `noResize` to true will disable the ability for the user to\n        // manually resize the textarea. We also disable when in auto height mode\n        resize: !this.computedRows || this.noResize ? 'none' : null\n      };\n\n      if (!this.computedRows) {\n        // Conditionaly set the computed CSS height when auto rows/height is enabled.\n        // We avoid setting the style to null, which can override user manual resize handle.\n        styles.height = this.heightInPx; // We always add a vertical scrollbar to the textarea when auto-height is\n        // enabled so that the computed height calcaultion returns a stable value.\n\n        styles.overflowY = 'scroll';\n      }\n\n      return styles;\n    },\n    computedMinRows: function computedMinRows() {\n      // Ensure rows is at least 2 and positive (2 is the native textarea value).\n      // A value of 1 can cause issues in some browsers, and most browsers only support\n      // 2 as the smallest value.\n      return Math.max(parseInt(this.rows, 10) || 2, 2);\n    },\n    computedMaxRows: function computedMaxRows() {\n      return Math.max(this.computedMinRows, parseInt(this.maxRows, 10) || 0);\n    },\n    computedRows: function computedRows() {\n      // This is used to set the attribute 'rows' on the textarea.\n      // If auto-height is enabled, then we return null as we use CSS to control height.\n      return this.computedMinRows === this.computedMaxRows ? this.computedMinRows : null;\n    }\n  },\n  watch: {\n    dontResize: function dontResize(newVal, oldval) {\n      if (!newVal) {\n        this.setHeight();\n      }\n    },\n    localValue: function localValue(newVal, oldVal) {\n      this.setHeight();\n    }\n  },\n  mounted: function mounted() {\n    var _this = this; // Enable opt-in resizing once mounted\n\n\n    this.$nextTick(function () {\n      _this.dontResize = false;\n    });\n  },\n  activated: function activated() {\n    var _this2 = this; // If we are being re-activated in <keep-alive>, enable opt-in resizing\n\n\n    this.$nextTick(function () {\n      _this2.dontResize = false;\n    });\n  },\n  deactivated: function deactivated() {\n    // If we are in a deactivated <keep-alive>, disable opt-in resizing\n    this.dontResize = true;\n  },\n  beforeDestroy: function beforeDestroy() {\n    /* istanbul ignore next */\n    this.dontResize = true;\n  },\n  methods: {\n    setHeight: function setHeight() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        _this3.heightInPx = _this3.computeHeight();\n      });\n    },\n    computeHeight: function computeHeight()\n    /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n    {\n      if (this.$isServer || !isNull(this.computedRows)) {\n        return null;\n      }\n\n      var el = this.$el; // Element must be visible (not hidden) and in document.\n      // Must be checked after above checks\n\n      if (!isVisible(el)) {\n        return null;\n      } // Get current computed styles\n\n\n      var computedStyle = getCS(el); // Height of one line of text in px\n\n      var lineHeight = parseFloat(computedStyle.lineHeight); // Calculate height of border and padding\n\n      var border = (parseFloat(computedStyle.borderTopWidth) || 0) + (parseFloat(computedStyle.borderBottomWidth) || 0);\n      var padding = (parseFloat(computedStyle.paddingTop) || 0) + (parseFloat(computedStyle.paddingBottom) || 0); // Calculate offset\n\n      var offset = border + padding; // Minimum height for min rows (which must be 2 rows or greater for cross-browser support)\n\n      var minHeight = lineHeight * this.computedMinRows + offset; // Get the current style height (with `px` units)\n\n      var oldHeight = el.style.height || computedStyle.height; // Probe scrollHeight by temporarily changing the height to `auto`\n\n      el.style.height = 'auto';\n      var scrollHeight = el.scrollHeight; // Place the original old height back on the element, just in case this computedProp\n      // returns the same value as before.\n\n      el.style.height = oldHeight; // Calculate content height in \"rows\" (scrollHeight includes padding but not border)\n\n      var contentRows = Math.max((scrollHeight - padding) / lineHeight, 2); // Calculate number of rows to display (limited within min/max rows)\n\n      var rows = Math.min(Math.max(contentRows, this.computedMinRows), this.computedMaxRows); // Calculate the required height of the textarea including border and padding (in pixels)\n\n      var height = Math.max(Math.ceil(rows * lineHeight + offset), minHeight); // Computed height remains the larger of oldHeight and new height,\n      // when height is in `sticky` mode (prop `no-auto-shrink` is true)\n\n      if (this.noAutoShrink && (parseFloat(oldHeight) || 0) > height) {\n        return oldHeight;\n      } // Return the new computed CSS height in px units\n\n\n      return \"\".concat(height, \"px\");\n    }\n  },\n  render: function render(h) {\n    // Using self instead of this helps reduce code size during minification\n    var self = this;\n    return h('textarea', {\n      ref: 'input',\n      class: self.computedClass,\n      style: self.computedStyle,\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: self.localValue,\n        expression: 'localValue'\n      }],\n      attrs: {\n        id: self.safeId(),\n        name: self.name,\n        form: self.form || null,\n        disabled: self.disabled,\n        placeholder: self.placeholder,\n        required: self.required,\n        autocomplete: self.autocomplete || null,\n        readonly: self.readonly || self.plaintext,\n        rows: self.computedRows,\n        wrap: self.wrap || null,\n        'aria-required': self.required ? 'true' : null,\n        'aria-invalid': self.computedAriaInvalid\n      },\n      domProps: {\n        value: self.localValue\n      },\n      on: _objectSpread({}, self.$listeners, {\n        input: self.onInput,\n        change: self.onChange,\n        blur: self.onBlur\n      })\n    });\n  }\n});\nexport default BFormTextarea;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","Vue","idMixin","formMixin","formSizeMixin","formStateMixin","formTextMixin","formSelectionMixin","formValidityMixin","getCS","isVisible","isNull","BFormTextarea","extend","name","mixins","props","rows","type","Number","String","default","maxRows","wrap","noResize","Boolean","noAutoShrink","data","dontResize","heightInPx","computed","computedStyle","styles","resize","computedRows","height","overflowY","computedMinRows","Math","max","parseInt","computedMaxRows","watch","newVal","oldval","setHeight","localValue","oldVal","mounted","_this","$nextTick","activated","_this2","deactivated","beforeDestroy","methods","_this3","computeHeight","$isServer","el","$el","lineHeight","parseFloat","border","borderTopWidth","borderBottomWidth","padding","paddingTop","paddingBottom","offset","minHeight","oldHeight","style","scrollHeight","contentRows","min","ceil","concat","render","h","self","ref","class","computedClass","directives","rawName","expression","attrs","id","safeId","form","disabled","placeholder","required","autocomplete","readonly","plaintext","computedAriaInvalid","domProps","on","$listeners","input","onInput","change","onChange","blur","onBlur"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Vue from '../../utils/vue';\nimport idMixin from '../../mixins/id';\nimport formMixin from '../../mixins/form';\nimport formSizeMixin from '../../mixins/form-size';\nimport formStateMixin from '../../mixins/form-state';\nimport formTextMixin from '../../mixins/form-text';\nimport formSelectionMixin from '../../mixins/form-selection';\nimport formValidityMixin from '../../mixins/form-validity';\nimport { getCS, isVisible } from '../../utils/dom';\nimport { isNull } from '../../utils/inspect'; // @vue/component\n\nexport var BFormTextarea =\n/*#__PURE__*/\nVue.extend({\n  name: 'BFormTextarea',\n  mixins: [idMixin, formMixin, formSizeMixin, formStateMixin, formTextMixin, formSelectionMixin, formValidityMixin],\n  props: {\n    rows: {\n      type: [Number, String],\n      default: 2\n    },\n    maxRows: {\n      type: [Number, String],\n      default: null\n    },\n    wrap: {\n      // 'soft', 'hard' or 'off'. Browser default is 'soft'\n      type: String,\n      default: 'soft'\n    },\n    noResize: {\n      // Disable the resize handle of textarea\n      type: Boolean,\n      default: false\n    },\n    noAutoShrink: {\n      // When in auto resize mode, disable shrinking to content height\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      dontResize: true,\n      heightInPx: null\n    };\n  },\n  computed: {\n    computedStyle: function computedStyle() {\n      var styles = {\n        // Setting `noResize` to true will disable the ability for the user to\n        // manually resize the textarea. We also disable when in auto height mode\n        resize: !this.computedRows || this.noResize ? 'none' : null\n      };\n\n      if (!this.computedRows) {\n        // Conditionaly set the computed CSS height when auto rows/height is enabled.\n        // We avoid setting the style to null, which can override user manual resize handle.\n        styles.height = this.heightInPx; // We always add a vertical scrollbar to the textarea when auto-height is\n        // enabled so that the computed height calcaultion returns a stable value.\n\n        styles.overflowY = 'scroll';\n      }\n\n      return styles;\n    },\n    computedMinRows: function computedMinRows() {\n      // Ensure rows is at least 2 and positive (2 is the native textarea value).\n      // A value of 1 can cause issues in some browsers, and most browsers only support\n      // 2 as the smallest value.\n      return Math.max(parseInt(this.rows, 10) || 2, 2);\n    },\n    computedMaxRows: function computedMaxRows() {\n      return Math.max(this.computedMinRows, parseInt(this.maxRows, 10) || 0);\n    },\n    computedRows: function computedRows() {\n      // This is used to set the attribute 'rows' on the textarea.\n      // If auto-height is enabled, then we return null as we use CSS to control height.\n      return this.computedMinRows === this.computedMaxRows ? this.computedMinRows : null;\n    }\n  },\n  watch: {\n    dontResize: function dontResize(newVal, oldval) {\n      if (!newVal) {\n        this.setHeight();\n      }\n    },\n    localValue: function localValue(newVal, oldVal) {\n      this.setHeight();\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // Enable opt-in resizing once mounted\n    this.$nextTick(function () {\n      _this.dontResize = false;\n    });\n  },\n  activated: function activated() {\n    var _this2 = this;\n\n    // If we are being re-activated in <keep-alive>, enable opt-in resizing\n    this.$nextTick(function () {\n      _this2.dontResize = false;\n    });\n  },\n  deactivated: function deactivated() {\n    // If we are in a deactivated <keep-alive>, disable opt-in resizing\n    this.dontResize = true;\n  },\n  beforeDestroy: function beforeDestroy() {\n    /* istanbul ignore next */\n    this.dontResize = true;\n  },\n  methods: {\n    setHeight: function setHeight() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        _this3.heightInPx = _this3.computeHeight();\n      });\n    },\n    computeHeight: function computeHeight()\n    /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n    {\n      if (this.$isServer || !isNull(this.computedRows)) {\n        return null;\n      }\n\n      var el = this.$el; // Element must be visible (not hidden) and in document.\n      // Must be checked after above checks\n\n      if (!isVisible(el)) {\n        return null;\n      } // Get current computed styles\n\n\n      var computedStyle = getCS(el); // Height of one line of text in px\n\n      var lineHeight = parseFloat(computedStyle.lineHeight); // Calculate height of border and padding\n\n      var border = (parseFloat(computedStyle.borderTopWidth) || 0) + (parseFloat(computedStyle.borderBottomWidth) || 0);\n      var padding = (parseFloat(computedStyle.paddingTop) || 0) + (parseFloat(computedStyle.paddingBottom) || 0); // Calculate offset\n\n      var offset = border + padding; // Minimum height for min rows (which must be 2 rows or greater for cross-browser support)\n\n      var minHeight = lineHeight * this.computedMinRows + offset; // Get the current style height (with `px` units)\n\n      var oldHeight = el.style.height || computedStyle.height; // Probe scrollHeight by temporarily changing the height to `auto`\n\n      el.style.height = 'auto';\n      var scrollHeight = el.scrollHeight; // Place the original old height back on the element, just in case this computedProp\n      // returns the same value as before.\n\n      el.style.height = oldHeight; // Calculate content height in \"rows\" (scrollHeight includes padding but not border)\n\n      var contentRows = Math.max((scrollHeight - padding) / lineHeight, 2); // Calculate number of rows to display (limited within min/max rows)\n\n      var rows = Math.min(Math.max(contentRows, this.computedMinRows), this.computedMaxRows); // Calculate the required height of the textarea including border and padding (in pixels)\n\n      var height = Math.max(Math.ceil(rows * lineHeight + offset), minHeight); // Computed height remains the larger of oldHeight and new height,\n      // when height is in `sticky` mode (prop `no-auto-shrink` is true)\n\n      if (this.noAutoShrink && (parseFloat(oldHeight) || 0) > height) {\n        return oldHeight;\n      } // Return the new computed CSS height in px units\n\n\n      return \"\".concat(height, \"px\");\n    }\n  },\n  render: function render(h) {\n    // Using self instead of this helps reduce code size during minification\n    var self = this;\n    return h('textarea', {\n      ref: 'input',\n      class: self.computedClass,\n      style: self.computedStyle,\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: self.localValue,\n        expression: 'localValue'\n      }],\n      attrs: {\n        id: self.safeId(),\n        name: self.name,\n        form: self.form || null,\n        disabled: self.disabled,\n        placeholder: self.placeholder,\n        required: self.required,\n        autocomplete: self.autocomplete || null,\n        readonly: self.readonly || self.plaintext,\n        rows: self.computedRows,\n        wrap: self.wrap || null,\n        'aria-required': self.required ? 'true' : null,\n        'aria-invalid': self.computedAriaInvalid\n      },\n      domProps: {\n        value: self.localValue\n      },\n      on: _objectSpread({}, self.$listeners, {\n        input: self.onInput,\n        change: self.onChange,\n        blur: self.onBlur\n      })\n    });\n  }\n});\nexport default BFormTextarea;"]},"metadata":{},"sourceType":"module"}