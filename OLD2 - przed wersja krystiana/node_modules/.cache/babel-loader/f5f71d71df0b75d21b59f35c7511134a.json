{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport Vue from './vue';\nimport cloneDeep from './clone-deep';\nimport get from './get';\nimport memoize from './memoize';\nimport DEFAULTS from './config-defaults'; // --- Constants ---\n\nvar PROP_NAME = '$bvConfig';\nvar VueProto = Vue.prototype; // --- Getter methods ---\n// All methods return a deep clone (immutable) copy of the config\n// value, to prevent mutation of the user config object.\n// Get the current user config. For testing purposes only\n\nexport var getConfig = function getConfig() {\n  return VueProto[PROP_NAME] ? VueProto[PROP_NAME].getConfig() : {};\n}; // Method to grab a config value based on a dotted/array notation key\n\nexport var getConfigValue = function getConfigValue(key) {\n  return VueProto[PROP_NAME] ? VueProto[PROP_NAME].getConfigValue(key) : cloneDeep(get(DEFAULTS, key));\n}; // Method to grab a config value for a particular component\n\nexport var getComponentConfig = function getComponentConfig(cmpName) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null; // Return the particular config value for key for if specified,\n  // otherwise we return the full config (or an empty object if not found)\n\n  return key ? getConfigValue(\"\".concat(cmpName, \".\").concat(key)) : getConfigValue(cmpName) || {};\n}; // Convenience method for getting all breakpoint names\n\nexport var getBreakpoints = function getBreakpoints() {\n  return getConfigValue('breakpoints');\n}; // Private function for caching / locking-in breakpoint names\n\nvar _getBreakpointsCached = memoize(function () {\n  return getBreakpoints();\n}); // Convenience method for getting all breakpoint names.\n// Caches the results after first access.\n\n\nexport var getBreakpointsCached = function getBreakpointsCached() {\n  return cloneDeep(_getBreakpointsCached());\n}; // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n\nexport var getBreakpointsUp = function getBreakpointsUp() {\n  var breakpoints = getBreakpoints();\n  breakpoints[0] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n// Caches the results after first access.\n\nexport var getBreakpointsUpCached = memoize(function () {\n  var breakpoints = getBreakpointsCached();\n  breakpoints[0] = '';\n  return breakpoints;\n}); // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n\nexport var getBreakpointsDown = function getBreakpointsDown() {\n  var breakpoints = getBreakpoints();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n// Caches the results after first access.\n\n/* istanbul ignore next: we don't use this method anywhere, yet */\n\nexport var getBreakpointsDownCached = function getBreakpointsDownCached()\n/* istanbul ignore next */\n{\n  var breakpoints = getBreakpointsCached();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n};","map":{"version":3,"sources":["D:/UEK/ecommercevuefirestore2304/node_modules/bootstrap-vue/esm/utils/config.js"],"names":["Vue","cloneDeep","get","memoize","DEFAULTS","PROP_NAME","VueProto","prototype","getConfig","getConfigValue","key","getComponentConfig","cmpName","arguments","length","undefined","concat","getBreakpoints","_getBreakpointsCached","getBreakpointsCached","getBreakpointsUp","breakpoints","getBreakpointsUpCached","getBreakpointsDown","getBreakpointsDownCached"],"mappings":"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","sourcesContent":["import Vue from './vue';\nimport cloneDeep from './clone-deep';\nimport get from './get';\nimport memoize from './memoize';\nimport DEFAULTS from './config-defaults'; // --- Constants ---\n\nvar PROP_NAME = '$bvConfig';\nvar VueProto = Vue.prototype; // --- Getter methods ---\n// All methods return a deep clone (immutable) copy of the config\n// value, to prevent mutation of the user config object.\n// Get the current user config. For testing purposes only\n\nexport var getConfig = function getConfig() {\n  return VueProto[PROP_NAME] ? VueProto[PROP_NAME].getConfig() : {};\n}; // Method to grab a config value based on a dotted/array notation key\n\nexport var getConfigValue = function getConfigValue(key) {\n  return VueProto[PROP_NAME] ? VueProto[PROP_NAME].getConfigValue(key) : cloneDeep(get(DEFAULTS, key));\n}; // Method to grab a config value for a particular component\n\nexport var getComponentConfig = function getComponentConfig(cmpName) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // Return the particular config value for key for if specified,\n  // otherwise we return the full config (or an empty object if not found)\n  return key ? getConfigValue(\"\".concat(cmpName, \".\").concat(key)) : getConfigValue(cmpName) || {};\n}; // Convenience method for getting all breakpoint names\n\nexport var getBreakpoints = function getBreakpoints() {\n  return getConfigValue('breakpoints');\n}; // Private function for caching / locking-in breakpoint names\n\nvar _getBreakpointsCached = memoize(function () {\n  return getBreakpoints();\n}); // Convenience method for getting all breakpoint names.\n// Caches the results after first access.\n\n\nexport var getBreakpointsCached = function getBreakpointsCached() {\n  return cloneDeep(_getBreakpointsCached());\n}; // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n\nexport var getBreakpointsUp = function getBreakpointsUp() {\n  var breakpoints = getBreakpoints();\n  breakpoints[0] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n// Caches the results after first access.\n\nexport var getBreakpointsUpCached = memoize(function () {\n  var breakpoints = getBreakpointsCached();\n  breakpoints[0] = '';\n  return breakpoints;\n}); // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n\nexport var getBreakpointsDown = function getBreakpointsDown() {\n  var breakpoints = getBreakpoints();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n// Caches the results after first access.\n\n/* istanbul ignore next: we don't use this method anywhere, yet */\n\nexport var getBreakpointsDownCached = function getBreakpointsDownCached()\n/* istanbul ignore next */\n{\n  var breakpoints = getBreakpointsCached();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n};"]},"metadata":{},"sourceType":"module"}