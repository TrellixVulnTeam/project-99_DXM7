{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport Vue from '../../utils/vue';\nimport idMixin from '../../mixins/id';\nimport formMixin from '../../mixins/form';\nimport formStateMixin from '../../mixins/form-state';\nimport formSizeMixin from '../../mixins/form-size';\nimport formRadioCheckMixin from '../../mixins/form-radio-check';\nimport looseEqual from '../../utils/loose-equal'; // @vue/component\n\nexport var BFormRadio = /*#__PURE__*/Vue.extend({\n  name: 'BFormRadio',\n  mixins: [idMixin, formRadioCheckMixin, // Includes shared render function\n  formMixin, formSizeMixin, formStateMixin],\n  inject: {\n    bvGroup: {\n      from: 'bvRadioGroup',\n      default: false\n    }\n  },\n  props: {\n    checked: {\n      // v-model\n      type: [String, Object, Number, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    // Radio Groups can only have a single value, so determining if checked is simple\n    isChecked: function isChecked() {\n      return looseEqual(this.value, this.computedLocalChecked);\n    },\n    // Flags for form-radio-check mixin\n    isRadio: function isRadio() {\n      return true;\n    },\n    isCheck: function isCheck() {\n      return false;\n    }\n  },\n  watch: {\n    // Radio Groups can only have a single value, so our watchers are simple\n    computedLocalChecked: function computedLocalChecked(newVal, oldVal) {\n      this.$emit('input', this.computedLocalChecked);\n    }\n  },\n  methods: {\n    handleChange: function handleChange(_ref) {\n      var checked = _ref.target.checked;\n      var value = this.value;\n      this.computedLocalChecked = value; // Change is only emitted on user interaction\n\n      this.$emit('change', checked ? value : null); // If this is a child of form-radio-group, we emit a change event on it as well\n\n      if (this.isGroup) {\n        this.bvGroup.$emit('change', checked ? value : null);\n      }\n    }\n  }\n});\nexport default BFormRadio;","map":{"version":3,"sources":["D:/UEK/project-99/node_modules/bootstrap-vue/esm/components/form-radio/form-radio.js"],"names":["Vue","idMixin","formMixin","formStateMixin","formSizeMixin","formRadioCheckMixin","looseEqual","BFormRadio","extend","name","mixins","inject","bvGroup","from","default","props","checked","type","String","Object","Number","Boolean","computed","isChecked","value","computedLocalChecked","isRadio","isCheck","watch","newVal","oldVal","$emit","methods","handleChange","_ref","target","isGroup"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,iBAAhB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CAAkD;;AAElD,OAAO,IAAIC,UAAU,GACrB,aACAP,GAAG,CAACQ,MAAJ,CAAW;AACTC,EAAAA,IAAI,EAAE,YADG;AAETC,EAAAA,MAAM,EAAE,CAACT,OAAD,EAAUI,mBAAV,EAA+B;AACvCH,EAAAA,SADQ,EACGE,aADH,EACkBD,cADlB,CAFC;AAITQ,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE,cADC;AAEPC,MAAAA,OAAO,EAAE;AAFF;AADH,GAJC;AAUTC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE;AACP;AACAC,MAAAA,IAAI,EAAE,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyBC,OAAzB,CAFC;AAGPP,MAAAA,OAAO,EAAE;AAHF;AADJ,GAVE;AAiBTQ,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,aAAOjB,UAAU,CAAC,KAAKkB,KAAN,EAAa,KAAKC,oBAAlB,CAAjB;AACD,KAJO;AAKR;AACAC,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,aAAO,IAAP;AACD,KARO;AASRC,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,aAAO,KAAP;AACD;AAXO,GAjBD;AA8BTC,EAAAA,KAAK,EAAE;AACL;AACAH,IAAAA,oBAAoB,EAAE,SAASA,oBAAT,CAA8BI,MAA9B,EAAsCC,MAAtC,EAA8C;AAClE,WAAKC,KAAL,CAAW,OAAX,EAAoB,KAAKN,oBAAzB;AACD;AAJI,GA9BE;AAoCTO,EAAAA,OAAO,EAAE;AACPC,IAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACxC,UAAIlB,OAAO,GAAGkB,IAAI,CAACC,MAAL,CAAYnB,OAA1B;AACA,UAAIQ,KAAK,GAAG,KAAKA,KAAjB;AACA,WAAKC,oBAAL,GAA4BD,KAA5B,CAHwC,CAGL;;AAEnC,WAAKO,KAAL,CAAW,QAAX,EAAqBf,OAAO,GAAGQ,KAAH,GAAW,IAAvC,EALwC,CAKM;;AAE9C,UAAI,KAAKY,OAAT,EAAkB;AAChB,aAAKxB,OAAL,CAAamB,KAAb,CAAmB,QAAnB,EAA6Bf,OAAO,GAAGQ,KAAH,GAAW,IAA/C;AACD;AACF;AAXM;AApCA,CAAX,CAFO;AAoDP,eAAejB,UAAf","sourcesContent":["import Vue from '../../utils/vue';\nimport idMixin from '../../mixins/id';\nimport formMixin from '../../mixins/form';\nimport formStateMixin from '../../mixins/form-state';\nimport formSizeMixin from '../../mixins/form-size';\nimport formRadioCheckMixin from '../../mixins/form-radio-check';\nimport looseEqual from '../../utils/loose-equal'; // @vue/component\n\nexport var BFormRadio =\n/*#__PURE__*/\nVue.extend({\n  name: 'BFormRadio',\n  mixins: [idMixin, formRadioCheckMixin, // Includes shared render function\n  formMixin, formSizeMixin, formStateMixin],\n  inject: {\n    bvGroup: {\n      from: 'bvRadioGroup',\n      default: false\n    }\n  },\n  props: {\n    checked: {\n      // v-model\n      type: [String, Object, Number, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    // Radio Groups can only have a single value, so determining if checked is simple\n    isChecked: function isChecked() {\n      return looseEqual(this.value, this.computedLocalChecked);\n    },\n    // Flags for form-radio-check mixin\n    isRadio: function isRadio() {\n      return true;\n    },\n    isCheck: function isCheck() {\n      return false;\n    }\n  },\n  watch: {\n    // Radio Groups can only have a single value, so our watchers are simple\n    computedLocalChecked: function computedLocalChecked(newVal, oldVal) {\n      this.$emit('input', this.computedLocalChecked);\n    }\n  },\n  methods: {\n    handleChange: function handleChange(_ref) {\n      var checked = _ref.target.checked;\n      var value = this.value;\n      this.computedLocalChecked = value; // Change is only emitted on user interaction\n\n      this.$emit('change', checked ? value : null); // If this is a child of form-radio-group, we emit a change event on it as well\n\n      if (this.isGroup) {\n        this.bvGroup.$emit('change', checked ? value : null);\n      }\n    }\n  }\n});\nexport default BFormRadio;"]},"metadata":{},"sourceType":"module"}